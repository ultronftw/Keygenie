{
  "id": "1749508530327",
  "timestamp": 1749508530327,
  "filePath": "keygenie_bot.py",
  "oldContent": "import logging\nfrom telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove\nfrom telegram.ext import (\n    ApplicationBuilder,\n    CommandHandler,\n    ContextTypes,\n    ConversationHandler,\n    MessageHandler,\n    filters,\n)\n\n# Enable logging\nlogging.basicConfig(\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO\n)\nlogger = logging.getLogger(__name__)\n\n# States for ConversationHandler\nSELECTING_PRODUCT, WAITING_FOR_TXID = range(2)\n\n# Replace these placeholders with your actual data\nBOT_TOKEN = \"7451215429:AAHGUMU5Vq8FYlfPymIopxhLPu8AowwVdKE\"\nADMIN_ID = 123456789  # Replace with your Telegram user ID (int)\nBTC_ADDRESS = \"your_btc_address\"\nLTC_ADDRESS = \"your_ltc_address\"\nUSDT_ADDRESS = \"your_usdt_address\"\n\n# Define your products and prices here\nPRODUCTS = {\n    \"Product A\": {\"price\": \"0.001 BTC\", \"key\": \"KEY_FOR_PRODUCT_A\"},\n    \"Product B\": {\"price\": \"0.01 LTC\", \"key\": \"KEY_FOR_PRODUCT_B\"},\n    \"Product C\": {\"price\": \"10 USDT\", \"key\": \"KEY_FOR_PRODUCT_C\"},\n}\n\n# Command handlers\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    await update.message.reply_text(\n        \"Welcome to KeyGenie Bot! Use /cmds to see available commands.\"\n    )\n\nasync def cmds(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    commands_text = (\n        \"/start — Welcome message\\n\"\n        \"/cmds — List commands\\n\"\n        \"/buy — Start purchase flow\\n\"\n        \"/info — User info (optional)\\n\"\n        \"/help — How to use the bot\\n\"\n        \"/terms — Terms and conditions\"\n    )\n    await update.message.reply_text(commands_text)\n\nasync def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    help_text = (\n        \"To purchase a product, use /buy.\\n\"\n        \"You will be shown available products and prices.\\n\"\n        \"Send the payment to the provided addresses and then send the transaction ID (TXID).\\n\"\n        \"An admin will verify your payment and send you the key.\"\n    )\n    await update.message.reply_text(help_text)\n\nasync def terms(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    terms_text = (\n        \"Terms and Conditions:\\n\"\n        \"1. All sales are final.\\n\"\n        \"2. Payment verification is manual.\\n\"\n        \"3. Please ensure you send the correct amount.\\n\"\n        \"4. Contact admin for any issues.\"\n    )\n    await update.message.reply_text(terms_text)\n\nasync def info(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user = update.effective_user\n    info_text = (\n        f\"User Info:\\n\"\n        f\"Username: @{user.username if user.username else 'N/A'}\\n\"\n        f\"User ID: {user.id}\\n\"\n        f\"First Name: {user.first_name}\\n\"\n        f\"Last Name: {user.last_name if user.last_name else 'N/A'}\"\n    )\n    await update.message.reply_text(info_text)\n\n# Purchase flow handlers\n\nasync def buy_start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    product_names = list(PRODUCTS.keys())\n    keyboard = [product_names[i:i+2] for i in range(0, len(product_names), 2)]\n    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)\n    await update.message.reply_text(\n        \"Please select a product to buy:\", reply_markup=reply_markup\n    )\n    return SELECTING_PRODUCT\n\nasync def product_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    product = update.message.text\n    if product not in PRODUCTS:\n        await update.message.reply_text(\n            \"Invalid product selected. Please use /buy to start again.\",\n            reply_markup=ReplyKeyboardRemove(),\n        )\n        return ConversationHandler.END\n\n    context.user_data['selected_product'] = product\n    price = PRODUCTS[product]['price']\n    payment_info = (\n        f\"Price for {product}: {price}\\n\\n\"\n        f\"Please send payment to one of the following addresses:\\n\"\n        f\"BTC: {BTC_ADDRESS}\\n\"\n        f\"LTC: {LTC_ADDRESS}\\n\"\n        f\"USDT: {USDT_ADDRESS}\\n\\n\"\n        \"After payment, please send the transaction ID (TXID) here.\"\n    )\n    await update.message.reply_text(payment_info, reply_markup=ReplyKeyboardRemove())\n    return WAITING_FOR_TXID\n\nasync def txid_received(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    txid = update.message.text.strip()\n    product = context.user_data.get('selected_product')\n\n    if not product:\n        await update.message.reply_text(\n            \"No product selected. Please use /buy to start the purchase flow.\"\n        )\n        return ConversationHandler.END\n\n    # Notify admin for manual verification\n    user = update.effective_user\n    admin_message = (\n        f\"Payment TXID received from user @{user.username if user.username else user.id}:\\n\"\n        f\"Product: {product}\\n\"\n        f\"TXID: {txid}\\n\\n\"\n        \"Please verify the payment and send the key to the user.\"\n    )\n    try:\n        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)\n    except Exception as e:\n        logger.error(f\"Failed to notify admin: {e}\")\n\n    await update.message.reply_text(\n        \"Thank you! Your payment TXID has been received and is pending verification by the admin.\"\n    )\n    return ConversationHandler.END\n\nasync def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    await update.message.reply_text(\n        \"Purchase flow cancelled.\", reply_markup=ReplyKeyboardRemove()\n    )\n    return ConversationHandler.END\n\ndef main():\n    application = ApplicationBuilder().token(BOT_TOKEN).build()\n\n    conv_handler = ConversationHandler(\n        entry_points=[CommandHandler('buy', buy_start)],\n        states={\n            SELECTING_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_selected)],\n            WAITING_FOR_TXID: [MessageHandler(filters.TEXT & ~filters.COMMAND, txid_received)],\n        },\n        fallbacks=[CommandHandler('cancel', cancel)],\n    )\n\n    application.add_handler(CommandHandler('start', start))\n    application.add_handler(CommandHandler('cmds', cmds))\n    application.add_handler(CommandHandler('help', help_command))\n    application.add_handler(CommandHandler('terms', terms))\n    application.add_handler(CommandHandler('info', info))\n    application.add_handler(conv_handler)\n\n    application.run_polling()\n\nif __name__ == '__main__':\n    main()\n",
  "content": "import logging\nfrom telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove\nfrom telegram.ext import (\n    ApplicationBuilder,\n    CommandHandler,\n    ContextTypes,\n    ConversationHandler,\n    MessageHandler,\n    filters,\n)\nimport config\n\n# Enable logging\nlogging.basicConfig(\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO\n)\nlogger = logging.getLogger(__name__)\n\n# States for ConversationHandler\nSELECTING_PRODUCT, WAITING_FOR_TXID = range(2)\n\n# Load configuration from config.py\nBOT_TOKEN = config.BOT_TOKEN\nADMIN_ID = config.ADMIN_ID\nBTC_ADDRESS = config.BTC_ADDRESS\nLTC_ADDRESS = config.LTC_ADDRESS\nUSDT_ADDRESS = config.USDT_ADDRESS\nPRODUCTS = config.PRODUCTS\n\n# Command handlers\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    logger.info(f\"User {update.effective_user.id} started the bot.\")\n    await update.message.reply_text(\n        \"Welcome to KeyGenie Bot! Use /cmds to see available commands.\"\n    )\n\nasync def cmds(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    commands_text = (\n        \"/start — Welcome message\\n\"\n        \"/cmds — List commands\\n\"\n        \"/buy — Start purchase flow\\n\"\n        \"/info — User info (optional)\\n\"\n        \"/help — How to use the bot\\n\"\n        \"/terms — Terms and conditions\"\n    )\n    await update.message.reply_text(commands_text)\n\nasync def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    help_text = (\n        \"To purchase a product, use /buy.\\n\"\n        \"You will be shown available products and prices.\\n\"\n        \"Send the payment to the provided addresses and then send the transaction ID (TXID).\\n\"\n        \"An admin will verify your payment and send you the key.\\n\\n\"\n        \"Commands:\\n\"\n        \"/start - Welcome message\\n\"\n        \"/cmds - List commands\\n\"\n        \"/buy - Start purchase flow\\n\"\n        \"/info - Show your user info\\n\"\n        \"/help - Show this help message\\n\"\n        \"/terms - Show terms and conditions\\n\"\n        \"/cancel - Cancel current operation\"\n    )\n    await update.message.reply_text(help_text)\n\nasync def terms(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    terms_text = (\n        \"Terms and Conditions:\\n\"\n        \"1. All sales are final.\\n\"\n        \"2. Payment verification is manual.\\n\"\n        \"3. Please ensure you send the correct amount.\\n\"\n        \"4. Contact admin for any issues.\"\n    )\n    await update.message.reply_text(terms_text)\n\nasync def info(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user = update.e\n    info_text = (\n        f\"User Info:\\n\"\n        f\"Username: @{user.username if user.username else 'N/A'}\\n\"\n        f\"User ID: {user.id}\\n\"\n        f\"First Name: {user.first_name}\\n\"\n        f\"Last Name: {user.last_name if user.last_name else 'N/A'}\"\n    )\n    await update.message.reply_text(info_text)\n\n# Purchase flow handlers\n\nasync def buy_start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    product_names = list(PRODUCTS.keys())\n    keyboard = [product_names[i:i+2] for i in range(0, len(product_names), 2)]\n    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)\n    await update.message.reply_text(\n        \"Please select a product to buy:\", reply_markup=reply_markup\n    )\n    return SELECTING_PRODUCT\n\nasync def product_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    product = update.message.text\n    if product not in PRODUCTS:\n        await update.message.reply_text(\n            \"Invalid product selected. Please use /buy to start again.\",\n            reply_markup=ReplyKeyboardRemove(),\n        )\n        return ConversationHandler.END\n\n    context.user_data['selected_product'] = product\n    price = PRODUCTS[product]['price']\n    payment_info = (\n        f\"Price for {product}: {price}\\n\\n\"\n        f\"Please send payment to one of the following addresses:\\n\"\n        f\"BTC: {BTC_ADDRESS}\\n\"\n        f\"LTC: {LTC_ADDRESS}\\n\"\n        f\"USDT: {USDT_ADDRESS}\\n\\n\"\n        \"After payment, please send the transaction ID (TXID) here.\"\n    )\n    await update.message.reply_text(payment_info, reply_markup=ReplyKeyboardRemove())\n    return WAITING_FOR_TXID\n\nasync def txid_received(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    txid = update.message.text.strip()\n    product = context.user_data.get('selected_product')\n\n    if not product:\n        await update.message.reply_text(\n            \"No product selected. Please use /buy to start the purchase flow.\"\n        )\n        return ConversationHandler.END\n\n    # Notify admin for manual verification\n    user = update.effective_user\n    admin_message = (\n        f\"Payment TXID received from user @{user.username if user.username else user.id}:\\n\"\n        f\"Product: {product}\\n\"\n        f\"TXID: {txid}\\n\\n\"\n        \"Please verify the payment and send the key to the user.\"\n    )\n    try:\n        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)\n    except Exception as e:\n        logger.error(f\"Failed to notify admin: {e}\")\n\n    await update.message.reply_text(\n        \"Thank you! Your payment TXID has been received and is pending verification by the admin.\"\n    )\n    return ConversationHandler.END\n\nasync def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    await update.message.reply_text(\n        \"Purchase flow cancelled.\", reply_markup=ReplyKeyboardRemove()\n    )\n    return ConversationHandler.END\n\ndef main():\n    application = ApplicationBuilder().token(BOT_TOKEN).build()\n\n    conv_handler = ConversationHandler(\n        entry_points=[CommandHandler('buy', buy_start)],\n        states={\n            SELECTING_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_selected)],\n            WAITING_FOR_TXID: [MessageHandler(filters.TEXT & ~filters.COMMAND, txid_received)],\n        },\n        fallbacks=[CommandHandler('cancel', cancel)],\n    )\n\n    application.add_handler(CommandHandler('start', start))\n    application.add_handler(CommandHandler('cmds', cmds))\n    application.add_handler(CommandHandler('help', help_command))\n    application.add_handler(CommandHandler('terms', terms))\n    application.add_handler(CommandHandler('info', info))\n    application.add_handler(conv_handler)\n\n    application.run_polling()\n\nif __name__ == '__main__':\n    main()\n",
  "diff": "@@ -7,8 +7,9 @@\n     ConversationHandler,\n     MessageHandler,\n     filters,\n )\n+import config\n \n # Enable logging\n logging.basicConfig(\n     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO\n@@ -17,25 +18,20 @@\n \n # States for ConversationHandler\n SELECTING_PRODUCT, WAITING_FOR_TXID = range(2)\n \n-# Replace these placeholders with your actual data\n-BOT_TOKEN = \"7451215429:AAHGUMU5Vq8FYlfPymIopxhLPu8AowwVdKE\"\n-ADMIN_ID = 123456789  # Replace with your Telegram user ID (int)\n-BTC_ADDRESS = \"your_btc_address\"\n-LTC_ADDRESS = \"your_ltc_address\"\n-USDT_ADDRESS = \"your_usdt_address\"\n+# Load configuration from config.py\n+BOT_TOKEN = config.BOT_TOKEN\n+ADMIN_ID = config.ADMIN_ID\n+BTC_ADDRESS = config.BTC_ADDRESS\n+LTC_ADDRESS = config.LTC_ADDRESS\n+USDT_ADDRESS = config.USDT_ADDRESS\n+PRODUCTS = config.PRODUCTS\n \n-# Define your products and prices here\n-PRODUCTS = {\n-    \"Product A\": {\"price\": \"0.001 BTC\", \"key\": \"KEY_FOR_PRODUCT_A\"},\n-    \"Product B\": {\"price\": \"0.01 LTC\", \"key\": \"KEY_FOR_PRODUCT_B\"},\n-    \"Product C\": {\"price\": \"10 USDT\", \"key\": \"KEY_FOR_PRODUCT_C\"},\n-}\n-\n # Command handlers\n \n async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n+    logger.info(f\"User {update.effective_user.id} started the bot.\")\n     await update.message.reply_text(\n         \"Welcome to KeyGenie Bot! Use /cmds to see available commands.\"\n     )\n \n@@ -54,9 +50,17 @@\n     help_text = (\n         \"To purchase a product, use /buy.\\n\"\n         \"You will be shown available products and prices.\\n\"\n         \"Send the payment to the provided addresses and then send the transaction ID (TXID).\\n\"\n-        \"An admin will verify your payment and send you the key.\"\n+        \"An admin will verify your payment and send you the key.\\n\\n\"\n+        \"Commands:\\n\"\n+        \"/start - Welcome message\\n\"\n+        \"/cmds - List commands\\n\"\n+        \"/buy - Start purchase flow\\n\"\n+        \"/info - Show your user info\\n\"\n+        \"/help - Show this help message\\n\"\n+        \"/terms - Show terms and conditions\\n\"\n+        \"/cancel - Cancel current operation\"\n     )\n     await update.message.reply_text(help_text)\n \n async def terms(update: Update, context: ContextTypes.DEFAULT_TYPE):\n@@ -69,9 +73,9 @@\n     )\n     await update.message.reply_text(terms_text)\n \n async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):\n-    user = update.effective_user\n+    user = update.e\n     info_text = (\n         f\"User Info:\\n\"\n         f\"Username: @{user.username if user.username else 'N/A'}\\n\"\n         f\"User ID: {user.id}\\n\"\n",
  "description": "File modification",
  "taskId": "1749508150593",
  "revisionNumber": 1
}