{
  "id": "1749509594521",
  "timestamp": 1749509594521,
  "filePath": "payment_verification_cron.py",
  "oldContent": "[EMPTY_FILE]",
  "content": "import asyncio\nimport httpx\nimport json\nimport os\nimport logging\n\nimport config\n\nUSER_DATA_FILE = \"user_data.json\"\nLOG_FILE = \"payment_verification_cron.log\"\n\nlogging.basicConfig(\n    filename=LOG_FILE,\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n)\n\ndef load_user_data():\n    if not os.path.exists(USER_DATA_FILE):\n        return {}\n    with open(USER_DATA_FILE, \"r\") as f:\n        return json.load(f)\n\ndef save_user_data(data):\n    with open(USER_DATA_FILE, \"w\") as f:\n        json.dump(data, f, indent=2)\n\nasync def verify_payment(txid: str, product: str) -> bool:\n    try:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                config.PAYMENT_VERIFICATION_API_URL,\n                headers={\"Authorization\": f\"Bearer {config.PAYMENT_VERIFICATION_API_KEY}\"},\n                json={\"txid\": txid, \"product\": product},\n                timeout=10.0,\n            )\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"verified\", False)\n    except Exception as e:\n        logging.error(f\"Payment verification API error: {e}\")\n        return False\n\nasync def process_pending_payments():\n    user_data = load_user_data()\n    updated = False\n\n    for user_id, record in user_data.items():\n        purchases = record.get(\"purchases\", [])\n        for purchase in purchases:\n            if purchase.get(\"status\") == \"pending\":\n                txid = purchase.get(\"txid\")\n                product = purchase.get(\"product\")\n                if not txid or not product:\n                    continue\n                verified = await verify_payment(txid, product)\n                if verified:\n                    purchase[\"status\"] = \"verified\"\n                    logging.info(f\"Payment verified for user {user_id}, product {product}, txid {txid}\")\n                    updated = True\n                else:\n                    logging.info(f\"Payment not verified yet for user {user_id}, product {product}, txid {txid}\")\n\n    if updated:\n        save_user_data(user_data)\n\nif __name__ == \"__main__\":\n    asyncio.run(process_pending_payments())\n",
  "diff": "@@ -1,1 +1,68 @@\n-[EMPTY_FILE]\n\\ No newline at end of file\n+import asyncio\n+import httpx\n+import json\n+import os\n+import logging\n+\n+import config\n+\n+USER_DATA_FILE = \"user_data.json\"\n+LOG_FILE = \"payment_verification_cron.log\"\n+\n+logging.basicConfig(\n+    filename=LOG_FILE,\n+    level=logging.INFO,\n+    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n+)\n+\n+def load_user_data():\n+    if not os.path.exists(USER_DATA_FILE):\n+        return {}\n+    with open(USER_DATA_FILE, \"r\") as f:\n+        return json.load(f)\n+\n+def save_user_data(data):\n+    with open(USER_DATA_FILE, \"w\") as f:\n+        json.dump(data, f, indent=2)\n+\n+async def verify_payment(txid: str, product: str) -> bool:\n+    try:\n+        async with httpx.AsyncClient() as client:\n+            response = await client.post(\n+                config.PAYMENT_VERIFICATION_API_URL,\n+                headers={\"Authorization\": f\"Bearer {config.PAYMENT_VERIFICATION_API_KEY}\"},\n+                json={\"txid\": txid, \"product\": product},\n+                timeout=10.0,\n+            )\n+            response.raise_for_status()\n+            data = response.json()\n+            return data.get(\"verified\", False)\n+    except Exception as e:\n+        logging.error(f\"Payment verification API error: {e}\")\n+        return False\n+\n+async def process_pending_payments():\n+    user_data = load_user_data()\n+    updated = False\n+\n+    for user_id, record in user_data.items():\n+        purchases = record.get(\"purchases\", [])\n+        for purchase in purchases:\n+            if purchase.get(\"status\") == \"pending\":\n+                txid = purchase.get(\"txid\")\n+                product = purchase.get(\"product\")\n+                if not txid or not product:\n+                    continue\n+                verified = await verify_payment(txid, product)\n+                if verified:\n+                    purchase[\"status\"] = \"verified\"\n+                    logging.info(f\"Payment verified for user {user_id}, product {product}, txid {txid}\")\n+                    updated = True\n+                else:\n+                    logging.info(f\"Payment not verified yet for user {user_id}, product {product}, txid {txid}\")\n+\n+    if updated:\n+        save_user_data(user_data)\n+\n+if __name__ == \"__main__\":\n+    asyncio.run(process_pending_payments())\n",
  "description": "File modification",
  "taskId": "1749508150593",
  "revisionNumber": 1
}