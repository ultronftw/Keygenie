"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      init_react_shim();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      init_react_shim();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      init_react_shim();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      init_react_shim();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      init_react_shim();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React2 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React2.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      init_react_shim();
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // react-shim.js
  var React, ReactDOM;
  var init_react_shim = __esm({
    "react-shim.js"() {
      "use strict";
      React = __toESM(require_react());
      ReactDOM = __toESM(require_react_dom());
      window.React = React;
      window.ReactDOM = ReactDOM;
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      init_react_shim();
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/livekit-client/dist/livekit-client.umd.js
  var require_livekit_client_umd = __commonJS({
    "node_modules/livekit-client/dist/livekit-client.umd.js"(exports, module) {
      init_react_shim();
      !function(e, t) {
        "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).LivekitClient = {});
      }(exports, function(e) {
        "use strict";
        function t(e2, t2) {
          return t2.forEach(function(t3) {
            t3 && "string" != typeof t3 && !Array.isArray(t3) && Object.keys(t3).forEach(function(n2) {
              if ("default" !== n2 && !(n2 in e2)) {
                var i2 = Object.getOwnPropertyDescriptor(t3, n2);
                Object.defineProperty(e2, n2, i2.get ? i2 : { enumerable: true, get: function() {
                  return t3[n2];
                } });
              }
            });
          }), Object.freeze(e2);
        }
        var n = Object.defineProperty, i = (e2, t2, i2) => ((e3, t3, i3) => t3 in e3 ? n(e3, t3, { enumerable: true, configurable: true, writable: true, value: i3 }) : e3[t3] = i3)(e2, "symbol" != typeof t2 ? t2 + "" : t2, i2);
        class s {
          constructor() {
            i(this, "_locking"), i(this, "_locks"), this._locking = Promise.resolve(), this._locks = 0;
          }
          isLocked() {
            return this._locks > 0;
          }
          lock() {
            let e2;
            this._locks += 1;
            const t2 = new Promise((t3) => e2 = () => {
              this._locks -= 1, t3();
            }), n2 = this._locking.then(() => e2);
            return this._locking = this._locking.then(() => t2), n2;
          }
        }
        function o(e2, t2) {
          if (!e2) throw new Error(t2);
        }
        const r = 34028234663852886e22, a = -34028234663852886e22, c = 4294967295, d = 2147483647, l = -2147483648;
        function u(e2) {
          if ("number" != typeof e2) throw new Error("invalid int 32: " + typeof e2);
          if (!Number.isInteger(e2) || e2 > d || e2 < l) throw new Error("invalid int 32: " + e2);
        }
        function h(e2) {
          if ("number" != typeof e2) throw new Error("invalid uint 32: " + typeof e2);
          if (!Number.isInteger(e2) || e2 > c || e2 < 0) throw new Error("invalid uint 32: " + e2);
        }
        function p(e2) {
          if ("number" != typeof e2) throw new Error("invalid float 32: " + typeof e2);
          if (Number.isFinite(e2) && (e2 > r || e2 < a)) throw new Error("invalid float 32: " + e2);
        }
        const m = Symbol("@bufbuild/protobuf/enum-type");
        function g(e2) {
          const t2 = e2[m];
          return o(t2, "missing enum type on enum object"), t2;
        }
        function v(e2, t2, n2, i2) {
          e2[m] = f(t2, n2.map((t3) => ({ no: t3.no, name: t3.name, localName: e2[t3.no] })));
        }
        function f(e2, t2, n2) {
          const i2 = /* @__PURE__ */ Object.create(null), s2 = /* @__PURE__ */ Object.create(null), o2 = [];
          for (const e3 of t2) {
            const t3 = b(e3);
            o2.push(t3), i2[e3.name] = t3, s2[e3.no] = t3;
          }
          return { typeName: e2, values: o2, findName: (e3) => i2[e3], findNumber: (e3) => s2[e3] };
        }
        function k(e2, t2, n2) {
          const i2 = {};
          for (const e3 of t2) {
            const t3 = b(e3);
            i2[t3.localName] = t3.no, i2[t3.no] = t3.localName;
          }
          return v(i2, e2, t2), i2;
        }
        function b(e2) {
          return "localName" in e2 ? e2 : Object.assign(Object.assign({}, e2), { localName: e2.name });
        }
        class y {
          equals(e2) {
            return this.getType().runtime.util.equals(this.getType(), this, e2);
          }
          clone() {
            return this.getType().runtime.util.clone(this);
          }
          fromBinary(e2, t2) {
            const n2 = this.getType().runtime.bin, i2 = n2.makeReadOptions(t2);
            return n2.readMessage(this, i2.readerFactory(e2), e2.byteLength, i2), this;
          }
          fromJson(e2, t2) {
            const n2 = this.getType(), i2 = n2.runtime.json, s2 = i2.makeReadOptions(t2);
            return i2.readMessage(n2, e2, s2, this), this;
          }
          fromJsonString(e2, t2) {
            let n2;
            try {
              n2 = JSON.parse(e2);
            } catch (e3) {
              throw new Error("cannot decode ".concat(this.getType().typeName, " from JSON: ").concat(e3 instanceof Error ? e3.message : String(e3)));
            }
            return this.fromJson(n2, t2);
          }
          toBinary(e2) {
            const t2 = this.getType().runtime.bin, n2 = t2.makeWriteOptions(e2), i2 = n2.writerFactory();
            return t2.writeMessage(this, i2, n2), i2.finish();
          }
          toJson(e2) {
            const t2 = this.getType().runtime.json, n2 = t2.makeWriteOptions(e2);
            return t2.writeMessage(this, n2);
          }
          toJsonString(e2) {
            var t2;
            const n2 = this.toJson(e2);
            return JSON.stringify(n2, null, null !== (t2 = null == e2 ? void 0 : e2.prettySpaces) && void 0 !== t2 ? t2 : 0);
          }
          toJSON() {
            return this.toJson({ emitDefaultValues: true });
          }
          getType() {
            return Object.getPrototypeOf(this).constructor;
          }
        }
        function T() {
          let e2 = 0, t2 = 0;
          for (let n3 = 0; n3 < 28; n3 += 7) {
            let i2 = this.buf[this.pos++];
            if (e2 |= (127 & i2) << n3, 0 == (128 & i2)) return this.assertBounds(), [e2, t2];
          }
          let n2 = this.buf[this.pos++];
          if (e2 |= (15 & n2) << 28, t2 = (112 & n2) >> 4, 0 == (128 & n2)) return this.assertBounds(), [e2, t2];
          for (let n3 = 3; n3 <= 31; n3 += 7) {
            let i2 = this.buf[this.pos++];
            if (t2 |= (127 & i2) << n3, 0 == (128 & i2)) return this.assertBounds(), [e2, t2];
          }
          throw new Error("invalid varint");
        }
        function C(e2, t2, n2) {
          for (let i3 = 0; i3 < 28; i3 += 7) {
            const s3 = e2 >>> i3, o2 = !(s3 >>> 7 == 0 && 0 == t2), r2 = 255 & (o2 ? 128 | s3 : s3);
            if (n2.push(r2), !o2) return;
          }
          const i2 = e2 >>> 28 & 15 | (7 & t2) << 4, s2 = !(t2 >> 3 == 0);
          if (n2.push(255 & (s2 ? 128 | i2 : i2)), s2) {
            for (let e3 = 3; e3 < 31; e3 += 7) {
              const i3 = t2 >>> e3, s3 = !(i3 >>> 7 == 0), o2 = 255 & (s3 ? 128 | i3 : i3);
              if (n2.push(o2), !s3) return;
            }
            n2.push(t2 >>> 31 & 1);
          }
        }
        const S = 4294967296;
        function E(e2) {
          const t2 = "-" === e2[0];
          t2 && (e2 = e2.slice(1));
          const n2 = 1e6;
          let i2 = 0, s2 = 0;
          function o2(t3, o3) {
            const r2 = Number(e2.slice(t3, o3));
            s2 *= n2, i2 = i2 * n2 + r2, i2 >= S && (s2 += i2 / S | 0, i2 %= S);
          }
          return o2(-24, -18), o2(-18, -12), o2(-12, -6), o2(-6), t2 ? R(i2, s2) : P(i2, s2);
        }
        function w(e2, t2) {
          if ({ lo: e2, hi: t2 } = function(e3, t3) {
            return { lo: e3 >>> 0, hi: t3 >>> 0 };
          }(e2, t2), t2 <= 2097151) return String(S * t2 + e2);
          const n2 = 16777215 & (e2 >>> 24 | t2 << 8), i2 = t2 >> 16 & 65535;
          let s2 = (16777215 & e2) + 6777216 * n2 + 6710656 * i2, o2 = n2 + 8147497 * i2, r2 = 2 * i2;
          const a2 = 1e7;
          return s2 >= a2 && (o2 += Math.floor(s2 / a2), s2 %= a2), o2 >= a2 && (r2 += Math.floor(o2 / a2), o2 %= a2), r2.toString() + I(o2) + I(s2);
        }
        function P(e2, t2) {
          return { lo: 0 | e2, hi: 0 | t2 };
        }
        function R(e2, t2) {
          return t2 = ~t2, e2 ? e2 = 1 + ~e2 : t2 += 1, P(e2, t2);
        }
        const I = (e2) => {
          const t2 = String(e2);
          return "0000000".slice(t2.length) + t2;
        };
        function O(e2, t2) {
          if (e2 >= 0) {
            for (; e2 > 127; ) t2.push(127 & e2 | 128), e2 >>>= 7;
            t2.push(e2);
          } else {
            for (let n2 = 0; n2 < 9; n2++) t2.push(127 & e2 | 128), e2 >>= 7;
            t2.push(1);
          }
        }
        function D() {
          let e2 = this.buf[this.pos++], t2 = 127 & e2;
          if (0 == (128 & e2)) return this.assertBounds(), t2;
          if (e2 = this.buf[this.pos++], t2 |= (127 & e2) << 7, 0 == (128 & e2)) return this.assertBounds(), t2;
          if (e2 = this.buf[this.pos++], t2 |= (127 & e2) << 14, 0 == (128 & e2)) return this.assertBounds(), t2;
          if (e2 = this.buf[this.pos++], t2 |= (127 & e2) << 21, 0 == (128 & e2)) return this.assertBounds(), t2;
          e2 = this.buf[this.pos++], t2 |= (15 & e2) << 28;
          for (let t3 = 5; 0 != (128 & e2) && t3 < 10; t3++) e2 = this.buf[this.pos++];
          if (0 != (128 & e2)) throw new Error("invalid varint");
          return this.assertBounds(), t2 >>> 0;
        }
        const x = function() {
          const e2 = new DataView(new ArrayBuffer(8));
          if ("function" == typeof BigInt && "function" == typeof e2.getBigInt64 && "function" == typeof e2.getBigUint64 && "function" == typeof e2.setBigInt64 && "function" == typeof e2.setBigUint64 && ("object" != typeof process || "object" != typeof process.env || "1" !== process.env.BUF_BIGINT_DISABLE)) {
            const t3 = BigInt("-9223372036854775808"), n3 = BigInt("9223372036854775807"), i2 = BigInt("0"), s2 = BigInt("18446744073709551615");
            return { zero: BigInt(0), supported: true, parse(e3) {
              const i3 = "bigint" == typeof e3 ? e3 : BigInt(e3);
              if (i3 > n3 || i3 < t3) throw new Error("int64 invalid: ".concat(e3));
              return i3;
            }, uParse(e3) {
              const t4 = "bigint" == typeof e3 ? e3 : BigInt(e3);
              if (t4 > s2 || t4 < i2) throw new Error("uint64 invalid: ".concat(e3));
              return t4;
            }, enc(t4) {
              return e2.setBigInt64(0, this.parse(t4), true), { lo: e2.getInt32(0, true), hi: e2.getInt32(4, true) };
            }, uEnc(t4) {
              return e2.setBigInt64(0, this.uParse(t4), true), { lo: e2.getInt32(0, true), hi: e2.getInt32(4, true) };
            }, dec: (t4, n4) => (e2.setInt32(0, t4, true), e2.setInt32(4, n4, true), e2.getBigInt64(0, true)), uDec: (t4, n4) => (e2.setInt32(0, t4, true), e2.setInt32(4, n4, true), e2.getBigUint64(0, true)) };
          }
          const t2 = (e3) => o(/^-?[0-9]+$/.test(e3), "int64 invalid: ".concat(e3)), n2 = (e3) => o(/^[0-9]+$/.test(e3), "uint64 invalid: ".concat(e3));
          return { zero: "0", supported: false, parse: (e3) => ("string" != typeof e3 && (e3 = e3.toString()), t2(e3), e3), uParse: (e3) => ("string" != typeof e3 && (e3 = e3.toString()), n2(e3), e3), enc: (e3) => ("string" != typeof e3 && (e3 = e3.toString()), t2(e3), E(e3)), uEnc: (e3) => ("string" != typeof e3 && (e3 = e3.toString()), n2(e3), E(e3)), dec: (e3, t3) => function(e4, t4) {
            let n3 = P(e4, t4);
            const i2 = 2147483648 & n3.hi;
            i2 && (n3 = R(n3.lo, n3.hi));
            const s2 = w(n3.lo, n3.hi);
            return i2 ? "-" + s2 : s2;
          }(e3, t3), uDec: (e3, t3) => w(e3, t3) };
        }();
        var M, N, _;
        function A(e2, t2, n2) {
          if (t2 === n2) return true;
          if (e2 == M.BYTES) {
            if (!(t2 instanceof Uint8Array && n2 instanceof Uint8Array)) return false;
            if (t2.length !== n2.length) return false;
            for (let e3 = 0; e3 < t2.length; e3++) if (t2[e3] !== n2[e3]) return false;
            return true;
          }
          switch (e2) {
            case M.UINT64:
            case M.FIXED64:
            case M.INT64:
            case M.SFIXED64:
            case M.SINT64:
              return t2 == n2;
          }
          return false;
        }
        function L(e2, t2) {
          switch (e2) {
            case M.BOOL:
              return false;
            case M.UINT64:
            case M.FIXED64:
            case M.INT64:
            case M.SFIXED64:
            case M.SINT64:
              return 0 == t2 ? x.zero : "0";
            case M.DOUBLE:
            case M.FLOAT:
              return 0;
            case M.BYTES:
              return new Uint8Array(0);
            case M.STRING:
              return "";
            default:
              return 0;
          }
        }
        function U(e2, t2) {
          switch (e2) {
            case M.BOOL:
              return false === t2;
            case M.STRING:
              return "" === t2;
            case M.BYTES:
              return t2 instanceof Uint8Array && !t2.byteLength;
            default:
              return 0 == t2;
          }
        }
        !function(e2) {
          e2[e2.DOUBLE = 1] = "DOUBLE", e2[e2.FLOAT = 2] = "FLOAT", e2[e2.INT64 = 3] = "INT64", e2[e2.UINT64 = 4] = "UINT64", e2[e2.INT32 = 5] = "INT32", e2[e2.FIXED64 = 6] = "FIXED64", e2[e2.FIXED32 = 7] = "FIXED32", e2[e2.BOOL = 8] = "BOOL", e2[e2.STRING = 9] = "STRING", e2[e2.BYTES = 12] = "BYTES", e2[e2.UINT32 = 13] = "UINT32", e2[e2.SFIXED32 = 15] = "SFIXED32", e2[e2.SFIXED64 = 16] = "SFIXED64", e2[e2.SINT32 = 17] = "SINT32", e2[e2.SINT64 = 18] = "SINT64";
        }(M || (M = {})), function(e2) {
          e2[e2.BIGINT = 0] = "BIGINT", e2[e2.STRING = 1] = "STRING";
        }(N || (N = {})), function(e2) {
          e2[e2.Varint = 0] = "Varint", e2[e2.Bit64 = 1] = "Bit64", e2[e2.LengthDelimited = 2] = "LengthDelimited", e2[e2.StartGroup = 3] = "StartGroup", e2[e2.EndGroup = 4] = "EndGroup", e2[e2.Bit32 = 5] = "Bit32";
        }(_ || (_ = {}));
        class j {
          constructor(e2) {
            this.stack = [], this.textEncoder = null != e2 ? e2 : new TextEncoder(), this.chunks = [], this.buf = [];
          }
          finish() {
            this.chunks.push(new Uint8Array(this.buf));
            let e2 = 0;
            for (let t3 = 0; t3 < this.chunks.length; t3++) e2 += this.chunks[t3].length;
            let t2 = new Uint8Array(e2), n2 = 0;
            for (let e3 = 0; e3 < this.chunks.length; e3++) t2.set(this.chunks[e3], n2), n2 += this.chunks[e3].length;
            return this.chunks = [], t2;
          }
          fork() {
            return this.stack.push({ chunks: this.chunks, buf: this.buf }), this.chunks = [], this.buf = [], this;
          }
          join() {
            let e2 = this.finish(), t2 = this.stack.pop();
            if (!t2) throw new Error("invalid state, fork stack empty");
            return this.chunks = t2.chunks, this.buf = t2.buf, this.uint32(e2.byteLength), this.raw(e2);
          }
          tag(e2, t2) {
            return this.uint32((e2 << 3 | t2) >>> 0);
          }
          raw(e2) {
            return this.buf.length && (this.chunks.push(new Uint8Array(this.buf)), this.buf = []), this.chunks.push(e2), this;
          }
          uint32(e2) {
            for (h(e2); e2 > 127; ) this.buf.push(127 & e2 | 128), e2 >>>= 7;
            return this.buf.push(e2), this;
          }
          int32(e2) {
            return u(e2), O(e2, this.buf), this;
          }
          bool(e2) {
            return this.buf.push(e2 ? 1 : 0), this;
          }
          bytes(e2) {
            return this.uint32(e2.byteLength), this.raw(e2);
          }
          string(e2) {
            let t2 = this.textEncoder.encode(e2);
            return this.uint32(t2.byteLength), this.raw(t2);
          }
          float(e2) {
            p(e2);
            let t2 = new Uint8Array(4);
            return new DataView(t2.buffer).setFloat32(0, e2, true), this.raw(t2);
          }
          double(e2) {
            let t2 = new Uint8Array(8);
            return new DataView(t2.buffer).setFloat64(0, e2, true), this.raw(t2);
          }
          fixed32(e2) {
            h(e2);
            let t2 = new Uint8Array(4);
            return new DataView(t2.buffer).setUint32(0, e2, true), this.raw(t2);
          }
          sfixed32(e2) {
            u(e2);
            let t2 = new Uint8Array(4);
            return new DataView(t2.buffer).setInt32(0, e2, true), this.raw(t2);
          }
          sint32(e2) {
            return u(e2), O(e2 = (e2 << 1 ^ e2 >> 31) >>> 0, this.buf), this;
          }
          sfixed64(e2) {
            let t2 = new Uint8Array(8), n2 = new DataView(t2.buffer), i2 = x.enc(e2);
            return n2.setInt32(0, i2.lo, true), n2.setInt32(4, i2.hi, true), this.raw(t2);
          }
          fixed64(e2) {
            let t2 = new Uint8Array(8), n2 = new DataView(t2.buffer), i2 = x.uEnc(e2);
            return n2.setInt32(0, i2.lo, true), n2.setInt32(4, i2.hi, true), this.raw(t2);
          }
          int64(e2) {
            let t2 = x.enc(e2);
            return C(t2.lo, t2.hi, this.buf), this;
          }
          sint64(e2) {
            let t2 = x.enc(e2), n2 = t2.hi >> 31;
            return C(t2.lo << 1 ^ n2, (t2.hi << 1 | t2.lo >>> 31) ^ n2, this.buf), this;
          }
          uint64(e2) {
            let t2 = x.uEnc(e2);
            return C(t2.lo, t2.hi, this.buf), this;
          }
        }
        class F {
          constructor(e2, t2) {
            this.varint64 = T, this.uint32 = D, this.buf = e2, this.len = e2.length, this.pos = 0, this.view = new DataView(e2.buffer, e2.byteOffset, e2.byteLength), this.textDecoder = null != t2 ? t2 : new TextDecoder();
          }
          tag() {
            let e2 = this.uint32(), t2 = e2 >>> 3, n2 = 7 & e2;
            if (t2 <= 0 || n2 < 0 || n2 > 5) throw new Error("illegal tag: field no " + t2 + " wire type " + n2);
            return [t2, n2];
          }
          skip(e2, t2) {
            let n2 = this.pos;
            switch (e2) {
              case _.Varint:
                for (; 128 & this.buf[this.pos++]; ) ;
                break;
              case _.Bit64:
                this.pos += 4;
              case _.Bit32:
                this.pos += 4;
                break;
              case _.LengthDelimited:
                let n3 = this.uint32();
                this.pos += n3;
                break;
              case _.StartGroup:
                for (; ; ) {
                  const [e3, n4] = this.tag();
                  if (n4 === _.EndGroup) {
                    if (void 0 !== t2 && e3 !== t2) throw new Error("invalid end group tag");
                    break;
                  }
                  this.skip(n4, e3);
                }
                break;
              default:
                throw new Error("cant skip wire type " + e2);
            }
            return this.assertBounds(), this.buf.subarray(n2, this.pos);
          }
          assertBounds() {
            if (this.pos > this.len) throw new RangeError("premature EOF");
          }
          int32() {
            return 0 | this.uint32();
          }
          sint32() {
            let e2 = this.uint32();
            return e2 >>> 1 ^ -(1 & e2);
          }
          int64() {
            return x.dec(...this.varint64());
          }
          uint64() {
            return x.uDec(...this.varint64());
          }
          sint64() {
            let [e2, t2] = this.varint64(), n2 = -(1 & e2);
            return e2 = (e2 >>> 1 | (1 & t2) << 31) ^ n2, t2 = t2 >>> 1 ^ n2, x.dec(e2, t2);
          }
          bool() {
            let [e2, t2] = this.varint64();
            return 0 !== e2 || 0 !== t2;
          }
          fixed32() {
            return this.view.getUint32((this.pos += 4) - 4, true);
          }
          sfixed32() {
            return this.view.getInt32((this.pos += 4) - 4, true);
          }
          fixed64() {
            return x.uDec(this.sfixed32(), this.sfixed32());
          }
          sfixed64() {
            return x.dec(this.sfixed32(), this.sfixed32());
          }
          float() {
            return this.view.getFloat32((this.pos += 4) - 4, true);
          }
          double() {
            return this.view.getFloat64((this.pos += 8) - 8, true);
          }
          bytes() {
            let e2 = this.uint32(), t2 = this.pos;
            return this.pos += e2, this.assertBounds(), this.buf.subarray(t2, t2 + e2);
          }
          string() {
            return this.textDecoder.decode(this.bytes());
          }
        }
        function B(e2) {
          const t2 = e2.field.localName, n2 = /* @__PURE__ */ Object.create(null);
          return n2[t2] = function(e3) {
            const t3 = e3.field;
            if (t3.repeated) return [];
            if (void 0 !== t3.default) return t3.default;
            switch (t3.kind) {
              case "enum":
                return t3.T.values[0].no;
              case "scalar":
                return L(t3.T, t3.L);
              case "message":
                const e4 = t3.T, n3 = new e4();
                return e4.fieldWrapper ? e4.fieldWrapper.unwrapField(n3) : n3;
              case "map":
                throw "map fields are not allowed to be extensions";
            }
          }(e2), [n2, () => n2[t2]];
        }
        let V = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), q = [];
        for (let e2 = 0; e2 < V.length; e2++) q[V[e2].charCodeAt(0)] = e2;
        q["-".charCodeAt(0)] = V.indexOf("+"), q["_".charCodeAt(0)] = V.indexOf("/");
        const K = { dec(e2) {
          let t2 = 3 * e2.length / 4;
          "=" == e2[e2.length - 2] ? t2 -= 2 : "=" == e2[e2.length - 1] && (t2 -= 1);
          let n2, i2 = new Uint8Array(t2), s2 = 0, o2 = 0, r2 = 0;
          for (let t3 = 0; t3 < e2.length; t3++) {
            if (n2 = q[e2.charCodeAt(t3)], void 0 === n2) switch (e2[t3]) {
              case "=":
                o2 = 0;
              case "\n":
              case "\r":
              case "	":
              case " ":
                continue;
              default:
                throw Error("invalid base64 string.");
            }
            switch (o2) {
              case 0:
                r2 = n2, o2 = 1;
                break;
              case 1:
                i2[s2++] = r2 << 2 | (48 & n2) >> 4, r2 = n2, o2 = 2;
                break;
              case 2:
                i2[s2++] = (15 & r2) << 4 | (60 & n2) >> 2, r2 = n2, o2 = 3;
                break;
              case 3:
                i2[s2++] = (3 & r2) << 6 | n2, o2 = 0;
            }
          }
          if (1 == o2) throw Error("invalid base64 string.");
          return i2.subarray(0, s2);
        }, enc(e2) {
          let t2, n2 = "", i2 = 0, s2 = 0;
          for (let o2 = 0; o2 < e2.length; o2++) switch (t2 = e2[o2], i2) {
            case 0:
              n2 += V[t2 >> 2], s2 = (3 & t2) << 4, i2 = 1;
              break;
            case 1:
              n2 += V[s2 | t2 >> 4], s2 = (15 & t2) << 2, i2 = 2;
              break;
            case 2:
              n2 += V[s2 | t2 >> 6], n2 += V[63 & t2], i2 = 0;
          }
          return i2 && (n2 += V[s2], n2 += "=", 1 == i2 && (n2 += "=")), n2;
        } };
        function W(e2, t2, n2) {
          z(t2, e2);
          const i2 = t2.runtime.bin.makeReadOptions(n2), s2 = function(e3, t3) {
            if (!t3.repeated && ("enum" == t3.kind || "scalar" == t3.kind)) {
              for (let n3 = e3.length - 1; n3 >= 0; --n3) if (e3[n3].no == t3.no) return [e3[n3]];
              return [];
            }
            return e3.filter((e4) => e4.no === t3.no);
          }(e2.getType().runtime.bin.listUnknownFields(e2), t2.field), [o2, r2] = B(t2);
          for (const e3 of s2) t2.runtime.bin.readField(o2, i2.readerFactory(e3.data), t2.field, e3.wireType, i2);
          return r2();
        }
        function H(e2, t2, n2, i2) {
          z(t2, e2);
          const s2 = t2.runtime.bin.makeReadOptions(i2), o2 = t2.runtime.bin.makeWriteOptions(i2);
          if (G(e2, t2)) {
            const n3 = e2.getType().runtime.bin.listUnknownFields(e2).filter((e3) => e3.no != t2.field.no);
            e2.getType().runtime.bin.discardUnknownFields(e2);
            for (const t3 of n3) e2.getType().runtime.bin.onUnknownField(e2, t3.no, t3.wireType, t3.data);
          }
          const r2 = o2.writerFactory();
          let a2 = t2.field;
          a2.opt || a2.repeated || "enum" != a2.kind && "scalar" != a2.kind || (a2 = Object.assign(Object.assign({}, t2.field), { opt: true })), t2.runtime.bin.writeField(a2, n2, r2, o2);
          const c2 = s2.readerFactory(r2.finish());
          for (; c2.pos < c2.len; ) {
            const [t3, n3] = c2.tag(), i3 = c2.skip(n3, t3);
            e2.getType().runtime.bin.onUnknownField(e2, t3, n3, i3);
          }
        }
        function G(e2, t2) {
          const n2 = e2.getType();
          return t2.extendee.typeName === n2.typeName && !!n2.runtime.bin.listUnknownFields(e2).find((e3) => e3.no == t2.field.no);
        }
        function z(e2, t2) {
          o(e2.extendee.typeName == t2.getType().typeName, "extension ".concat(e2.typeName, " can only be applied to message ").concat(e2.extendee.typeName));
        }
        function J(e2, t2) {
          const n2 = e2.localName;
          if (e2.repeated) return t2[n2].length > 0;
          if (e2.oneof) return t2[e2.oneof.localName].case === n2;
          switch (e2.kind) {
            case "enum":
            case "scalar":
              return e2.opt || e2.req ? void 0 !== t2[n2] : "enum" == e2.kind ? t2[n2] !== e2.T.values[0].no : !U(e2.T, t2[n2]);
            case "message":
              return void 0 !== t2[n2];
            case "map":
              return Object.keys(t2[n2]).length > 0;
          }
        }
        function Q(e2, t2) {
          const n2 = e2.localName, i2 = !e2.opt && !e2.req;
          if (e2.repeated) t2[n2] = [];
          else if (e2.oneof) t2[e2.oneof.localName] = { case: void 0 };
          else switch (e2.kind) {
            case "map":
              t2[n2] = {};
              break;
            case "enum":
              t2[n2] = i2 ? e2.T.values[0].no : void 0;
              break;
            case "scalar":
              t2[n2] = i2 ? L(e2.T, e2.L) : void 0;
              break;
            case "message":
              t2[n2] = void 0;
          }
        }
        function Y(e2, t2) {
          if (null === e2 || "object" != typeof e2) return false;
          if (!Object.getOwnPropertyNames(y.prototype).every((t3) => t3 in e2 && "function" == typeof e2[t3])) return false;
          const n2 = e2.getType();
          return null !== n2 && "function" == typeof n2 && "typeName" in n2 && "string" == typeof n2.typeName && (void 0 === t2 || n2.typeName == t2.typeName);
        }
        function X(e2, t2) {
          return Y(t2) || !e2.fieldWrapper ? t2 : e2.fieldWrapper.wrapField(t2);
        }
        M.DOUBLE, M.FLOAT, M.INT64, M.UINT64, M.INT32, M.UINT32, M.BOOL, M.STRING, M.BYTES;
        const Z = { ignoreUnknownFields: false }, $ = { emitDefaultValues: false, enumAsInteger: false, useProtoFieldName: false, prettySpaces: 0 };
        function ee(e2) {
          return e2 ? Object.assign(Object.assign({}, Z), e2) : Z;
        }
        function te(e2) {
          return e2 ? Object.assign(Object.assign({}, $), e2) : $;
        }
        const ne = Symbol(), ie = Symbol();
        function se(e2) {
          if (null === e2) return "null";
          switch (typeof e2) {
            case "object":
              return Array.isArray(e2) ? "array" : "object";
            case "string":
              return e2.length > 100 ? "string" : '"'.concat(e2.split('"').join('\\"'), '"');
            default:
              return String(e2);
          }
        }
        function oe(e2, t2, n2, i2, s2) {
          let r2 = n2.localName;
          if (n2.repeated) {
            if (o("map" != n2.kind), null === t2) return;
            if (!Array.isArray(t2)) throw new Error("cannot decode field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(t2)));
            const a2 = e2[r2];
            for (const e3 of t2) {
              if (null === e3) throw new Error("cannot decode field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(e3)));
              switch (n2.kind) {
                case "message":
                  a2.push(n2.T.fromJson(e3, i2));
                  break;
                case "enum":
                  const t3 = ce(n2.T, e3, i2.ignoreUnknownFields, true);
                  t3 !== ie && a2.push(t3);
                  break;
                case "scalar":
                  try {
                    a2.push(ae(n2.T, e3, n2.L, true));
                  } catch (t4) {
                    let i3 = "cannot decode field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(e3));
                    throw t4 instanceof Error && t4.message.length > 0 && (i3 += ": ".concat(t4.message)), new Error(i3);
                  }
              }
            }
          } else if ("map" == n2.kind) {
            if (null === t2) return;
            if ("object" != typeof t2 || Array.isArray(t2)) throw new Error("cannot decode field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(t2)));
            const o2 = e2[r2];
            for (const [e3, r3] of Object.entries(t2)) {
              if (null === r3) throw new Error("cannot decode field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: map value null"));
              let a2;
              try {
                a2 = re(n2.K, e3);
              } catch (e4) {
                let i3 = "cannot decode map key for field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(t2));
                throw e4 instanceof Error && e4.message.length > 0 && (i3 += ": ".concat(e4.message)), new Error(i3);
              }
              switch (n2.V.kind) {
                case "message":
                  o2[a2] = n2.V.T.fromJson(r3, i2);
                  break;
                case "enum":
                  const e4 = ce(n2.V.T, r3, i2.ignoreUnknownFields, true);
                  e4 !== ie && (o2[a2] = e4);
                  break;
                case "scalar":
                  try {
                    o2[a2] = ae(n2.V.T, r3, N.BIGINT, true);
                  } catch (e5) {
                    let i3 = "cannot decode map value for field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(t2));
                    throw e5 instanceof Error && e5.message.length > 0 && (i3 += ": ".concat(e5.message)), new Error(i3);
                  }
              }
            }
          } else switch (n2.oneof && (e2 = e2[n2.oneof.localName] = { case: r2 }, r2 = "value"), n2.kind) {
            case "message":
              const o2 = n2.T;
              if (null === t2 && "google.protobuf.Value" != o2.typeName) return;
              let a2 = e2[r2];
              Y(a2) ? a2.fromJson(t2, i2) : (e2[r2] = a2 = o2.fromJson(t2, i2), o2.fieldWrapper && !n2.oneof && (e2[r2] = o2.fieldWrapper.unwrapField(a2)));
              break;
            case "enum":
              const c2 = ce(n2.T, t2, i2.ignoreUnknownFields, false);
              switch (c2) {
                case ne:
                  Q(n2, e2);
                  break;
                case ie:
                  break;
                default:
                  e2[r2] = c2;
              }
              break;
            case "scalar":
              try {
                const i3 = ae(n2.T, t2, n2.L, false);
                if (i3 === ne) Q(n2, e2);
                else e2[r2] = i3;
              } catch (e3) {
                let i3 = "cannot decode field ".concat(s2.typeName, ".").concat(n2.name, " from JSON: ").concat(se(t2));
                throw e3 instanceof Error && e3.message.length > 0 && (i3 += ": ".concat(e3.message)), new Error(i3);
              }
          }
        }
        function re(e2, t2) {
          if (e2 === M.BOOL) switch (t2) {
            case "true":
              t2 = true;
              break;
            case "false":
              t2 = false;
          }
          return ae(e2, t2, N.BIGINT, true).toString();
        }
        function ae(e2, t2, n2, i2) {
          if (null === t2) return i2 ? L(e2, n2) : ne;
          switch (e2) {
            case M.DOUBLE:
            case M.FLOAT:
              if ("NaN" === t2) return Number.NaN;
              if ("Infinity" === t2) return Number.POSITIVE_INFINITY;
              if ("-Infinity" === t2) return Number.NEGATIVE_INFINITY;
              if ("" === t2) break;
              if ("string" == typeof t2 && t2.trim().length !== t2.length) break;
              if ("string" != typeof t2 && "number" != typeof t2) break;
              const i3 = Number(t2);
              if (Number.isNaN(i3)) break;
              if (!Number.isFinite(i3)) break;
              return e2 == M.FLOAT && p(i3), i3;
            case M.INT32:
            case M.FIXED32:
            case M.SFIXED32:
            case M.SINT32:
            case M.UINT32:
              let s2;
              if ("number" == typeof t2 ? s2 = t2 : "string" == typeof t2 && t2.length > 0 && t2.trim().length === t2.length && (s2 = Number(t2)), void 0 === s2) break;
              return e2 == M.UINT32 || e2 == M.FIXED32 ? h(s2) : u(s2), s2;
            case M.INT64:
            case M.SFIXED64:
            case M.SINT64:
              if ("number" != typeof t2 && "string" != typeof t2) break;
              const o2 = x.parse(t2);
              return n2 ? o2.toString() : o2;
            case M.FIXED64:
            case M.UINT64:
              if ("number" != typeof t2 && "string" != typeof t2) break;
              const r2 = x.uParse(t2);
              return n2 ? r2.toString() : r2;
            case M.BOOL:
              if ("boolean" != typeof t2) break;
              return t2;
            case M.STRING:
              if ("string" != typeof t2) break;
              try {
                encodeURIComponent(t2);
              } catch (e3) {
                throw new Error("invalid UTF8");
              }
              return t2;
            case M.BYTES:
              if ("" === t2) return new Uint8Array(0);
              if ("string" != typeof t2) break;
              return K.dec(t2);
          }
          throw new Error();
        }
        function ce(e2, t2, n2, i2) {
          if (null === t2) return "google.protobuf.NullValue" == e2.typeName ? 0 : i2 ? e2.values[0].no : ne;
          switch (typeof t2) {
            case "number":
              if (Number.isInteger(t2)) return t2;
              break;
            case "string":
              const i3 = e2.findName(t2);
              if (void 0 !== i3) return i3.no;
              if (n2) return ie;
          }
          throw new Error("cannot decode enum ".concat(e2.typeName, " from JSON: ").concat(se(t2)));
        }
        function de(e2) {
          return !(!e2.repeated && "map" != e2.kind) || !e2.oneof && ("message" != e2.kind && (!e2.opt && !e2.req));
        }
        function le(e2, t2, n2) {
          if ("map" == e2.kind) {
            o("object" == typeof t2 && null != t2);
            const i2 = {}, s2 = Object.entries(t2);
            switch (e2.V.kind) {
              case "scalar":
                for (const [t4, n3] of s2) i2[t4.toString()] = he(e2.V.T, n3);
                break;
              case "message":
                for (const [e3, t4] of s2) i2[e3.toString()] = t4.toJson(n2);
                break;
              case "enum":
                const t3 = e2.V.T;
                for (const [e3, o2] of s2) i2[e3.toString()] = ue(t3, o2, n2.enumAsInteger);
            }
            return n2.emitDefaultValues || s2.length > 0 ? i2 : void 0;
          }
          if (e2.repeated) {
            o(Array.isArray(t2));
            const i2 = [];
            switch (e2.kind) {
              case "scalar":
                for (let n3 = 0; n3 < t2.length; n3++) i2.push(he(e2.T, t2[n3]));
                break;
              case "enum":
                for (let s2 = 0; s2 < t2.length; s2++) i2.push(ue(e2.T, t2[s2], n2.enumAsInteger));
                break;
              case "message":
                for (let e3 = 0; e3 < t2.length; e3++) i2.push(t2[e3].toJson(n2));
            }
            return n2.emitDefaultValues || i2.length > 0 ? i2 : void 0;
          }
          switch (e2.kind) {
            case "scalar":
              return he(e2.T, t2);
            case "enum":
              return ue(e2.T, t2, n2.enumAsInteger);
            case "message":
              return X(e2.T, t2).toJson(n2);
          }
        }
        function ue(e2, t2, n2) {
          var i2;
          if (o("number" == typeof t2), "google.protobuf.NullValue" == e2.typeName) return null;
          if (n2) return t2;
          const s2 = e2.findNumber(t2);
          return null !== (i2 = null == s2 ? void 0 : s2.name) && void 0 !== i2 ? i2 : t2;
        }
        function he(e2, t2) {
          switch (e2) {
            case M.INT32:
            case M.SFIXED32:
            case M.SINT32:
            case M.FIXED32:
            case M.UINT32:
              return o("number" == typeof t2), t2;
            case M.FLOAT:
            case M.DOUBLE:
              return o("number" == typeof t2), Number.isNaN(t2) ? "NaN" : t2 === Number.POSITIVE_INFINITY ? "Infinity" : t2 === Number.NEGATIVE_INFINITY ? "-Infinity" : t2;
            case M.STRING:
              return o("string" == typeof t2), t2;
            case M.BOOL:
              return o("boolean" == typeof t2), t2;
            case M.UINT64:
            case M.FIXED64:
            case M.INT64:
            case M.SFIXED64:
            case M.SINT64:
              return o("bigint" == typeof t2 || "string" == typeof t2 || "number" == typeof t2), t2.toString();
            case M.BYTES:
              return o(t2 instanceof Uint8Array), K.enc(t2);
          }
        }
        const pe = Symbol("@bufbuild/protobuf/unknown-fields"), me = { readUnknownFields: true, readerFactory: (e2) => new F(e2) }, ge = { writeUnknownFields: true, writerFactory: () => new j() };
        function ve(e2) {
          return e2 ? Object.assign(Object.assign({}, me), e2) : me;
        }
        function fe(e2) {
          return e2 ? Object.assign(Object.assign({}, ge), e2) : ge;
        }
        function ke(e2, t2, n2, i2, s2) {
          let { repeated: o2, localName: r2 } = n2;
          switch (n2.oneof && ((e2 = e2[n2.oneof.localName]).case != r2 && delete e2.value, e2.case = r2, r2 = "value"), n2.kind) {
            case "scalar":
            case "enum":
              const a2 = "enum" == n2.kind ? M.INT32 : n2.T;
              let c2 = Te;
              if ("scalar" == n2.kind && n2.L > 0 && (c2 = ye), o2) {
                let n3 = e2[r2];
                if (i2 == _.LengthDelimited && a2 != M.STRING && a2 != M.BYTES) {
                  let e3 = t2.uint32() + t2.pos;
                  for (; t2.pos < e3; ) n3.push(c2(t2, a2));
                } else n3.push(c2(t2, a2));
              } else e2[r2] = c2(t2, a2);
              break;
            case "message":
              const d2 = n2.T;
              o2 ? e2[r2].push(be(t2, new d2(), s2, n2)) : Y(e2[r2]) ? be(t2, e2[r2], s2, n2) : (e2[r2] = be(t2, new d2(), s2, n2), !d2.fieldWrapper || n2.oneof || n2.repeated || (e2[r2] = d2.fieldWrapper.unwrapField(e2[r2])));
              break;
            case "map":
              let [l2, u2] = function(e3, t3, n3) {
                const i3 = t3.uint32(), s3 = t3.pos + i3;
                let o3, r3;
                for (; t3.pos < s3; ) {
                  const [i4] = t3.tag();
                  switch (i4) {
                    case 1:
                      o3 = Te(t3, e3.K);
                      break;
                    case 2:
                      switch (e3.V.kind) {
                        case "scalar":
                          r3 = Te(t3, e3.V.T);
                          break;
                        case "enum":
                          r3 = t3.int32();
                          break;
                        case "message":
                          r3 = be(t3, new e3.V.T(), n3, void 0);
                      }
                  }
                }
                void 0 === o3 && (o3 = L(e3.K, N.BIGINT));
                "string" != typeof o3 && "number" != typeof o3 && (o3 = o3.toString());
                if (void 0 === r3) switch (e3.V.kind) {
                  case "scalar":
                    r3 = L(e3.V.T, N.BIGINT);
                    break;
                  case "enum":
                    r3 = e3.V.T.values[0].no;
                    break;
                  case "message":
                    r3 = new e3.V.T();
                }
                return [o3, r3];
              }(n2, t2, s2);
              e2[r2][l2] = u2;
          }
        }
        function be(e2, t2, n2, i2) {
          const s2 = t2.getType().runtime.bin, o2 = null == i2 ? void 0 : i2.delimited;
          return s2.readMessage(t2, e2, o2 ? i2.no : e2.uint32(), n2, o2), t2;
        }
        function ye(e2, t2) {
          const n2 = Te(e2, t2);
          return "bigint" == typeof n2 ? n2.toString() : n2;
        }
        function Te(e2, t2) {
          switch (t2) {
            case M.STRING:
              return e2.string();
            case M.BOOL:
              return e2.bool();
            case M.DOUBLE:
              return e2.double();
            case M.FLOAT:
              return e2.float();
            case M.INT32:
              return e2.int32();
            case M.INT64:
              return e2.int64();
            case M.UINT64:
              return e2.uint64();
            case M.FIXED64:
              return e2.fixed64();
            case M.BYTES:
              return e2.bytes();
            case M.FIXED32:
              return e2.fixed32();
            case M.SFIXED32:
              return e2.sfixed32();
            case M.SFIXED64:
              return e2.sfixed64();
            case M.SINT64:
              return e2.sint64();
            case M.UINT32:
              return e2.uint32();
            case M.SINT32:
              return e2.sint32();
          }
        }
        function Ce(e2, t2, n2, i2) {
          o(void 0 !== t2);
          const s2 = e2.repeated;
          switch (e2.kind) {
            case "scalar":
            case "enum":
              let r2 = "enum" == e2.kind ? M.INT32 : e2.T;
              if (s2) if (o(Array.isArray(t2)), e2.packed) !function(e3, t3, n3, i3) {
                if (!i3.length) return;
                e3.tag(n3, _.LengthDelimited).fork();
                let [, s3] = Pe(t3);
                for (let t4 = 0; t4 < i3.length; t4++) e3[s3](i3[t4]);
                e3.join();
              }(n2, r2, e2.no, t2);
              else for (const i3 of t2) we(n2, r2, e2.no, i3);
              else we(n2, r2, e2.no, t2);
              break;
            case "message":
              if (s2) {
                o(Array.isArray(t2));
                for (const s3 of t2) Ee(n2, i2, e2, s3);
              } else Ee(n2, i2, e2, t2);
              break;
            case "map":
              o("object" == typeof t2 && null != t2);
              for (const [s3, o2] of Object.entries(t2)) Se(n2, i2, e2, s3, o2);
          }
        }
        function Se(e2, t2, n2, i2, s2) {
          e2.tag(n2.no, _.LengthDelimited), e2.fork();
          let r2 = i2;
          switch (n2.K) {
            case M.INT32:
            case M.FIXED32:
            case M.UINT32:
            case M.SFIXED32:
            case M.SINT32:
              r2 = Number.parseInt(i2);
              break;
            case M.BOOL:
              o("true" == i2 || "false" == i2), r2 = "true" == i2;
          }
          switch (we(e2, n2.K, 1, r2), n2.V.kind) {
            case "scalar":
              we(e2, n2.V.T, 2, s2);
              break;
            case "enum":
              we(e2, M.INT32, 2, s2);
              break;
            case "message":
              o(void 0 !== s2), e2.tag(2, _.LengthDelimited).bytes(s2.toBinary(t2));
          }
          e2.join();
        }
        function Ee(e2, t2, n2, i2) {
          const s2 = X(n2.T, i2);
          n2.delimited ? e2.tag(n2.no, _.StartGroup).raw(s2.toBinary(t2)).tag(n2.no, _.EndGroup) : e2.tag(n2.no, _.LengthDelimited).bytes(s2.toBinary(t2));
        }
        function we(e2, t2, n2, i2) {
          o(void 0 !== i2);
          let [s2, r2] = Pe(t2);
          e2.tag(n2, s2)[r2](i2);
        }
        function Pe(e2) {
          let t2 = _.Varint;
          switch (e2) {
            case M.BYTES:
            case M.STRING:
              t2 = _.LengthDelimited;
              break;
            case M.DOUBLE:
            case M.FIXED64:
            case M.SFIXED64:
              t2 = _.Bit64;
              break;
            case M.FIXED32:
            case M.SFIXED32:
            case M.FLOAT:
              t2 = _.Bit32;
          }
          return [t2, M[e2].toLowerCase()];
        }
        function Re(e2) {
          if (void 0 === e2) return e2;
          if (Y(e2)) return e2.clone();
          if (e2 instanceof Uint8Array) {
            const t2 = new Uint8Array(e2.byteLength);
            return t2.set(e2), t2;
          }
          return e2;
        }
        function Ie(e2) {
          return e2 instanceof Uint8Array ? e2 : new Uint8Array(e2);
        }
        class Oe {
          constructor(e2, t2) {
            this._fields = e2, this._normalizer = t2;
          }
          findJsonName(e2) {
            if (!this.jsonNames) {
              const e3 = {};
              for (const t2 of this.list()) e3[t2.jsonName] = e3[t2.name] = t2;
              this.jsonNames = e3;
            }
            return this.jsonNames[e2];
          }
          find(e2) {
            if (!this.numbers) {
              const e3 = {};
              for (const t2 of this.list()) e3[t2.no] = t2;
              this.numbers = e3;
            }
            return this.numbers[e2];
          }
          list() {
            return this.all || (this.all = this._normalizer(this._fields)), this.all;
          }
          byNumber() {
            return this.numbersAsc || (this.numbersAsc = this.list().concat().sort((e2, t2) => e2.no - t2.no)), this.numbersAsc;
          }
          byMember() {
            if (!this.members) {
              this.members = [];
              const e2 = this.members;
              let t2;
              for (const n2 of this.list()) n2.oneof ? n2.oneof !== t2 && (t2 = n2.oneof, e2.push(t2)) : e2.push(n2);
            }
            return this.members;
          }
        }
        function De(e2, t2) {
          const n2 = Me(e2);
          return t2 ? n2 : Ue(Le(n2));
        }
        const xe = Me;
        function Me(e2) {
          let t2 = false;
          const n2 = [];
          for (let i2 = 0; i2 < e2.length; i2++) {
            let s2 = e2.charAt(i2);
            switch (s2) {
              case "_":
                t2 = true;
                break;
              case "0":
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                n2.push(s2), t2 = false;
                break;
              default:
                t2 && (t2 = false, s2 = s2.toUpperCase()), n2.push(s2);
            }
          }
          return n2.join("");
        }
        const Ne = /* @__PURE__ */ new Set(["constructor", "toString", "toJSON", "valueOf"]), _e = /* @__PURE__ */ new Set(["getType", "clone", "equals", "fromBinary", "fromJson", "fromJsonString", "toBinary", "toJson", "toJsonString", "toObject"]), Ae = (e2) => "".concat(e2, "$"), Le = (e2) => _e.has(e2) ? Ae(e2) : e2, Ue = (e2) => Ne.has(e2) ? Ae(e2) : e2;
        class je {
          constructor(e2) {
            this.kind = "oneof", this.repeated = false, this.packed = false, this.opt = false, this.req = false, this.default = void 0, this.fields = [], this.name = e2, this.localName = De(e2, false);
          }
          addField(e2) {
            o(e2.oneof === this, "field ".concat(e2.name, " not one of ").concat(this.name)), this.fields.push(e2);
          }
          findField(e2) {
            if (!this._lookup) {
              this._lookup = /* @__PURE__ */ Object.create(null);
              for (let e3 = 0; e3 < this.fields.length; e3++) this._lookup[this.fields[e3].localName] = this.fields[e3];
            }
            return this._lookup[e2];
          }
        }
        const Fe = (Be = (e2) => new Oe(e2, (e3) => function(e4, t2) {
          var n2, i2, s2, o2, r2, a2;
          const c2 = [];
          let d2;
          for (const t3 of "function" == typeof e4 ? e4() : e4) {
            const e5 = t3;
            if (e5.localName = De(t3.name, void 0 !== t3.oneof), e5.jsonName = null !== (n2 = t3.jsonName) && void 0 !== n2 ? n2 : xe(t3.name), e5.repeated = null !== (i2 = t3.repeated) && void 0 !== i2 && i2, "scalar" == t3.kind && (e5.L = null !== (s2 = t3.L) && void 0 !== s2 ? s2 : N.BIGINT), e5.delimited = null !== (o2 = t3.delimited) && void 0 !== o2 && o2, e5.req = null !== (r2 = t3.req) && void 0 !== r2 && r2, e5.opt = null !== (a2 = t3.opt) && void 0 !== a2 && a2, void 0 === t3.packed && (e5.packed = "enum" == t3.kind || "scalar" == t3.kind && t3.T != M.BYTES && t3.T != M.STRING), void 0 !== t3.oneof) {
              const n3 = "string" == typeof t3.oneof ? t3.oneof : t3.oneof.name;
              d2 && d2.name == n3 || (d2 = new je(n3)), e5.oneof = d2, d2.addField(e5);
            }
            c2.push(e5);
          }
          return c2;
        }(e3)), Ve = (e2) => {
          for (const t2 of e2.getType().fields.byMember()) {
            if (t2.opt) continue;
            const n2 = t2.localName, i2 = e2;
            if (t2.repeated) i2[n2] = [];
            else switch (t2.kind) {
              case "oneof":
                i2[n2] = { case: void 0 };
                break;
              case "enum":
                i2[n2] = 0;
                break;
              case "map":
                i2[n2] = {};
                break;
              case "scalar":
                i2[n2] = L(t2.T, t2.L);
            }
          }
        }, { syntax: "proto3", json: { makeReadOptions: ee, makeWriteOptions: te, readMessage(e2, t2, n2, i2) {
          if (null == t2 || Array.isArray(t2) || "object" != typeof t2) throw new Error("cannot decode message ".concat(e2.typeName, " from JSON: ").concat(se(t2)));
          i2 = null != i2 ? i2 : new e2();
          const s2 = /* @__PURE__ */ new Map(), o2 = n2.typeRegistry;
          for (const [r2, a2] of Object.entries(t2)) {
            const t3 = e2.fields.findJsonName(r2);
            if (t3) {
              if (t3.oneof) {
                if (null === a2 && "scalar" == t3.kind) continue;
                const n3 = s2.get(t3.oneof);
                if (void 0 !== n3) throw new Error("cannot decode message ".concat(e2.typeName, ' from JSON: multiple keys for oneof "').concat(t3.oneof.name, '" present: "').concat(n3, '", "').concat(r2, '"'));
                s2.set(t3.oneof, r2);
              }
              oe(i2, a2, t3, n2, e2);
            } else {
              let t4 = false;
              if ((null == o2 ? void 0 : o2.findExtension) && r2.startsWith("[") && r2.endsWith("]")) {
                const s3 = o2.findExtension(r2.substring(1, r2.length - 1));
                if (s3 && s3.extendee.typeName == e2.typeName) {
                  t4 = true;
                  const [e3, o3] = B(s3);
                  oe(e3, a2, s3.field, n2, s3), H(i2, s3, o3(), n2);
                }
              }
              if (!t4 && !n2.ignoreUnknownFields) throw new Error("cannot decode message ".concat(e2.typeName, ' from JSON: key "').concat(r2, '" is unknown'));
            }
          }
          return i2;
        }, writeMessage(e2, t2) {
          const n2 = e2.getType(), i2 = {};
          let s2;
          try {
            for (s2 of n2.fields.byNumber()) {
              if (!J(s2, e2)) {
                if (s2.req) throw "required field not set";
                if (!t2.emitDefaultValues) continue;
                if (!de(s2)) continue;
              }
              const n3 = le(s2, s2.oneof ? e2[s2.oneof.localName].value : e2[s2.localName], t2);
              void 0 !== n3 && (i2[t2.useProtoFieldName ? s2.name : s2.jsonName] = n3);
            }
            const o2 = t2.typeRegistry;
            if (null == o2 ? void 0 : o2.findExtensionFor) for (const s3 of n2.runtime.bin.listUnknownFields(e2)) {
              const r2 = o2.findExtensionFor(n2.typeName, s3.no);
              if (r2 && G(e2, r2)) {
                const n3 = W(e2, r2, t2), s4 = le(r2.field, n3, t2);
                void 0 !== s4 && (i2[r2.field.jsonName] = s4);
              }
            }
          } catch (e3) {
            const t3 = s2 ? "cannot encode field ".concat(n2.typeName, ".").concat(s2.name, " to JSON") : "cannot encode message ".concat(n2.typeName, " to JSON"), i3 = e3 instanceof Error ? e3.message : String(e3);
            throw new Error(t3 + (i3.length > 0 ? ": ".concat(i3) : ""));
          }
          return i2;
        }, readScalar: (e2, t2, n2) => ae(e2, t2, null != n2 ? n2 : N.BIGINT, true), writeScalar(e2, t2, n2) {
          if (void 0 !== t2) return n2 || U(e2, t2) ? he(e2, t2) : void 0;
        }, debug: se }, bin: { makeReadOptions: ve, makeWriteOptions: fe, listUnknownFields(e2) {
          var t2;
          return null !== (t2 = e2[pe]) && void 0 !== t2 ? t2 : [];
        }, discardUnknownFields(e2) {
          delete e2[pe];
        }, writeUnknownFields(e2, t2) {
          const n2 = e2[pe];
          if (n2) for (const e3 of n2) t2.tag(e3.no, e3.wireType).raw(e3.data);
        }, onUnknownField(e2, t2, n2, i2) {
          const s2 = e2;
          Array.isArray(s2[pe]) || (s2[pe] = []), s2[pe].push({ no: t2, wireType: n2, data: i2 });
        }, readMessage(e2, t2, n2, i2, s2) {
          const o2 = e2.getType(), r2 = s2 ? t2.len : t2.pos + n2;
          let a2, c2;
          for (; t2.pos < r2 && ([a2, c2] = t2.tag(), true !== s2 || c2 != _.EndGroup); ) {
            const n3 = o2.fields.find(a2);
            if (n3) ke(e2, t2, n3, c2, i2);
            else {
              const n4 = t2.skip(c2, a2);
              i2.readUnknownFields && this.onUnknownField(e2, a2, c2, n4);
            }
          }
          if (s2 && (c2 != _.EndGroup || a2 !== n2)) throw new Error("invalid end group tag");
        }, readField: ke, writeMessage(e2, t2, n2) {
          const i2 = e2.getType();
          for (const s2 of i2.fields.byNumber()) if (J(s2, e2)) Ce(s2, s2.oneof ? e2[s2.oneof.localName].value : e2[s2.localName], t2, n2);
          else if (s2.req) throw new Error("cannot encode field ".concat(i2.typeName, ".").concat(s2.name, " to binary: required field not set"));
          return n2.writeUnknownFields && this.writeUnknownFields(e2, t2), t2;
        }, writeField(e2, t2, n2, i2) {
          void 0 !== t2 && Ce(e2, t2, n2, i2);
        } }, util: Object.assign(Object.assign({}, { setEnumType: v, initPartial(e2, t2) {
          if (void 0 === e2) return;
          const n2 = t2.getType();
          for (const i2 of n2.fields.byMember()) {
            const n3 = i2.localName, s2 = t2, o2 = e2;
            if (null != o2[n3]) switch (i2.kind) {
              case "oneof":
                const e3 = o2[n3].case;
                if (void 0 === e3) continue;
                const t3 = i2.findField(e3);
                let r2 = o2[n3].value;
                t3 && "message" == t3.kind && !Y(r2, t3.T) ? r2 = new t3.T(r2) : t3 && "scalar" === t3.kind && t3.T === M.BYTES && (r2 = Ie(r2)), s2[n3] = { case: e3, value: r2 };
                break;
              case "scalar":
              case "enum":
                let a2 = o2[n3];
                i2.T === M.BYTES && (a2 = i2.repeated ? a2.map(Ie) : Ie(a2)), s2[n3] = a2;
                break;
              case "map":
                switch (i2.V.kind) {
                  case "scalar":
                  case "enum":
                    if (i2.V.T === M.BYTES) for (const [e5, t4] of Object.entries(o2[n3])) s2[n3][e5] = Ie(t4);
                    else Object.assign(s2[n3], o2[n3]);
                    break;
                  case "message":
                    const e4 = i2.V.T;
                    for (const t4 of Object.keys(o2[n3])) {
                      let i3 = o2[n3][t4];
                      e4.fieldWrapper || (i3 = new e4(i3)), s2[n3][t4] = i3;
                    }
                }
                break;
              case "message":
                const c2 = i2.T;
                if (i2.repeated) s2[n3] = o2[n3].map((e4) => Y(e4, c2) ? e4 : new c2(e4));
                else {
                  const e4 = o2[n3];
                  c2.fieldWrapper ? "google.protobuf.BytesValue" === c2.typeName ? s2[n3] = Ie(e4) : s2[n3] = e4 : s2[n3] = Y(e4, c2) ? e4 : new c2(e4);
                }
            }
          }
        }, equals: (e2, t2, n2) => t2 === n2 || !(!t2 || !n2) && e2.fields.byMember().every((e3) => {
          const i2 = t2[e3.localName], s2 = n2[e3.localName];
          if (e3.repeated) {
            if (i2.length !== s2.length) return false;
            switch (e3.kind) {
              case "message":
                return i2.every((t3, n3) => e3.T.equals(t3, s2[n3]));
              case "scalar":
                return i2.every((t3, n3) => A(e3.T, t3, s2[n3]));
              case "enum":
                return i2.every((e4, t3) => A(M.INT32, e4, s2[t3]));
            }
            throw new Error("repeated cannot contain ".concat(e3.kind));
          }
          switch (e3.kind) {
            case "message":
              return e3.T.equals(i2, s2);
            case "enum":
              return A(M.INT32, i2, s2);
            case "scalar":
              return A(e3.T, i2, s2);
            case "oneof":
              if (i2.case !== s2.case) return false;
              const t3 = e3.findField(i2.case);
              if (void 0 === t3) return true;
              switch (t3.kind) {
                case "message":
                  return t3.T.equals(i2.value, s2.value);
                case "enum":
                  return A(M.INT32, i2.value, s2.value);
                case "scalar":
                  return A(t3.T, i2.value, s2.value);
              }
              throw new Error("oneof cannot contain ".concat(t3.kind));
            case "map":
              const n3 = Object.keys(i2).concat(Object.keys(s2));
              switch (e3.V.kind) {
                case "message":
                  const t4 = e3.V.T;
                  return n3.every((e4) => t4.equals(i2[e4], s2[e4]));
                case "enum":
                  return n3.every((e4) => A(M.INT32, i2[e4], s2[e4]));
                case "scalar":
                  const o2 = e3.V.T;
                  return n3.every((e4) => A(o2, i2[e4], s2[e4]));
              }
          }
        }), clone(e2) {
          const t2 = e2.getType(), n2 = new t2(), i2 = n2;
          for (const n3 of t2.fields.byMember()) {
            const t3 = e2[n3.localName];
            let s2;
            if (n3.repeated) s2 = t3.map(Re);
            else if ("map" == n3.kind) {
              s2 = i2[n3.localName];
              for (const [e3, n4] of Object.entries(t3)) s2[e3] = Re(n4);
            } else s2 = "oneof" == n3.kind ? n3.findField(t3.case) ? { case: t3.case, value: Re(t3.value) } : { case: void 0 } : Re(t3);
            i2[n3.localName] = s2;
          }
          for (const n3 of t2.runtime.bin.listUnknownFields(e2)) t2.runtime.bin.onUnknownField(i2, n3.no, n3.wireType, n3.data);
          return n2;
        } }), { newFieldList: Be, initFields: Ve }), makeMessageType(e2, t2, n2) {
          return function(e3, t3, n3, i2) {
            var s2;
            const o2 = null !== (s2 = null == i2 ? void 0 : i2.localName) && void 0 !== s2 ? s2 : t3.substring(t3.lastIndexOf(".") + 1), r2 = { [o2]: function(t4) {
              e3.util.initFields(this), e3.util.initPartial(t4, this);
            } }[o2];
            return Object.setPrototypeOf(r2.prototype, new y()), Object.assign(r2, { runtime: e3, typeName: t3, fields: e3.util.newFieldList(n3), fromBinary: (e4, t4) => new r2().fromBinary(e4, t4), fromJson: (e4, t4) => new r2().fromJson(e4, t4), fromJsonString: (e4, t4) => new r2().fromJsonString(e4, t4), equals: (t4, n4) => e3.util.equals(r2, t4, n4) }), r2;
          }(this, e2, t2, n2);
        }, makeEnum: k, makeEnumType: f, getEnumType: g, makeExtension(e2, t2, n2) {
          return /* @__PURE__ */ function(e3, t3, n3, i2) {
            let s2;
            return { typeName: t3, extendee: n3, get field() {
              if (!s2) {
                const n4 = "function" == typeof i2 ? i2() : i2;
                n4.name = t3.split(".").pop(), n4.jsonName = "[".concat(t3, "]"), s2 = e3.util.newFieldList([n4]).list()[0];
              }
              return s2;
            }, runtime: e3 };
          }(this, e2, t2, n2);
        } });
        var Be, Ve;
        class qe extends y {
          constructor(e2) {
            super(), this.seconds = x.zero, this.nanos = 0, Fe.util.initPartial(e2, this);
          }
          fromJson(e2, t2) {
            if ("string" != typeof e2) throw new Error("cannot decode google.protobuf.Timestamp from JSON: ".concat(Fe.json.debug(e2)));
            const n2 = e2.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
            if (!n2) throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
            const i2 = Date.parse(n2[1] + "-" + n2[2] + "-" + n2[3] + "T" + n2[4] + ":" + n2[5] + ":" + n2[6] + (n2[8] ? n2[8] : "Z"));
            if (Number.isNaN(i2)) throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
            if (i2 < Date.parse("0001-01-01T00:00:00Z") || i2 > Date.parse("9999-12-31T23:59:59Z")) throw new Error("cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
            return this.seconds = x.parse(i2 / 1e3), this.nanos = 0, n2[7] && (this.nanos = parseInt("1" + n2[7] + "0".repeat(9 - n2[7].length)) - 1e9), this;
          }
          toJson(e2) {
            const t2 = 1e3 * Number(this.seconds);
            if (t2 < Date.parse("0001-01-01T00:00:00Z") || t2 > Date.parse("9999-12-31T23:59:59Z")) throw new Error("cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
            if (this.nanos < 0) throw new Error("cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative");
            let n2 = "Z";
            if (this.nanos > 0) {
              const e3 = (this.nanos + 1e9).toString().substring(1);
              n2 = "000000" === e3.substring(3) ? "." + e3.substring(0, 3) + "Z" : "000" === e3.substring(6) ? "." + e3.substring(0, 6) + "Z" : "." + e3 + "Z";
            }
            return new Date(t2).toISOString().replace(".000Z", n2);
          }
          toDate() {
            return new Date(1e3 * Number(this.seconds) + Math.ceil(this.nanos / 1e6));
          }
          static now() {
            return qe.fromDate(/* @__PURE__ */ new Date());
          }
          static fromDate(e2) {
            const t2 = e2.getTime();
            return new qe({ seconds: x.parse(Math.floor(t2 / 1e3)), nanos: t2 % 1e3 * 1e6 });
          }
          static fromBinary(e2, t2) {
            return new qe().fromBinary(e2, t2);
          }
          static fromJson(e2, t2) {
            return new qe().fromJson(e2, t2);
          }
          static fromJsonString(e2, t2) {
            return new qe().fromJsonString(e2, t2);
          }
          static equals(e2, t2) {
            return Fe.util.equals(qe, e2, t2);
          }
        }
        qe.runtime = Fe, qe.typeName = "google.protobuf.Timestamp", qe.fields = Fe.util.newFieldList(() => [{ no: 1, name: "seconds", kind: "scalar", T: 3 }, { no: 2, name: "nanos", kind: "scalar", T: 5 }]);
        const Ke = Fe.makeMessageType("livekit.MetricsBatch", () => [{ no: 1, name: "timestamp_ms", kind: "scalar", T: 3 }, { no: 2, name: "normalized_timestamp", kind: "message", T: qe }, { no: 3, name: "str_data", kind: "scalar", T: 9, repeated: true }, { no: 4, name: "time_series", kind: "message", T: We, repeated: true }, { no: 5, name: "events", kind: "message", T: Ge, repeated: true }]), We = Fe.makeMessageType("livekit.TimeSeriesMetric", () => [{ no: 1, name: "label", kind: "scalar", T: 13 }, { no: 2, name: "participant_identity", kind: "scalar", T: 13 }, { no: 3, name: "track_sid", kind: "scalar", T: 13 }, { no: 4, name: "samples", kind: "message", T: He, repeated: true }, { no: 5, name: "rid", kind: "scalar", T: 13 }]), He = Fe.makeMessageType("livekit.MetricSample", () => [{ no: 1, name: "timestamp_ms", kind: "scalar", T: 3 }, { no: 2, name: "normalized_timestamp", kind: "message", T: qe }, { no: 3, name: "value", kind: "scalar", T: 2 }]), Ge = Fe.makeMessageType("livekit.EventMetric", () => [{ no: 1, name: "label", kind: "scalar", T: 13 }, { no: 2, name: "participant_identity", kind: "scalar", T: 13 }, { no: 3, name: "track_sid", kind: "scalar", T: 13 }, { no: 4, name: "start_timestamp_ms", kind: "scalar", T: 3 }, { no: 5, name: "end_timestamp_ms", kind: "scalar", T: 3, opt: true }, { no: 6, name: "normalized_start_timestamp", kind: "message", T: qe }, { no: 7, name: "normalized_end_timestamp", kind: "message", T: qe, opt: true }, { no: 8, name: "metadata", kind: "scalar", T: 9 }, { no: 9, name: "rid", kind: "scalar", T: 13 }]), ze = Fe.makeEnum("livekit.BackupCodecPolicy", [{ no: 0, name: "PREFER_REGRESSION" }, { no: 1, name: "SIMULCAST" }, { no: 2, name: "REGRESSION" }]), Je = Fe.makeEnum("livekit.TrackType", [{ no: 0, name: "AUDIO" }, { no: 1, name: "VIDEO" }, { no: 2, name: "DATA" }]), Qe = Fe.makeEnum("livekit.TrackSource", [{ no: 0, name: "UNKNOWN" }, { no: 1, name: "CAMERA" }, { no: 2, name: "MICROPHONE" }, { no: 3, name: "SCREEN_SHARE" }, { no: 4, name: "SCREEN_SHARE_AUDIO" }]), Ye = Fe.makeEnum("livekit.VideoQuality", [{ no: 0, name: "LOW" }, { no: 1, name: "MEDIUM" }, { no: 2, name: "HIGH" }, { no: 3, name: "OFF" }]), Xe = Fe.makeEnum("livekit.ConnectionQuality", [{ no: 0, name: "POOR" }, { no: 1, name: "GOOD" }, { no: 2, name: "EXCELLENT" }, { no: 3, name: "LOST" }]), Ze = Fe.makeEnum("livekit.ClientConfigSetting", [{ no: 0, name: "UNSET" }, { no: 1, name: "DISABLED" }, { no: 2, name: "ENABLED" }]), $e = Fe.makeEnum("livekit.DisconnectReason", [{ no: 0, name: "UNKNOWN_REASON" }, { no: 1, name: "CLIENT_INITIATED" }, { no: 2, name: "DUPLICATE_IDENTITY" }, { no: 3, name: "SERVER_SHUTDOWN" }, { no: 4, name: "PARTICIPANT_REMOVED" }, { no: 5, name: "ROOM_DELETED" }, { no: 6, name: "STATE_MISMATCH" }, { no: 7, name: "JOIN_FAILURE" }, { no: 8, name: "MIGRATION" }, { no: 9, name: "SIGNAL_CLOSE" }, { no: 10, name: "ROOM_CLOSED" }, { no: 11, name: "USER_UNAVAILABLE" }, { no: 12, name: "USER_REJECTED" }, { no: 13, name: "SIP_TRUNK_FAILURE" }, { no: 14, name: "CONNECTION_TIMEOUT" }]), et = Fe.makeEnum("livekit.ReconnectReason", [{ no: 0, name: "RR_UNKNOWN" }, { no: 1, name: "RR_SIGNAL_DISCONNECTED" }, { no: 2, name: "RR_PUBLISHER_FAILED" }, { no: 3, name: "RR_SUBSCRIBER_FAILED" }, { no: 4, name: "RR_SWITCH_CANDIDATE" }]), tt = Fe.makeEnum("livekit.SubscriptionError", [{ no: 0, name: "SE_UNKNOWN" }, { no: 1, name: "SE_CODEC_UNSUPPORTED" }, { no: 2, name: "SE_TRACK_NOTFOUND" }]), nt = Fe.makeEnum("livekit.AudioTrackFeature", [{ no: 0, name: "TF_STEREO" }, { no: 1, name: "TF_NO_DTX" }, { no: 2, name: "TF_AUTO_GAIN_CONTROL" }, { no: 3, name: "TF_ECHO_CANCELLATION" }, { no: 4, name: "TF_NOISE_SUPPRESSION" }, { no: 5, name: "TF_ENHANCED_NOISE_CANCELLATION" }, { no: 6, name: "TF_PRECONNECT_BUFFER" }]), it = Fe.makeMessageType("livekit.Room", () => [{ no: 1, name: "sid", kind: "scalar", T: 9 }, { no: 2, name: "name", kind: "scalar", T: 9 }, { no: 3, name: "empty_timeout", kind: "scalar", T: 13 }, { no: 14, name: "departure_timeout", kind: "scalar", T: 13 }, { no: 4, name: "max_participants", kind: "scalar", T: 13 }, { no: 5, name: "creation_time", kind: "scalar", T: 3 }, { no: 15, name: "creation_time_ms", kind: "scalar", T: 3 }, { no: 6, name: "turn_password", kind: "scalar", T: 9 }, { no: 7, name: "enabled_codecs", kind: "message", T: st, repeated: true }, { no: 8, name: "metadata", kind: "scalar", T: 9 }, { no: 9, name: "num_participants", kind: "scalar", T: 13 }, { no: 11, name: "num_publishers", kind: "scalar", T: 13 }, { no: 10, name: "active_recording", kind: "scalar", T: 8 }, { no: 13, name: "version", kind: "message", T: At }]), st = Fe.makeMessageType("livekit.Codec", () => [{ no: 1, name: "mime", kind: "scalar", T: 9 }, { no: 2, name: "fmtp_line", kind: "scalar", T: 9 }]), ot = Fe.makeMessageType("livekit.ParticipantPermission", () => [{ no: 1, name: "can_subscribe", kind: "scalar", T: 8 }, { no: 2, name: "can_publish", kind: "scalar", T: 8 }, { no: 3, name: "can_publish_data", kind: "scalar", T: 8 }, { no: 9, name: "can_publish_sources", kind: "enum", T: Fe.getEnumType(Qe), repeated: true }, { no: 7, name: "hidden", kind: "scalar", T: 8 }, { no: 8, name: "recorder", kind: "scalar", T: 8 }, { no: 10, name: "can_update_metadata", kind: "scalar", T: 8 }, { no: 11, name: "agent", kind: "scalar", T: 8 }, { no: 12, name: "can_subscribe_metrics", kind: "scalar", T: 8 }]), rt = Fe.makeMessageType("livekit.ParticipantInfo", () => [{ no: 1, name: "sid", kind: "scalar", T: 9 }, { no: 2, name: "identity", kind: "scalar", T: 9 }, { no: 3, name: "state", kind: "enum", T: Fe.getEnumType(at) }, { no: 4, name: "tracks", kind: "message", T: ht, repeated: true }, { no: 5, name: "metadata", kind: "scalar", T: 9 }, { no: 6, name: "joined_at", kind: "scalar", T: 3 }, { no: 17, name: "joined_at_ms", kind: "scalar", T: 3 }, { no: 9, name: "name", kind: "scalar", T: 9 }, { no: 10, name: "version", kind: "scalar", T: 13 }, { no: 11, name: "permission", kind: "message", T: ot }, { no: 12, name: "region", kind: "scalar", T: 9 }, { no: 13, name: "is_publisher", kind: "scalar", T: 8 }, { no: 14, name: "kind", kind: "enum", T: Fe.getEnumType(ct) }, { no: 15, name: "attributes", kind: "map", K: 9, V: { kind: "scalar", T: 9 } }, { no: 16, name: "disconnect_reason", kind: "enum", T: Fe.getEnumType($e) }, { no: 18, name: "kind_details", kind: "enum", T: Fe.getEnumType(dt), repeated: true }]), at = Fe.makeEnum("livekit.ParticipantInfo.State", [{ no: 0, name: "JOINING" }, { no: 1, name: "JOINED" }, { no: 2, name: "ACTIVE" }, { no: 3, name: "DISCONNECTED" }]), ct = Fe.makeEnum("livekit.ParticipantInfo.Kind", [{ no: 0, name: "STANDARD" }, { no: 1, name: "INGRESS" }, { no: 2, name: "EGRESS" }, { no: 3, name: "SIP" }, { no: 4, name: "AGENT" }]), dt = Fe.makeEnum("livekit.ParticipantInfo.KindDetail", [{ no: 0, name: "CLOUD_AGENT" }, { no: 1, name: "FORWARDED" }]), lt = Fe.makeEnum("livekit.Encryption.Type", [{ no: 0, name: "NONE" }, { no: 1, name: "GCM" }, { no: 2, name: "CUSTOM" }]), ut = Fe.makeMessageType("livekit.SimulcastCodecInfo", () => [{ no: 1, name: "mime_type", kind: "scalar", T: 9 }, { no: 2, name: "mid", kind: "scalar", T: 9 }, { no: 3, name: "cid", kind: "scalar", T: 9 }, { no: 4, name: "layers", kind: "message", T: pt, repeated: true }]), ht = Fe.makeMessageType("livekit.TrackInfo", () => [{ no: 1, name: "sid", kind: "scalar", T: 9 }, { no: 2, name: "type", kind: "enum", T: Fe.getEnumType(Je) }, { no: 3, name: "name", kind: "scalar", T: 9 }, { no: 4, name: "muted", kind: "scalar", T: 8 }, { no: 5, name: "width", kind: "scalar", T: 13 }, { no: 6, name: "height", kind: "scalar", T: 13 }, { no: 7, name: "simulcast", kind: "scalar", T: 8 }, { no: 8, name: "disable_dtx", kind: "scalar", T: 8 }, { no: 9, name: "source", kind: "enum", T: Fe.getEnumType(Qe) }, { no: 10, name: "layers", kind: "message", T: pt, repeated: true }, { no: 11, name: "mime_type", kind: "scalar", T: 9 }, { no: 12, name: "mid", kind: "scalar", T: 9 }, { no: 13, name: "codecs", kind: "message", T: ut, repeated: true }, { no: 14, name: "stereo", kind: "scalar", T: 8 }, { no: 15, name: "disable_red", kind: "scalar", T: 8 }, { no: 16, name: "encryption", kind: "enum", T: Fe.getEnumType(lt) }, { no: 17, name: "stream", kind: "scalar", T: 9 }, { no: 18, name: "version", kind: "message", T: At }, { no: 19, name: "audio_features", kind: "enum", T: Fe.getEnumType(nt), repeated: true }, { no: 20, name: "backup_codec_policy", kind: "enum", T: Fe.getEnumType(ze) }]), pt = Fe.makeMessageType("livekit.VideoLayer", () => [{ no: 1, name: "quality", kind: "enum", T: Fe.getEnumType(Ye) }, { no: 2, name: "width", kind: "scalar", T: 13 }, { no: 3, name: "height", kind: "scalar", T: 13 }, { no: 4, name: "bitrate", kind: "scalar", T: 13 }, { no: 5, name: "ssrc", kind: "scalar", T: 13 }]), mt = Fe.makeMessageType("livekit.DataPacket", () => [{ no: 1, name: "kind", kind: "enum", T: Fe.getEnumType(gt) }, { no: 4, name: "participant_identity", kind: "scalar", T: 9 }, { no: 5, name: "destination_identities", kind: "scalar", T: 9, repeated: true }, { no: 2, name: "user", kind: "message", T: kt, oneof: "value" }, { no: 3, name: "speaker", kind: "message", T: vt, oneof: "value" }, { no: 6, name: "sip_dtmf", kind: "message", T: bt, oneof: "value" }, { no: 7, name: "transcription", kind: "message", T: yt, oneof: "value" }, { no: 8, name: "metrics", kind: "message", T: Ke, oneof: "value" }, { no: 9, name: "chat_message", kind: "message", T: Ct, oneof: "value" }, { no: 10, name: "rpc_request", kind: "message", T: St, oneof: "value" }, { no: 11, name: "rpc_ack", kind: "message", T: Et, oneof: "value" }, { no: 12, name: "rpc_response", kind: "message", T: wt, oneof: "value" }, { no: 13, name: "stream_header", kind: "message", T: Ft, oneof: "value" }, { no: 14, name: "stream_chunk", kind: "message", T: Bt, oneof: "value" }, { no: 15, name: "stream_trailer", kind: "message", T: Vt, oneof: "value" }]), gt = Fe.makeEnum("livekit.DataPacket.Kind", [{ no: 0, name: "RELIABLE" }, { no: 1, name: "LOSSY" }]), vt = Fe.makeMessageType("livekit.ActiveSpeakerUpdate", () => [{ no: 1, name: "speakers", kind: "message", T: ft, repeated: true }]), ft = Fe.makeMessageType("livekit.SpeakerInfo", () => [{ no: 1, name: "sid", kind: "scalar", T: 9 }, { no: 2, name: "level", kind: "scalar", T: 2 }, { no: 3, name: "active", kind: "scalar", T: 8 }]), kt = Fe.makeMessageType("livekit.UserPacket", () => [{ no: 1, name: "participant_sid", kind: "scalar", T: 9 }, { no: 5, name: "participant_identity", kind: "scalar", T: 9 }, { no: 2, name: "payload", kind: "scalar", T: 12 }, { no: 3, name: "destination_sids", kind: "scalar", T: 9, repeated: true }, { no: 6, name: "destination_identities", kind: "scalar", T: 9, repeated: true }, { no: 4, name: "topic", kind: "scalar", T: 9, opt: true }, { no: 8, name: "id", kind: "scalar", T: 9, opt: true }, { no: 9, name: "start_time", kind: "scalar", T: 4, opt: true }, { no: 10, name: "end_time", kind: "scalar", T: 4, opt: true }, { no: 11, name: "nonce", kind: "scalar", T: 12 }]), bt = Fe.makeMessageType("livekit.SipDTMF", () => [{ no: 3, name: "code", kind: "scalar", T: 13 }, { no: 4, name: "digit", kind: "scalar", T: 9 }]), yt = Fe.makeMessageType("livekit.Transcription", () => [{ no: 2, name: "transcribed_participant_identity", kind: "scalar", T: 9 }, { no: 3, name: "track_id", kind: "scalar", T: 9 }, { no: 4, name: "segments", kind: "message", T: Tt, repeated: true }]), Tt = Fe.makeMessageType("livekit.TranscriptionSegment", () => [{ no: 1, name: "id", kind: "scalar", T: 9 }, { no: 2, name: "text", kind: "scalar", T: 9 }, { no: 3, name: "start_time", kind: "scalar", T: 4 }, { no: 4, name: "end_time", kind: "scalar", T: 4 }, { no: 5, name: "final", kind: "scalar", T: 8 }, { no: 6, name: "language", kind: "scalar", T: 9 }]), Ct = Fe.makeMessageType("livekit.ChatMessage", () => [{ no: 1, name: "id", kind: "scalar", T: 9 }, { no: 2, name: "timestamp", kind: "scalar", T: 3 }, { no: 3, name: "edit_timestamp", kind: "scalar", T: 3, opt: true }, { no: 4, name: "message", kind: "scalar", T: 9 }, { no: 5, name: "deleted", kind: "scalar", T: 8 }, { no: 6, name: "generated", kind: "scalar", T: 8 }]), St = Fe.makeMessageType("livekit.RpcRequest", () => [{ no: 1, name: "id", kind: "scalar", T: 9 }, { no: 2, name: "method", kind: "scalar", T: 9 }, { no: 3, name: "payload", kind: "scalar", T: 9 }, { no: 4, name: "response_timeout_ms", kind: "scalar", T: 13 }, { no: 5, name: "version", kind: "scalar", T: 13 }]), Et = Fe.makeMessageType("livekit.RpcAck", () => [{ no: 1, name: "request_id", kind: "scalar", T: 9 }]), wt = Fe.makeMessageType("livekit.RpcResponse", () => [{ no: 1, name: "request_id", kind: "scalar", T: 9 }, { no: 2, name: "payload", kind: "scalar", T: 9, oneof: "value" }, { no: 3, name: "error", kind: "message", T: Pt, oneof: "value" }]), Pt = Fe.makeMessageType("livekit.RpcError", () => [{ no: 1, name: "code", kind: "scalar", T: 13 }, { no: 2, name: "message", kind: "scalar", T: 9 }, { no: 3, name: "data", kind: "scalar", T: 9 }]), Rt = Fe.makeMessageType("livekit.ParticipantTracks", () => [{ no: 1, name: "participant_sid", kind: "scalar", T: 9 }, { no: 2, name: "track_sids", kind: "scalar", T: 9, repeated: true }]), It = Fe.makeMessageType("livekit.ServerInfo", () => [{ no: 1, name: "edition", kind: "enum", T: Fe.getEnumType(Ot) }, { no: 2, name: "version", kind: "scalar", T: 9 }, { no: 3, name: "protocol", kind: "scalar", T: 5 }, { no: 4, name: "region", kind: "scalar", T: 9 }, { no: 5, name: "node_id", kind: "scalar", T: 9 }, { no: 6, name: "debug_info", kind: "scalar", T: 9 }, { no: 7, name: "agent_protocol", kind: "scalar", T: 5 }]), Ot = Fe.makeEnum("livekit.ServerInfo.Edition", [{ no: 0, name: "Standard" }, { no: 1, name: "Cloud" }]), Dt = Fe.makeMessageType("livekit.ClientInfo", () => [{ no: 1, name: "sdk", kind: "enum", T: Fe.getEnumType(xt) }, { no: 2, name: "version", kind: "scalar", T: 9 }, { no: 3, name: "protocol", kind: "scalar", T: 5 }, { no: 4, name: "os", kind: "scalar", T: 9 }, { no: 5, name: "os_version", kind: "scalar", T: 9 }, { no: 6, name: "device_model", kind: "scalar", T: 9 }, { no: 7, name: "browser", kind: "scalar", T: 9 }, { no: 8, name: "browser_version", kind: "scalar", T: 9 }, { no: 9, name: "address", kind: "scalar", T: 9 }, { no: 10, name: "network", kind: "scalar", T: 9 }, { no: 11, name: "other_sdks", kind: "scalar", T: 9 }]), xt = Fe.makeEnum("livekit.ClientInfo.SDK", [{ no: 0, name: "UNKNOWN" }, { no: 1, name: "JS" }, { no: 2, name: "SWIFT" }, { no: 3, name: "ANDROID" }, { no: 4, name: "FLUTTER" }, { no: 5, name: "GO" }, { no: 6, name: "UNITY" }, { no: 7, name: "REACT_NATIVE" }, { no: 8, name: "RUST" }, { no: 9, name: "PYTHON" }, { no: 10, name: "CPP" }, { no: 11, name: "UNITY_WEB" }, { no: 12, name: "NODE" }, { no: 13, name: "UNREAL" }]), Mt = Fe.makeMessageType("livekit.ClientConfiguration", () => [{ no: 1, name: "video", kind: "message", T: Nt }, { no: 2, name: "screen", kind: "message", T: Nt }, { no: 3, name: "resume_connection", kind: "enum", T: Fe.getEnumType(Ze) }, { no: 4, name: "disabled_codecs", kind: "message", T: _t }, { no: 5, name: "force_relay", kind: "enum", T: Fe.getEnumType(Ze) }]), Nt = Fe.makeMessageType("livekit.VideoConfiguration", () => [{ no: 1, name: "hardware_encoder", kind: "enum", T: Fe.getEnumType(Ze) }]), _t = Fe.makeMessageType("livekit.DisabledCodecs", () => [{ no: 1, name: "codecs", kind: "message", T: st, repeated: true }, { no: 2, name: "publish", kind: "message", T: st, repeated: true }]), At = Fe.makeMessageType("livekit.TimedVersion", () => [{ no: 1, name: "unix_micro", kind: "scalar", T: 3 }, { no: 2, name: "ticks", kind: "scalar", T: 5 }]), Lt = Fe.makeEnum("livekit.DataStream.OperationType", [{ no: 0, name: "CREATE" }, { no: 1, name: "UPDATE" }, { no: 2, name: "DELETE" }, { no: 3, name: "REACTION" }]), Ut = Fe.makeMessageType("livekit.DataStream.TextHeader", () => [{ no: 1, name: "operation_type", kind: "enum", T: Fe.getEnumType(Lt) }, { no: 2, name: "version", kind: "scalar", T: 5 }, { no: 3, name: "reply_to_stream_id", kind: "scalar", T: 9 }, { no: 4, name: "attached_stream_ids", kind: "scalar", T: 9, repeated: true }, { no: 5, name: "generated", kind: "scalar", T: 8 }], { localName: "DataStream_TextHeader" }), jt = Fe.makeMessageType("livekit.DataStream.ByteHeader", () => [{ no: 1, name: "name", kind: "scalar", T: 9 }], { localName: "DataStream_ByteHeader" }), Ft = Fe.makeMessageType("livekit.DataStream.Header", () => [{ no: 1, name: "stream_id", kind: "scalar", T: 9 }, { no: 2, name: "timestamp", kind: "scalar", T: 3 }, { no: 3, name: "topic", kind: "scalar", T: 9 }, { no: 4, name: "mime_type", kind: "scalar", T: 9 }, { no: 5, name: "total_length", kind: "scalar", T: 4, opt: true }, { no: 7, name: "encryption_type", kind: "enum", T: Fe.getEnumType(lt) }, { no: 8, name: "attributes", kind: "map", K: 9, V: { kind: "scalar", T: 9 } }, { no: 9, name: "text_header", kind: "message", T: Ut, oneof: "content_header" }, { no: 10, name: "byte_header", kind: "message", T: jt, oneof: "content_header" }], { localName: "DataStream_Header" }), Bt = Fe.makeMessageType("livekit.DataStream.Chunk", () => [{ no: 1, name: "stream_id", kind: "scalar", T: 9 }, { no: 2, name: "chunk_index", kind: "scalar", T: 4 }, { no: 3, name: "content", kind: "scalar", T: 12 }, { no: 4, name: "version", kind: "scalar", T: 5 }, { no: 5, name: "iv", kind: "scalar", T: 12, opt: true }], { localName: "DataStream_Chunk" }), Vt = Fe.makeMessageType("livekit.DataStream.Trailer", () => [{ no: 1, name: "stream_id", kind: "scalar", T: 9 }, { no: 2, name: "reason", kind: "scalar", T: 9 }, { no: 3, name: "attributes", kind: "map", K: 9, V: { kind: "scalar", T: 9 } }], { localName: "DataStream_Trailer" }), qt = Fe.makeEnum("livekit.SignalTarget", [{ no: 0, name: "PUBLISHER" }, { no: 1, name: "SUBSCRIBER" }]), Kt = Fe.makeEnum("livekit.StreamState", [{ no: 0, name: "ACTIVE" }, { no: 1, name: "PAUSED" }]), Wt = Fe.makeEnum("livekit.CandidateProtocol", [{ no: 0, name: "UDP" }, { no: 1, name: "TCP" }, { no: 2, name: "TLS" }]), Ht = Fe.makeMessageType("livekit.SignalRequest", () => [{ no: 1, name: "offer", kind: "message", T: tn, oneof: "message" }, { no: 2, name: "answer", kind: "message", T: tn, oneof: "message" }, { no: 3, name: "trickle", kind: "message", T: Qt, oneof: "message" }, { no: 4, name: "add_track", kind: "message", T: Jt, oneof: "message" }, { no: 5, name: "mute", kind: "message", T: Yt, oneof: "message" }, { no: 6, name: "subscription", kind: "message", T: sn, oneof: "message" }, { no: 7, name: "track_setting", kind: "message", T: on, oneof: "message" }, { no: 8, name: "leave", kind: "message", T: cn, oneof: "message" }, { no: 10, name: "update_layers", kind: "message", T: ln, oneof: "message" }, { no: 11, name: "subscription_permission", kind: "message", T: Sn, oneof: "message" }, { no: 12, name: "sync_state", kind: "message", T: Pn, oneof: "message" }, { no: 13, name: "simulate", kind: "message", T: In, oneof: "message" }, { no: 14, name: "ping", kind: "scalar", T: 3, oneof: "message" }, { no: 15, name: "update_metadata", kind: "message", T: un, oneof: "message" }, { no: 16, name: "ping_req", kind: "message", T: On, oneof: "message" }, { no: 17, name: "update_audio_track", kind: "message", T: rn, oneof: "message" }, { no: 18, name: "update_video_track", kind: "message", T: an, oneof: "message" }]), Gt = Fe.makeMessageType("livekit.SignalResponse", () => [{ no: 1, name: "join", kind: "message", T: Xt, oneof: "message" }, { no: 2, name: "answer", kind: "message", T: tn, oneof: "message" }, { no: 3, name: "offer", kind: "message", T: tn, oneof: "message" }, { no: 4, name: "trickle", kind: "message", T: Qt, oneof: "message" }, { no: 5, name: "update", kind: "message", T: nn, oneof: "message" }, { no: 6, name: "track_published", kind: "message", T: $t, oneof: "message" }, { no: 8, name: "leave", kind: "message", T: cn, oneof: "message" }, { no: 9, name: "mute", kind: "message", T: Yt, oneof: "message" }, { no: 10, name: "speakers_changed", kind: "message", T: pn, oneof: "message" }, { no: 11, name: "room_update", kind: "message", T: mn, oneof: "message" }, { no: 12, name: "connection_quality", kind: "message", T: vn, oneof: "message" }, { no: 13, name: "stream_state_update", kind: "message", T: kn, oneof: "message" }, { no: 14, name: "subscribed_quality_update", kind: "message", T: Tn, oneof: "message" }, { no: 15, name: "subscription_permission_update", kind: "message", T: En, oneof: "message" }, { no: 16, name: "refresh_token", kind: "scalar", T: 9, oneof: "message" }, { no: 17, name: "track_unpublished", kind: "message", T: en, oneof: "message" }, { no: 18, name: "pong", kind: "scalar", T: 3, oneof: "message" }, { no: 19, name: "reconnect", kind: "message", T: Zt, oneof: "message" }, { no: 20, name: "pong_resp", kind: "message", T: Dn, oneof: "message" }, { no: 21, name: "subscription_response", kind: "message", T: Nn, oneof: "message" }, { no: 22, name: "request_response", kind: "message", T: _n, oneof: "message" }, { no: 23, name: "track_subscribed", kind: "message", T: Ln, oneof: "message" }, { no: 24, name: "room_moved", kind: "message", T: wn, oneof: "message" }]), zt = Fe.makeMessageType("livekit.SimulcastCodec", () => [{ no: 1, name: "codec", kind: "scalar", T: 9 }, { no: 2, name: "cid", kind: "scalar", T: 9 }]), Jt = Fe.makeMessageType("livekit.AddTrackRequest", () => [{ no: 1, name: "cid", kind: "scalar", T: 9 }, { no: 2, name: "name", kind: "scalar", T: 9 }, { no: 3, name: "type", kind: "enum", T: Fe.getEnumType(Je) }, { no: 4, name: "width", kind: "scalar", T: 13 }, { no: 5, name: "height", kind: "scalar", T: 13 }, { no: 6, name: "muted", kind: "scalar", T: 8 }, { no: 7, name: "disable_dtx", kind: "scalar", T: 8 }, { no: 8, name: "source", kind: "enum", T: Fe.getEnumType(Qe) }, { no: 9, name: "layers", kind: "message", T: pt, repeated: true }, { no: 10, name: "simulcast_codecs", kind: "message", T: zt, repeated: true }, { no: 11, name: "sid", kind: "scalar", T: 9 }, { no: 12, name: "stereo", kind: "scalar", T: 8 }, { no: 13, name: "disable_red", kind: "scalar", T: 8 }, { no: 14, name: "encryption", kind: "enum", T: Fe.getEnumType(lt) }, { no: 15, name: "stream", kind: "scalar", T: 9 }, { no: 16, name: "backup_codec_policy", kind: "enum", T: Fe.getEnumType(ze) }, { no: 17, name: "audio_features", kind: "enum", T: Fe.getEnumType(nt), repeated: true }]), Qt = Fe.makeMessageType("livekit.TrickleRequest", () => [{ no: 1, name: "candidateInit", kind: "scalar", T: 9 }, { no: 2, name: "target", kind: "enum", T: Fe.getEnumType(qt) }, { no: 3, name: "final", kind: "scalar", T: 8 }]), Yt = Fe.makeMessageType("livekit.MuteTrackRequest", () => [{ no: 1, name: "sid", kind: "scalar", T: 9 }, { no: 2, name: "muted", kind: "scalar", T: 8 }]), Xt = Fe.makeMessageType("livekit.JoinResponse", () => [{ no: 1, name: "room", kind: "message", T: it }, { no: 2, name: "participant", kind: "message", T: rt }, { no: 3, name: "other_participants", kind: "message", T: rt, repeated: true }, { no: 4, name: "server_version", kind: "scalar", T: 9 }, { no: 5, name: "ice_servers", kind: "message", T: hn, repeated: true }, { no: 6, name: "subscriber_primary", kind: "scalar", T: 8 }, { no: 7, name: "alternative_url", kind: "scalar", T: 9 }, { no: 8, name: "client_configuration", kind: "message", T: Mt }, { no: 9, name: "server_region", kind: "scalar", T: 9 }, { no: 10, name: "ping_timeout", kind: "scalar", T: 5 }, { no: 11, name: "ping_interval", kind: "scalar", T: 5 }, { no: 12, name: "server_info", kind: "message", T: It }, { no: 13, name: "sif_trailer", kind: "scalar", T: 12 }, { no: 14, name: "enabled_publish_codecs", kind: "message", T: st, repeated: true }, { no: 15, name: "fast_publish", kind: "scalar", T: 8 }]), Zt = Fe.makeMessageType("livekit.ReconnectResponse", () => [{ no: 1, name: "ice_servers", kind: "message", T: hn, repeated: true }, { no: 2, name: "client_configuration", kind: "message", T: Mt }]), $t = Fe.makeMessageType("livekit.TrackPublishedResponse", () => [{ no: 1, name: "cid", kind: "scalar", T: 9 }, { no: 2, name: "track", kind: "message", T: ht }]), en = Fe.makeMessageType("livekit.TrackUnpublishedResponse", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }]), tn = Fe.makeMessageType("livekit.SessionDescription", () => [{ no: 1, name: "type", kind: "scalar", T: 9 }, { no: 2, name: "sdp", kind: "scalar", T: 9 }]), nn = Fe.makeMessageType("livekit.ParticipantUpdate", () => [{ no: 1, name: "participants", kind: "message", T: rt, repeated: true }]), sn = Fe.makeMessageType("livekit.UpdateSubscription", () => [{ no: 1, name: "track_sids", kind: "scalar", T: 9, repeated: true }, { no: 2, name: "subscribe", kind: "scalar", T: 8 }, { no: 3, name: "participant_tracks", kind: "message", T: Rt, repeated: true }]), on = Fe.makeMessageType("livekit.UpdateTrackSettings", () => [{ no: 1, name: "track_sids", kind: "scalar", T: 9, repeated: true }, { no: 3, name: "disabled", kind: "scalar", T: 8 }, { no: 4, name: "quality", kind: "enum", T: Fe.getEnumType(Ye) }, { no: 5, name: "width", kind: "scalar", T: 13 }, { no: 6, name: "height", kind: "scalar", T: 13 }, { no: 7, name: "fps", kind: "scalar", T: 13 }, { no: 8, name: "priority", kind: "scalar", T: 13 }]), rn = Fe.makeMessageType("livekit.UpdateLocalAudioTrack", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }, { no: 2, name: "features", kind: "enum", T: Fe.getEnumType(nt), repeated: true }]), an = Fe.makeMessageType("livekit.UpdateLocalVideoTrack", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }, { no: 2, name: "width", kind: "scalar", T: 13 }, { no: 3, name: "height", kind: "scalar", T: 13 }]), cn = Fe.makeMessageType("livekit.LeaveRequest", () => [{ no: 1, name: "can_reconnect", kind: "scalar", T: 8 }, { no: 2, name: "reason", kind: "enum", T: Fe.getEnumType($e) }, { no: 3, name: "action", kind: "enum", T: Fe.getEnumType(dn) }, { no: 4, name: "regions", kind: "message", T: xn }]), dn = Fe.makeEnum("livekit.LeaveRequest.Action", [{ no: 0, name: "DISCONNECT" }, { no: 1, name: "RESUME" }, { no: 2, name: "RECONNECT" }]), ln = Fe.makeMessageType("livekit.UpdateVideoLayers", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }, { no: 2, name: "layers", kind: "message", T: pt, repeated: true }]), un = Fe.makeMessageType("livekit.UpdateParticipantMetadata", () => [{ no: 1, name: "metadata", kind: "scalar", T: 9 }, { no: 2, name: "name", kind: "scalar", T: 9 }, { no: 3, name: "attributes", kind: "map", K: 9, V: { kind: "scalar", T: 9 } }, { no: 4, name: "request_id", kind: "scalar", T: 13 }]), hn = Fe.makeMessageType("livekit.ICEServer", () => [{ no: 1, name: "urls", kind: "scalar", T: 9, repeated: true }, { no: 2, name: "username", kind: "scalar", T: 9 }, { no: 3, name: "credential", kind: "scalar", T: 9 }]), pn = Fe.makeMessageType("livekit.SpeakersChanged", () => [{ no: 1, name: "speakers", kind: "message", T: ft, repeated: true }]), mn = Fe.makeMessageType("livekit.RoomUpdate", () => [{ no: 1, name: "room", kind: "message", T: it }]), gn = Fe.makeMessageType("livekit.ConnectionQualityInfo", () => [{ no: 1, name: "participant_sid", kind: "scalar", T: 9 }, { no: 2, name: "quality", kind: "enum", T: Fe.getEnumType(Xe) }, { no: 3, name: "score", kind: "scalar", T: 2 }]), vn = Fe.makeMessageType("livekit.ConnectionQualityUpdate", () => [{ no: 1, name: "updates", kind: "message", T: gn, repeated: true }]), fn = Fe.makeMessageType("livekit.StreamStateInfo", () => [{ no: 1, name: "participant_sid", kind: "scalar", T: 9 }, { no: 2, name: "track_sid", kind: "scalar", T: 9 }, { no: 3, name: "state", kind: "enum", T: Fe.getEnumType(Kt) }]), kn = Fe.makeMessageType("livekit.StreamStateUpdate", () => [{ no: 1, name: "stream_states", kind: "message", T: fn, repeated: true }]), bn = Fe.makeMessageType("livekit.SubscribedQuality", () => [{ no: 1, name: "quality", kind: "enum", T: Fe.getEnumType(Ye) }, { no: 2, name: "enabled", kind: "scalar", T: 8 }]), yn = Fe.makeMessageType("livekit.SubscribedCodec", () => [{ no: 1, name: "codec", kind: "scalar", T: 9 }, { no: 2, name: "qualities", kind: "message", T: bn, repeated: true }]), Tn = Fe.makeMessageType("livekit.SubscribedQualityUpdate", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }, { no: 2, name: "subscribed_qualities", kind: "message", T: bn, repeated: true }, { no: 3, name: "subscribed_codecs", kind: "message", T: yn, repeated: true }]), Cn = Fe.makeMessageType("livekit.TrackPermission", () => [{ no: 1, name: "participant_sid", kind: "scalar", T: 9 }, { no: 2, name: "all_tracks", kind: "scalar", T: 8 }, { no: 3, name: "track_sids", kind: "scalar", T: 9, repeated: true }, { no: 4, name: "participant_identity", kind: "scalar", T: 9 }]), Sn = Fe.makeMessageType("livekit.SubscriptionPermission", () => [{ no: 1, name: "all_participants", kind: "scalar", T: 8 }, { no: 2, name: "track_permissions", kind: "message", T: Cn, repeated: true }]), En = Fe.makeMessageType("livekit.SubscriptionPermissionUpdate", () => [{ no: 1, name: "participant_sid", kind: "scalar", T: 9 }, { no: 2, name: "track_sid", kind: "scalar", T: 9 }, { no: 3, name: "allowed", kind: "scalar", T: 8 }]), wn = Fe.makeMessageType("livekit.RoomMovedResponse", () => [{ no: 1, name: "room", kind: "message", T: it }, { no: 2, name: "token", kind: "scalar", T: 9 }, { no: 3, name: "participant", kind: "message", T: rt }, { no: 4, name: "other_participants", kind: "message", T: rt, repeated: true }]), Pn = Fe.makeMessageType("livekit.SyncState", () => [{ no: 1, name: "answer", kind: "message", T: tn }, { no: 2, name: "subscription", kind: "message", T: sn }, { no: 3, name: "publish_tracks", kind: "message", T: $t, repeated: true }, { no: 4, name: "data_channels", kind: "message", T: Rn, repeated: true }, { no: 5, name: "offer", kind: "message", T: tn }, { no: 6, name: "track_sids_disabled", kind: "scalar", T: 9, repeated: true }]), Rn = Fe.makeMessageType("livekit.DataChannelInfo", () => [{ no: 1, name: "label", kind: "scalar", T: 9 }, { no: 2, name: "id", kind: "scalar", T: 13 }, { no: 3, name: "target", kind: "enum", T: Fe.getEnumType(qt) }]), In = Fe.makeMessageType("livekit.SimulateScenario", () => [{ no: 1, name: "speaker_update", kind: "scalar", T: 5, oneof: "scenario" }, { no: 2, name: "node_failure", kind: "scalar", T: 8, oneof: "scenario" }, { no: 3, name: "migration", kind: "scalar", T: 8, oneof: "scenario" }, { no: 4, name: "server_leave", kind: "scalar", T: 8, oneof: "scenario" }, { no: 5, name: "switch_candidate_protocol", kind: "enum", T: Fe.getEnumType(Wt), oneof: "scenario" }, { no: 6, name: "subscriber_bandwidth", kind: "scalar", T: 3, oneof: "scenario" }, { no: 7, name: "disconnect_signal_on_resume", kind: "scalar", T: 8, oneof: "scenario" }, { no: 8, name: "disconnect_signal_on_resume_no_messages", kind: "scalar", T: 8, oneof: "scenario" }, { no: 9, name: "leave_request_full_reconnect", kind: "scalar", T: 8, oneof: "scenario" }]), On = Fe.makeMessageType("livekit.Ping", () => [{ no: 1, name: "timestamp", kind: "scalar", T: 3 }, { no: 2, name: "rtt", kind: "scalar", T: 3 }]), Dn = Fe.makeMessageType("livekit.Pong", () => [{ no: 1, name: "last_ping_timestamp", kind: "scalar", T: 3 }, { no: 2, name: "timestamp", kind: "scalar", T: 3 }]), xn = Fe.makeMessageType("livekit.RegionSettings", () => [{ no: 1, name: "regions", kind: "message", T: Mn, repeated: true }]), Mn = Fe.makeMessageType("livekit.RegionInfo", () => [{ no: 1, name: "region", kind: "scalar", T: 9 }, { no: 2, name: "url", kind: "scalar", T: 9 }, { no: 3, name: "distance", kind: "scalar", T: 3 }]), Nn = Fe.makeMessageType("livekit.SubscriptionResponse", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }, { no: 2, name: "err", kind: "enum", T: Fe.getEnumType(tt) }]), _n = Fe.makeMessageType("livekit.RequestResponse", () => [{ no: 1, name: "request_id", kind: "scalar", T: 13 }, { no: 2, name: "reason", kind: "enum", T: Fe.getEnumType(An) }, { no: 3, name: "message", kind: "scalar", T: 9 }]), An = Fe.makeEnum("livekit.RequestResponse.Reason", [{ no: 0, name: "OK" }, { no: 1, name: "NOT_FOUND" }, { no: 2, name: "NOT_ALLOWED" }, { no: 3, name: "LIMIT_EXCEEDED" }]), Ln = Fe.makeMessageType("livekit.TrackSubscribed", () => [{ no: 1, name: "track_sid", kind: "scalar", T: 9 }]);
        function Un(e2) {
          return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
        }
        var jn, Fn = { exports: {} }, Bn = Fn.exports;
        var Vn, qn, Kn = (jn || (jn = 1, function(e2) {
          var t2, n2;
          t2 = Bn, n2 = function() {
            var e3 = function() {
            }, t3 = "undefined", n3 = typeof window !== t3 && typeof window.navigator !== t3 && /Trident\/|MSIE /.test(window.navigator.userAgent), i2 = ["trace", "debug", "info", "warn", "error"], s2 = {}, o2 = null;
            function r2(e4, t4) {
              var n4 = e4[t4];
              if ("function" == typeof n4.bind) return n4.bind(e4);
              try {
                return Function.prototype.bind.call(n4, e4);
              } catch (t5) {
                return function() {
                  return Function.prototype.apply.apply(n4, [e4, arguments]);
                };
              }
            }
            function a2() {
              console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
            }
            function c2() {
              for (var n4 = this.getLevel(), s3 = 0; s3 < i2.length; s3++) {
                var o3 = i2[s3];
                this[o3] = s3 < n4 ? e3 : this.methodFactory(o3, n4, this.name);
              }
              if (this.log = this.debug, typeof console === t3 && n4 < this.levels.SILENT) return "No console available for logging";
            }
            function d2(e4) {
              return function() {
                typeof console !== t3 && (c2.call(this), this[e4].apply(this, arguments));
              };
            }
            function l2(i3, s3, o3) {
              return function(i4) {
                return "debug" === i4 && (i4 = "log"), typeof console !== t3 && ("trace" === i4 && n3 ? a2 : void 0 !== console[i4] ? r2(console, i4) : void 0 !== console.log ? r2(console, "log") : e3);
              }(i3) || d2.apply(this, arguments);
            }
            function u2(e4, n4) {
              var r3, a3, d3, u3 = this, h3 = "loglevel";
              function p2() {
                var e5;
                if (typeof window !== t3 && h3) {
                  try {
                    e5 = window.localStorage[h3];
                  } catch (e6) {
                  }
                  if (typeof e5 === t3) try {
                    var n5 = window.document.cookie, i3 = encodeURIComponent(h3), s3 = n5.indexOf(i3 + "=");
                    -1 !== s3 && (e5 = /^([^;]+)/.exec(n5.slice(s3 + i3.length + 1))[1]);
                  } catch (e6) {
                  }
                  return void 0 === u3.levels[e5] && (e5 = void 0), e5;
                }
              }
              function m2(e5) {
                var t4 = e5;
                if ("string" == typeof t4 && void 0 !== u3.levels[t4.toUpperCase()] && (t4 = u3.levels[t4.toUpperCase()]), "number" == typeof t4 && t4 >= 0 && t4 <= u3.levels.SILENT) return t4;
                throw new TypeError("log.setLevel() called with invalid level: " + e5);
              }
              "string" == typeof e4 ? h3 += ":" + e4 : "symbol" == typeof e4 && (h3 = void 0), u3.name = e4, u3.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, u3.methodFactory = n4 || l2, u3.getLevel = function() {
                return null != d3 ? d3 : null != a3 ? a3 : r3;
              }, u3.setLevel = function(e5, n5) {
                return d3 = m2(e5), false !== n5 && function(e6) {
                  var n6 = (i2[e6] || "silent").toUpperCase();
                  if (typeof window !== t3 && h3) {
                    try {
                      return void (window.localStorage[h3] = n6);
                    } catch (e7) {
                    }
                    try {
                      window.document.cookie = encodeURIComponent(h3) + "=" + n6 + ";";
                    } catch (e7) {
                    }
                  }
                }(d3), c2.call(u3);
              }, u3.setDefaultLevel = function(e5) {
                a3 = m2(e5), p2() || u3.setLevel(e5, false);
              }, u3.resetLevel = function() {
                d3 = null, function() {
                  if (typeof window !== t3 && h3) {
                    try {
                      window.localStorage.removeItem(h3);
                    } catch (e5) {
                    }
                    try {
                      window.document.cookie = encodeURIComponent(h3) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                    } catch (e5) {
                    }
                  }
                }(), c2.call(u3);
              }, u3.enableAll = function(e5) {
                u3.setLevel(u3.levels.TRACE, e5);
              }, u3.disableAll = function(e5) {
                u3.setLevel(u3.levels.SILENT, e5);
              }, u3.rebuild = function() {
                if (o2 !== u3 && (r3 = m2(o2.getLevel())), c2.call(u3), o2 === u3) for (var e5 in s2) s2[e5].rebuild();
              }, r3 = m2(o2 ? o2.getLevel() : "WARN");
              var g2 = p2();
              null != g2 && (d3 = m2(g2)), c2.call(u3);
            }
            (o2 = new u2()).getLogger = function(e4) {
              if ("symbol" != typeof e4 && "string" != typeof e4 || "" === e4) throw new TypeError("You must supply a name when creating a logger.");
              var t4 = s2[e4];
              return t4 || (t4 = s2[e4] = new u2(e4, o2.methodFactory)), t4;
            };
            var h2 = typeof window !== t3 ? window.log : void 0;
            return o2.noConflict = function() {
              return typeof window !== t3 && window.log === o2 && (window.log = h2), o2;
            }, o2.getLoggers = function() {
              return s2;
            }, o2.default = o2, o2;
          }, e2.exports ? e2.exports = n2() : t2.log = n2();
        }(Fn)), Fn.exports);
        e.LogLevel = void 0, (Vn = e.LogLevel || (e.LogLevel = {}))[Vn.trace = 0] = "trace", Vn[Vn.debug = 1] = "debug", Vn[Vn.info = 2] = "info", Vn[Vn.warn = 3] = "warn", Vn[Vn.error = 4] = "error", Vn[Vn.silent = 5] = "silent", e.LoggerNames = void 0, (qn = e.LoggerNames || (e.LoggerNames = {})).Default = "livekit", qn.Room = "livekit-room", qn.Participant = "livekit-participant", qn.Track = "livekit-track", qn.Publication = "livekit-track-publication", qn.Engine = "livekit-engine", qn.Signal = "livekit-signal", qn.PCManager = "livekit-pc-manager", qn.PCTransport = "livekit-pc-transport", qn.E2EE = "lk-e2ee";
        let Wn = Kn.getLogger("livekit");
        const Hn = Object.values(e.LoggerNames).map((e2) => Kn.getLogger(e2));
        function Gn(e2) {
          const t2 = Kn.getLogger(e2);
          return t2.setDefaultLevel(Wn.getLevel()), t2;
        }
        Wn.setDefaultLevel(e.LogLevel.info);
        const zn = Kn.getLogger("lk-e2ee"), Jn = 7e3, Qn = [0, 300, 1200, 2700, 4800, Jn, Jn, Jn, Jn, Jn];
        class Yn {
          constructor(e2) {
            this._retryDelays = void 0 !== e2 ? [...e2] : Qn;
          }
          nextRetryDelayInMs(e2) {
            if (e2.retryCount >= this._retryDelays.length) return null;
            const t2 = this._retryDelays[e2.retryCount];
            return e2.retryCount <= 1 ? t2 : t2 + 1e3 * Math.random();
          }
        }
        function Xn(e2, t2, n2, i2) {
          return new (n2 || (n2 = Promise))(function(s2, o2) {
            function r2(e3) {
              try {
                c2(i2.next(e3));
              } catch (e4) {
                o2(e4);
              }
            }
            function a2(e3) {
              try {
                c2(i2.throw(e3));
              } catch (e4) {
                o2(e4);
              }
            }
            function c2(e3) {
              var t3;
              e3.done ? s2(e3.value) : (t3 = e3.value, t3 instanceof n2 ? t3 : new n2(function(e4) {
                e4(t3);
              })).then(r2, a2);
            }
            c2((i2 = i2.apply(e2, t2 || [])).next());
          });
        }
        function Zn(e2) {
          var t2 = "function" == typeof Symbol && Symbol.iterator, n2 = t2 && e2[t2], i2 = 0;
          if (n2) return n2.call(e2);
          if (e2 && "number" == typeof e2.length) return { next: function() {
            return e2 && i2 >= e2.length && (e2 = void 0), { value: e2 && e2[i2++], done: !e2 };
          } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }
        function $n(e2) {
          if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
          var t2, n2 = e2[Symbol.asyncIterator];
          return n2 ? n2.call(e2) : (e2 = Zn(e2), t2 = {}, i2("next"), i2("throw"), i2("return"), t2[Symbol.asyncIterator] = function() {
            return this;
          }, t2);
          function i2(n3) {
            t2[n3] = e2[n3] && function(t3) {
              return new Promise(function(i3, s2) {
                (function(e3, t4, n4, i4) {
                  Promise.resolve(i4).then(function(t5) {
                    e3({ value: t5, done: n4 });
                  }, t4);
                })(i3, s2, (t3 = e2[n3](t3)).done, t3.value);
              });
            };
          }
        }
        "function" == typeof SuppressedError && SuppressedError;
        var ei, ti = { exports: {} };
        var ni = function() {
          if (ei) return ti.exports;
          ei = 1;
          var e2, t2 = "object" == typeof Reflect ? Reflect : null, n2 = t2 && "function" == typeof t2.apply ? t2.apply : function(e3, t3, n3) {
            return Function.prototype.apply.call(e3, t3, n3);
          };
          e2 = t2 && "function" == typeof t2.ownKeys ? t2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
            return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
          } : function(e3) {
            return Object.getOwnPropertyNames(e3);
          };
          var i2 = Number.isNaN || function(e3) {
            return e3 != e3;
          };
          function s2() {
            s2.init.call(this);
          }
          ti.exports = s2, ti.exports.once = function(e3, t3) {
            return new Promise(function(n3, i3) {
              function s3(n4) {
                e3.removeListener(t3, o3), i3(n4);
              }
              function o3() {
                "function" == typeof e3.removeListener && e3.removeListener("error", s3), n3([].slice.call(arguments));
              }
              m2(e3, t3, o3, { once: true }), "error" !== t3 && function(e4, t4, n4) {
                "function" == typeof e4.on && m2(e4, "error", t4, n4);
              }(e3, s3, { once: true });
            });
          }, s2.EventEmitter = s2, s2.prototype._events = void 0, s2.prototype._eventsCount = 0, s2.prototype._maxListeners = void 0;
          var o2 = 10;
          function r2(e3) {
            if ("function" != typeof e3) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
          }
          function a2(e3) {
            return void 0 === e3._maxListeners ? s2.defaultMaxListeners : e3._maxListeners;
          }
          function c2(e3, t3, n3, i3) {
            var s3, o3, c3, d3;
            if (r2(n3), void 0 === (o3 = e3._events) ? (o3 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== o3.newListener && (e3.emit("newListener", t3, n3.listener ? n3.listener : n3), o3 = e3._events), c3 = o3[t3]), void 0 === c3) c3 = o3[t3] = n3, ++e3._eventsCount;
            else if ("function" == typeof c3 ? c3 = o3[t3] = i3 ? [n3, c3] : [c3, n3] : i3 ? c3.unshift(n3) : c3.push(n3), (s3 = a2(e3)) > 0 && c3.length > s3 && !c3.warned) {
              c3.warned = true;
              var l3 = new Error("Possible EventEmitter memory leak detected. " + c3.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              l3.name = "MaxListenersExceededWarning", l3.emitter = e3, l3.type = t3, l3.count = c3.length, d3 = l3, console && console.warn && console.warn(d3);
            }
            return e3;
          }
          function d2() {
            if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function l2(e3, t3, n3) {
            var i3 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: n3 }, s3 = d2.bind(i3);
            return s3.listener = n3, i3.wrapFn = s3, s3;
          }
          function u2(e3, t3, n3) {
            var i3 = e3._events;
            if (void 0 === i3) return [];
            var s3 = i3[t3];
            return void 0 === s3 ? [] : "function" == typeof s3 ? n3 ? [s3.listener || s3] : [s3] : n3 ? function(e4) {
              for (var t4 = new Array(e4.length), n4 = 0; n4 < t4.length; ++n4) t4[n4] = e4[n4].listener || e4[n4];
              return t4;
            }(s3) : p2(s3, s3.length);
          }
          function h2(e3) {
            var t3 = this._events;
            if (void 0 !== t3) {
              var n3 = t3[e3];
              if ("function" == typeof n3) return 1;
              if (void 0 !== n3) return n3.length;
            }
            return 0;
          }
          function p2(e3, t3) {
            for (var n3 = new Array(t3), i3 = 0; i3 < t3; ++i3) n3[i3] = e3[i3];
            return n3;
          }
          function m2(e3, t3, n3, i3) {
            if ("function" == typeof e3.on) i3.once ? e3.once(t3, n3) : e3.on(t3, n3);
            else {
              if ("function" != typeof e3.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3);
              e3.addEventListener(t3, function s3(o3) {
                i3.once && e3.removeEventListener(t3, s3), n3(o3);
              });
            }
          }
          return Object.defineProperty(s2, "defaultMaxListeners", { enumerable: true, get: function() {
            return o2;
          }, set: function(e3) {
            if ("number" != typeof e3 || e3 < 0 || i2(e3)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
            o2 = e3;
          } }), s2.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, s2.prototype.setMaxListeners = function(e3) {
            if ("number" != typeof e3 || e3 < 0 || i2(e3)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
            return this._maxListeners = e3, this;
          }, s2.prototype.getMaxListeners = function() {
            return a2(this);
          }, s2.prototype.emit = function(e3) {
            for (var t3 = [], i3 = 1; i3 < arguments.length; i3++) t3.push(arguments[i3]);
            var s3 = "error" === e3, o3 = this._events;
            if (void 0 !== o3) s3 = s3 && void 0 === o3.error;
            else if (!s3) return false;
            if (s3) {
              var r3;
              if (t3.length > 0 && (r3 = t3[0]), r3 instanceof Error) throw r3;
              var a3 = new Error("Unhandled error." + (r3 ? " (" + r3.message + ")" : ""));
              throw a3.context = r3, a3;
            }
            var c3 = o3[e3];
            if (void 0 === c3) return false;
            if ("function" == typeof c3) n2(c3, this, t3);
            else {
              var d3 = c3.length, l3 = p2(c3, d3);
              for (i3 = 0; i3 < d3; ++i3) n2(l3[i3], this, t3);
            }
            return true;
          }, s2.prototype.addListener = function(e3, t3) {
            return c2(this, e3, t3, false);
          }, s2.prototype.on = s2.prototype.addListener, s2.prototype.prependListener = function(e3, t3) {
            return c2(this, e3, t3, true);
          }, s2.prototype.once = function(e3, t3) {
            return r2(t3), this.on(e3, l2(this, e3, t3)), this;
          }, s2.prototype.prependOnceListener = function(e3, t3) {
            return r2(t3), this.prependListener(e3, l2(this, e3, t3)), this;
          }, s2.prototype.removeListener = function(e3, t3) {
            var n3, i3, s3, o3, a3;
            if (r2(t3), void 0 === (i3 = this._events)) return this;
            if (void 0 === (n3 = i3[e3])) return this;
            if (n3 === t3 || n3.listener === t3) 0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete i3[e3], i3.removeListener && this.emit("removeListener", e3, n3.listener || t3));
            else if ("function" != typeof n3) {
              for (s3 = -1, o3 = n3.length - 1; o3 >= 0; o3--) if (n3[o3] === t3 || n3[o3].listener === t3) {
                a3 = n3[o3].listener, s3 = o3;
                break;
              }
              if (s3 < 0) return this;
              0 === s3 ? n3.shift() : function(e4, t4) {
                for (; t4 + 1 < e4.length; t4++) e4[t4] = e4[t4 + 1];
                e4.pop();
              }(n3, s3), 1 === n3.length && (i3[e3] = n3[0]), void 0 !== i3.removeListener && this.emit("removeListener", e3, a3 || t3);
            }
            return this;
          }, s2.prototype.off = s2.prototype.removeListener, s2.prototype.removeAllListeners = function(e3) {
            var t3, n3, i3;
            if (void 0 === (n3 = this._events)) return this;
            if (void 0 === n3.removeListener) return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n3[e3]), this;
            if (0 === arguments.length) {
              var s3, o3 = Object.keys(n3);
              for (i3 = 0; i3 < o3.length; ++i3) "removeListener" !== (s3 = o3[i3]) && this.removeAllListeners(s3);
              return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t3 = n3[e3])) this.removeListener(e3, t3);
            else if (void 0 !== t3) for (i3 = t3.length - 1; i3 >= 0; i3--) this.removeListener(e3, t3[i3]);
            return this;
          }, s2.prototype.listeners = function(e3) {
            return u2(this, e3, true);
          }, s2.prototype.rawListeners = function(e3) {
            return u2(this, e3, false);
          }, s2.listenerCount = function(e3, t3) {
            return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : h2.call(e3, t3);
          }, s2.prototype.listenerCount = h2, s2.prototype.eventNames = function() {
            return this._eventsCount > 0 ? e2(this._events) : [];
          }, ti.exports;
        }();
        let ii = true, si = true;
        function oi(e2, t2, n2) {
          const i2 = e2.match(t2);
          return i2 && i2.length >= n2 && parseInt(i2[n2], 10);
        }
        function ri(e2, t2, n2) {
          if (!e2.RTCPeerConnection) return;
          const i2 = e2.RTCPeerConnection.prototype, s2 = i2.addEventListener;
          i2.addEventListener = function(e3, i3) {
            if (e3 !== t2) return s2.apply(this, arguments);
            const o3 = (e4) => {
              const t3 = n2(e4);
              t3 && (i3.handleEvent ? i3.handleEvent(t3) : i3(t3));
            };
            return this._eventMap = this._eventMap || {}, this._eventMap[t2] || (this._eventMap[t2] = /* @__PURE__ */ new Map()), this._eventMap[t2].set(i3, o3), s2.apply(this, [e3, o3]);
          };
          const o2 = i2.removeEventListener;
          i2.removeEventListener = function(e3, n3) {
            if (e3 !== t2 || !this._eventMap || !this._eventMap[t2]) return o2.apply(this, arguments);
            if (!this._eventMap[t2].has(n3)) return o2.apply(this, arguments);
            const i3 = this._eventMap[t2].get(n3);
            return this._eventMap[t2].delete(n3), 0 === this._eventMap[t2].size && delete this._eventMap[t2], 0 === Object.keys(this._eventMap).length && delete this._eventMap, o2.apply(this, [e3, i3]);
          }, Object.defineProperty(i2, "on" + t2, { get() {
            return this["_on" + t2];
          }, set(e3) {
            this["_on" + t2] && (this.removeEventListener(t2, this["_on" + t2]), delete this["_on" + t2]), e3 && this.addEventListener(t2, this["_on" + t2] = e3);
          }, enumerable: true, configurable: true });
        }
        function ai(e2) {
          return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (ii = e2, e2 ? "adapter.js logging disabled" : "adapter.js logging enabled");
        }
        function ci(e2) {
          return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (si = !e2, "adapter.js deprecation warnings " + (e2 ? "disabled" : "enabled"));
        }
        function di() {
          if ("object" == typeof window) {
            if (ii) return;
            "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
          }
        }
        function li(e2, t2) {
          si && console.warn(e2 + " is deprecated, please use " + t2 + " instead.");
        }
        function ui(e2) {
          return "[object Object]" === Object.prototype.toString.call(e2);
        }
        function hi(e2) {
          return ui(e2) ? Object.keys(e2).reduce(function(t2, n2) {
            const i2 = ui(e2[n2]), s2 = i2 ? hi(e2[n2]) : e2[n2], o2 = i2 && !Object.keys(s2).length;
            return void 0 === s2 || o2 ? t2 : Object.assign(t2, { [n2]: s2 });
          }, {}) : e2;
        }
        function pi(e2, t2, n2) {
          t2 && !n2.has(t2.id) && (n2.set(t2.id, t2), Object.keys(t2).forEach((i2) => {
            i2.endsWith("Id") ? pi(e2, e2.get(t2[i2]), n2) : i2.endsWith("Ids") && t2[i2].forEach((t3) => {
              pi(e2, e2.get(t3), n2);
            });
          }));
        }
        function mi(e2, t2, n2) {
          const i2 = n2 ? "outbound-rtp" : "inbound-rtp", s2 = /* @__PURE__ */ new Map();
          if (null === t2) return s2;
          const o2 = [];
          return e2.forEach((e3) => {
            "track" === e3.type && e3.trackIdentifier === t2.id && o2.push(e3);
          }), o2.forEach((t3) => {
            e2.forEach((n3) => {
              n3.type === i2 && n3.trackId === t3.id && pi(e2, n3, s2);
            });
          }), s2;
        }
        const gi = di;
        function vi(e2, t2) {
          const n2 = e2 && e2.navigator;
          if (!n2.mediaDevices) return;
          const i2 = function(e3) {
            if ("object" != typeof e3 || e3.mandatory || e3.optional) return e3;
            const t3 = {};
            return Object.keys(e3).forEach((n3) => {
              if ("require" === n3 || "advanced" === n3 || "mediaSource" === n3) return;
              const i3 = "object" == typeof e3[n3] ? e3[n3] : { ideal: e3[n3] };
              void 0 !== i3.exact && "number" == typeof i3.exact && (i3.min = i3.max = i3.exact);
              const s3 = function(e4, t4) {
                return e4 ? e4 + t4.charAt(0).toUpperCase() + t4.slice(1) : "deviceId" === t4 ? "sourceId" : t4;
              };
              if (void 0 !== i3.ideal) {
                t3.optional = t3.optional || [];
                let e4 = {};
                "number" == typeof i3.ideal ? (e4[s3("min", n3)] = i3.ideal, t3.optional.push(e4), e4 = {}, e4[s3("max", n3)] = i3.ideal, t3.optional.push(e4)) : (e4[s3("", n3)] = i3.ideal, t3.optional.push(e4));
              }
              void 0 !== i3.exact && "number" != typeof i3.exact ? (t3.mandatory = t3.mandatory || {}, t3.mandatory[s3("", n3)] = i3.exact) : ["min", "max"].forEach((e4) => {
                void 0 !== i3[e4] && (t3.mandatory = t3.mandatory || {}, t3.mandatory[s3(e4, n3)] = i3[e4]);
              });
            }), e3.advanced && (t3.optional = (t3.optional || []).concat(e3.advanced)), t3;
          }, s2 = function(e3, s3) {
            if (t2.version >= 61) return s3(e3);
            if ((e3 = JSON.parse(JSON.stringify(e3))) && "object" == typeof e3.audio) {
              const t3 = function(e4, t4, n3) {
                t4 in e4 && !(n3 in e4) && (e4[n3] = e4[t4], delete e4[t4]);
              };
              t3((e3 = JSON.parse(JSON.stringify(e3))).audio, "autoGainControl", "googAutoGainControl"), t3(e3.audio, "noiseSuppression", "googNoiseSuppression"), e3.audio = i2(e3.audio);
            }
            if (e3 && "object" == typeof e3.video) {
              let o3 = e3.video.facingMode;
              o3 = o3 && ("object" == typeof o3 ? o3 : { ideal: o3 });
              const r2 = t2.version < 66;
              if (o3 && ("user" === o3.exact || "environment" === o3.exact || "user" === o3.ideal || "environment" === o3.ideal) && (!n2.mediaDevices.getSupportedConstraints || !n2.mediaDevices.getSupportedConstraints().facingMode || r2)) {
                let t3;
                if (delete e3.video.facingMode, "environment" === o3.exact || "environment" === o3.ideal ? t3 = ["back", "rear"] : "user" !== o3.exact && "user" !== o3.ideal || (t3 = ["front"]), t3) return n2.mediaDevices.enumerateDevices().then((n3) => {
                  let r3 = (n3 = n3.filter((e4) => "videoinput" === e4.kind)).find((e4) => t3.some((t4) => e4.label.toLowerCase().includes(t4)));
                  return !r3 && n3.length && t3.includes("back") && (r3 = n3[n3.length - 1]), r3 && (e3.video.deviceId = o3.exact ? { exact: r3.deviceId } : { ideal: r3.deviceId }), e3.video = i2(e3.video), gi("chrome: " + JSON.stringify(e3)), s3(e3);
                });
              }
              e3.video = i2(e3.video);
            }
            return gi("chrome: " + JSON.stringify(e3)), s3(e3);
          }, o2 = function(e3) {
            return t2.version >= 64 ? e3 : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[e3.name] || e3.name, message: e3.message, constraint: e3.constraint || e3.constraintName, toString() {
              return this.name + (this.message && ": ") + this.message;
            } };
          };
          if (n2.getUserMedia = function(e3, t3, i3) {
            s2(e3, (e4) => {
              n2.webkitGetUserMedia(e4, t3, (e5) => {
                i3 && i3(o2(e5));
              });
            });
          }.bind(n2), n2.mediaDevices.getUserMedia) {
            const e3 = n2.mediaDevices.getUserMedia.bind(n2.mediaDevices);
            n2.mediaDevices.getUserMedia = function(t3) {
              return s2(t3, (t4) => e3(t4).then((e4) => {
                if (t4.audio && !e4.getAudioTracks().length || t4.video && !e4.getVideoTracks().length) throw e4.getTracks().forEach((e5) => {
                  e5.stop();
                }), new DOMException("", "NotFoundError");
                return e4;
              }, (e4) => Promise.reject(o2(e4))));
            };
          }
        }
        function fi(e2) {
          e2.MediaStream = e2.MediaStream || e2.webkitMediaStream;
        }
        function ki(e2) {
          if ("object" == typeof e2 && e2.RTCPeerConnection && !("ontrack" in e2.RTCPeerConnection.prototype)) {
            Object.defineProperty(e2.RTCPeerConnection.prototype, "ontrack", { get() {
              return this._ontrack;
            }, set(e3) {
              this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e3);
            }, enumerable: true, configurable: true });
            const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
            e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
              return this._ontrackpoly || (this._ontrackpoly = (t3) => {
                t3.stream.addEventListener("addtrack", (n2) => {
                  let i2;
                  i2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === n2.track.id) : { track: n2.track };
                  const s2 = new Event("track");
                  s2.track = n2.track, s2.receiver = i2, s2.transceiver = { receiver: i2 }, s2.streams = [t3.stream], this.dispatchEvent(s2);
                }), t3.stream.getTracks().forEach((n2) => {
                  let i2;
                  i2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === n2.id) : { track: n2 };
                  const s2 = new Event("track");
                  s2.track = n2, s2.receiver = i2, s2.transceiver = { receiver: i2 }, s2.streams = [t3.stream], this.dispatchEvent(s2);
                });
              }, this.addEventListener("addstream", this._ontrackpoly)), t2.apply(this, arguments);
            };
          } else ri(e2, "track", (e3) => (e3.transceiver || Object.defineProperty(e3, "transceiver", { value: { receiver: e3.receiver } }), e3));
        }
        function bi(e2) {
          if ("object" == typeof e2 && e2.RTCPeerConnection && !("getSenders" in e2.RTCPeerConnection.prototype) && "createDTMFSender" in e2.RTCPeerConnection.prototype) {
            const t2 = function(e3, t3) {
              return { track: t3, get dtmf() {
                return void 0 === this._dtmf && ("audio" === t3.kind ? this._dtmf = e3.createDTMFSender(t3) : this._dtmf = null), this._dtmf;
              }, _pc: e3 };
            };
            if (!e2.RTCPeerConnection.prototype.getSenders) {
              e2.RTCPeerConnection.prototype.getSenders = function() {
                return this._senders = this._senders || [], this._senders.slice();
              };
              const n3 = e2.RTCPeerConnection.prototype.addTrack;
              e2.RTCPeerConnection.prototype.addTrack = function(e3, i4) {
                let s2 = n3.apply(this, arguments);
                return s2 || (s2 = t2(this, e3), this._senders.push(s2)), s2;
              };
              const i3 = e2.RTCPeerConnection.prototype.removeTrack;
              e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
                i3.apply(this, arguments);
                const t3 = this._senders.indexOf(e3);
                -1 !== t3 && this._senders.splice(t3, 1);
              };
            }
            const n2 = e2.RTCPeerConnection.prototype.addStream;
            e2.RTCPeerConnection.prototype.addStream = function(e3) {
              this._senders = this._senders || [], n2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
                this._senders.push(t2(this, e4));
              });
            };
            const i2 = e2.RTCPeerConnection.prototype.removeStream;
            e2.RTCPeerConnection.prototype.removeStream = function(e3) {
              this._senders = this._senders || [], i2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
                const t3 = this._senders.find((t4) => t4.track === e4);
                t3 && this._senders.splice(this._senders.indexOf(t3), 1);
              });
            };
          } else if ("object" == typeof e2 && e2.RTCPeerConnection && "getSenders" in e2.RTCPeerConnection.prototype && "createDTMFSender" in e2.RTCPeerConnection.prototype && e2.RTCRtpSender && !("dtmf" in e2.RTCRtpSender.prototype)) {
            const t2 = e2.RTCPeerConnection.prototype.getSenders;
            e2.RTCPeerConnection.prototype.getSenders = function() {
              const e3 = t2.apply(this, []);
              return e3.forEach((e4) => e4._pc = this), e3;
            }, Object.defineProperty(e2.RTCRtpSender.prototype, "dtmf", { get() {
              return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
            } });
          }
        }
        function yi(e2) {
          if (!("object" == typeof e2 && e2.RTCPeerConnection && e2.RTCRtpSender && e2.RTCRtpReceiver)) return;
          if (!("getStats" in e2.RTCRtpSender.prototype)) {
            const t3 = e2.RTCPeerConnection.prototype.getSenders;
            t3 && (e2.RTCPeerConnection.prototype.getSenders = function() {
              const e3 = t3.apply(this, []);
              return e3.forEach((e4) => e4._pc = this), e3;
            });
            const n2 = e2.RTCPeerConnection.prototype.addTrack;
            n2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
              const e3 = n2.apply(this, arguments);
              return e3._pc = this, e3;
            }), e2.RTCRtpSender.prototype.getStats = function() {
              const e3 = this;
              return this._pc.getStats().then((t4) => mi(t4, e3.track, true));
            };
          }
          if (!("getStats" in e2.RTCRtpReceiver.prototype)) {
            const t3 = e2.RTCPeerConnection.prototype.getReceivers;
            t3 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
              const e3 = t3.apply(this, []);
              return e3.forEach((e4) => e4._pc = this), e3;
            }), ri(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
              const e3 = this;
              return this._pc.getStats().then((t4) => mi(t4, e3.track, false));
            };
          }
          if (!("getStats" in e2.RTCRtpSender.prototype) || !("getStats" in e2.RTCRtpReceiver.prototype)) return;
          const t2 = e2.RTCPeerConnection.prototype.getStats;
          e2.RTCPeerConnection.prototype.getStats = function() {
            if (arguments.length > 0 && arguments[0] instanceof e2.MediaStreamTrack) {
              const e3 = arguments[0];
              let t3, n2, i2;
              return this.getSenders().forEach((n3) => {
                n3.track === e3 && (t3 ? i2 = true : t3 = n3);
              }), this.getReceivers().forEach((t4) => (t4.track === e3 && (n2 ? i2 = true : n2 = t4), t4.track === e3)), i2 || t3 && n2 ? Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : t3 ? t3.getStats() : n2 ? n2.getStats() : Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
            }
            return t2.apply(this, arguments);
          };
        }
        function Ti(e2) {
          e2.RTCPeerConnection.prototype.getLocalStreams = function() {
            return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map((e3) => this._shimmedLocalStreams[e3][0]);
          };
          const t2 = e2.RTCPeerConnection.prototype.addTrack;
          e2.RTCPeerConnection.prototype.addTrack = function(e3, n3) {
            if (!n3) return t2.apply(this, arguments);
            this._shimmedLocalStreams = this._shimmedLocalStreams || {};
            const i3 = t2.apply(this, arguments);
            return this._shimmedLocalStreams[n3.id] ? -1 === this._shimmedLocalStreams[n3.id].indexOf(i3) && this._shimmedLocalStreams[n3.id].push(i3) : this._shimmedLocalStreams[n3.id] = [n3, i3], i3;
          };
          const n2 = e2.RTCPeerConnection.prototype.addStream;
          e2.RTCPeerConnection.prototype.addStream = function(e3) {
            this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3.getTracks().forEach((e4) => {
              if (this.getSenders().find((t4) => t4.track === e4)) throw new DOMException("Track already exists.", "InvalidAccessError");
            });
            const t3 = this.getSenders();
            n2.apply(this, arguments);
            const i3 = this.getSenders().filter((e4) => -1 === t3.indexOf(e4));
            this._shimmedLocalStreams[e3.id] = [e3].concat(i3);
          };
          const i2 = e2.RTCPeerConnection.prototype.removeStream;
          e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e3.id], i2.apply(this, arguments);
          };
          const s2 = e2.RTCPeerConnection.prototype.removeTrack;
          e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
            return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3 && Object.keys(this._shimmedLocalStreams).forEach((t3) => {
              const n3 = this._shimmedLocalStreams[t3].indexOf(e3);
              -1 !== n3 && this._shimmedLocalStreams[t3].splice(n3, 1), 1 === this._shimmedLocalStreams[t3].length && delete this._shimmedLocalStreams[t3];
            }), s2.apply(this, arguments);
          };
        }
        function Ci(e2, t2) {
          if (!e2.RTCPeerConnection) return;
          if (e2.RTCPeerConnection.prototype.addTrack && t2.version >= 65) return Ti(e2);
          const n2 = e2.RTCPeerConnection.prototype.getLocalStreams;
          e2.RTCPeerConnection.prototype.getLocalStreams = function() {
            const e3 = n2.apply(this);
            return this._reverseStreams = this._reverseStreams || {}, e3.map((e4) => this._reverseStreams[e4.id]);
          };
          const i2 = e2.RTCPeerConnection.prototype.addStream;
          e2.RTCPeerConnection.prototype.addStream = function(t3) {
            if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t3.getTracks().forEach((e3) => {
              if (this.getSenders().find((t4) => t4.track === e3)) throw new DOMException("Track already exists.", "InvalidAccessError");
            }), !this._reverseStreams[t3.id]) {
              const n3 = new e2.MediaStream(t3.getTracks());
              this._streams[t3.id] = n3, this._reverseStreams[n3.id] = t3, t3 = n3;
            }
            i2.apply(this, [t3]);
          };
          const s2 = e2.RTCPeerConnection.prototype.removeStream;
          function o2(e3, t3) {
            let n3 = t3.sdp;
            return Object.keys(e3._reverseStreams || []).forEach((t4) => {
              const i3 = e3._reverseStreams[t4], s3 = e3._streams[i3.id];
              n3 = n3.replace(new RegExp(s3.id, "g"), i3.id);
            }), new RTCSessionDescription({ type: t3.type, sdp: n3 });
          }
          e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, s2.apply(this, [this._streams[e3.id] || e3]), delete this._reverseStreams[this._streams[e3.id] ? this._streams[e3.id].id : e3.id], delete this._streams[e3.id];
          }, e2.RTCPeerConnection.prototype.addTrack = function(t3, n3) {
            if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
            const i3 = [].slice.call(arguments, 1);
            if (1 !== i3.length || !i3[0].getTracks().find((e3) => e3 === t3)) throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
            if (this.getSenders().find((e3) => e3.track === t3)) throw new DOMException("Track already exists.", "InvalidAccessError");
            this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
            const s3 = this._streams[n3.id];
            if (s3) s3.addTrack(t3), Promise.resolve().then(() => {
              this.dispatchEvent(new Event("negotiationneeded"));
            });
            else {
              const i4 = new e2.MediaStream([t3]);
              this._streams[n3.id] = i4, this._reverseStreams[i4.id] = n3, this.addStream(i4);
            }
            return this.getSenders().find((e3) => e3.track === t3);
          }, ["createOffer", "createAnswer"].forEach(function(t3) {
            const n3 = e2.RTCPeerConnection.prototype[t3], i3 = { [t3]() {
              const e3 = arguments;
              return arguments.length && "function" == typeof arguments[0] ? n3.apply(this, [(t4) => {
                const n4 = o2(this, t4);
                e3[0].apply(null, [n4]);
              }, (t4) => {
                e3[1] && e3[1].apply(null, t4);
              }, arguments[2]]) : n3.apply(this, arguments).then((e4) => o2(this, e4));
            } };
            e2.RTCPeerConnection.prototype[t3] = i3[t3];
          });
          const r2 = e2.RTCPeerConnection.prototype.setLocalDescription;
          e2.RTCPeerConnection.prototype.setLocalDescription = function() {
            return arguments.length && arguments[0].type ? (arguments[0] = function(e3, t3) {
              let n3 = t3.sdp;
              return Object.keys(e3._reverseStreams || []).forEach((t4) => {
                const i3 = e3._reverseStreams[t4], s3 = e3._streams[i3.id];
                n3 = n3.replace(new RegExp(i3.id, "g"), s3.id);
              }), new RTCSessionDescription({ type: t3.type, sdp: n3 });
            }(this, arguments[0]), r2.apply(this, arguments)) : r2.apply(this, arguments);
          };
          const a2 = Object.getOwnPropertyDescriptor(e2.RTCPeerConnection.prototype, "localDescription");
          Object.defineProperty(e2.RTCPeerConnection.prototype, "localDescription", { get() {
            const e3 = a2.get.apply(this);
            return "" === e3.type ? e3 : o2(this, e3);
          } }), e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
            if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
            if (!e3._pc) throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
            if (!(e3._pc === this)) throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
            let t3;
            this._streams = this._streams || {}, Object.keys(this._streams).forEach((n3) => {
              this._streams[n3].getTracks().find((t4) => e3.track === t4) && (t3 = this._streams[n3]);
            }), t3 && (1 === t3.getTracks().length ? this.removeStream(this._reverseStreams[t3.id]) : t3.removeTrack(e3.track), this.dispatchEvent(new Event("negotiationneeded")));
          };
        }
        function Si(e2, t2) {
          !e2.RTCPeerConnection && e2.webkitRTCPeerConnection && (e2.RTCPeerConnection = e2.webkitRTCPeerConnection), e2.RTCPeerConnection && t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
            const n2 = e2.RTCPeerConnection.prototype[t3], i2 = { [t3]() {
              return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), n2.apply(this, arguments);
            } };
            e2.RTCPeerConnection.prototype[t3] = i2[t3];
          });
        }
        function Ei(e2, t2) {
          ri(e2, "negotiationneeded", (e3) => {
            const n2 = e3.target;
            if (!(t2.version < 72 || n2.getConfiguration && "plan-b" === n2.getConfiguration().sdpSemantics) || "stable" === n2.signalingState) return e3;
          });
        }
        var wi = Object.freeze({ __proto__: null, fixNegotiationNeeded: Ei, shimAddTrackRemoveTrack: Ci, shimAddTrackRemoveTrackWithNative: Ti, shimGetSendersWithDtmf: bi, shimGetUserMedia: vi, shimMediaStream: fi, shimOnTrack: ki, shimPeerConnection: Si, shimSenderReceiverGetStats: yi });
        function Pi(e2, t2) {
          const n2 = e2 && e2.navigator, i2 = e2 && e2.MediaStreamTrack;
          if (n2.getUserMedia = function(e3, t3, i3) {
            li("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), n2.mediaDevices.getUserMedia(e3).then(t3, i3);
          }, !(t2.version > 55 && "autoGainControl" in n2.mediaDevices.getSupportedConstraints())) {
            const e3 = function(e4, t4, n3) {
              t4 in e4 && !(n3 in e4) && (e4[n3] = e4[t4], delete e4[t4]);
            }, t3 = n2.mediaDevices.getUserMedia.bind(n2.mediaDevices);
            if (n2.mediaDevices.getUserMedia = function(n3) {
              return "object" == typeof n3 && "object" == typeof n3.audio && (n3 = JSON.parse(JSON.stringify(n3)), e3(n3.audio, "autoGainControl", "mozAutoGainControl"), e3(n3.audio, "noiseSuppression", "mozNoiseSuppression")), t3(n3);
            }, i2 && i2.prototype.getSettings) {
              const t4 = i2.prototype.getSettings;
              i2.prototype.getSettings = function() {
                const n3 = t4.apply(this, arguments);
                return e3(n3, "mozAutoGainControl", "autoGainControl"), e3(n3, "mozNoiseSuppression", "noiseSuppression"), n3;
              };
            }
            if (i2 && i2.prototype.applyConstraints) {
              const t4 = i2.prototype.applyConstraints;
              i2.prototype.applyConstraints = function(n3) {
                return "audio" === this.kind && "object" == typeof n3 && (n3 = JSON.parse(JSON.stringify(n3)), e3(n3, "autoGainControl", "mozAutoGainControl"), e3(n3, "noiseSuppression", "mozNoiseSuppression")), t4.apply(this, [n3]);
              };
            }
          }
        }
        function Ri(e2) {
          "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
            return { receiver: this.receiver };
          } });
        }
        function Ii(e2, t2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection && !e2.mozRTCPeerConnection) return;
          !e2.RTCPeerConnection && e2.mozRTCPeerConnection && (e2.RTCPeerConnection = e2.mozRTCPeerConnection), t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
            const n3 = e2.RTCPeerConnection.prototype[t3], i3 = { [t3]() {
              return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), n3.apply(this, arguments);
            } };
            e2.RTCPeerConnection.prototype[t3] = i3[t3];
          });
          const n2 = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }, i2 = e2.RTCPeerConnection.prototype.getStats;
          e2.RTCPeerConnection.prototype.getStats = function() {
            const [e3, s2, o2] = arguments;
            return i2.apply(this, [e3 || null]).then((e4) => {
              if (t2.version < 53 && !s2) try {
                e4.forEach((e5) => {
                  e5.type = n2[e5.type] || e5.type;
                });
              } catch (t3) {
                if ("TypeError" !== t3.name) throw t3;
                e4.forEach((t4, i3) => {
                  e4.set(i3, Object.assign({}, t4, { type: n2[t4.type] || t4.type }));
                });
              }
              return e4;
            }).then(s2, o2);
          };
        }
        function Oi(e2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender) return;
          if (e2.RTCRtpSender && "getStats" in e2.RTCRtpSender.prototype) return;
          const t2 = e2.RTCPeerConnection.prototype.getSenders;
          t2 && (e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t2.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          });
          const n2 = e2.RTCPeerConnection.prototype.addTrack;
          n2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
            const e3 = n2.apply(this, arguments);
            return e3._pc = this, e3;
          }), e2.RTCRtpSender.prototype.getStats = function() {
            return this.track ? this._pc.getStats(this.track) : Promise.resolve(/* @__PURE__ */ new Map());
          };
        }
        function Di(e2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender) return;
          if (e2.RTCRtpSender && "getStats" in e2.RTCRtpReceiver.prototype) return;
          const t2 = e2.RTCPeerConnection.prototype.getReceivers;
          t2 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
            const e3 = t2.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }), ri(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
            return this._pc.getStats(this.track);
          };
        }
        function xi(e2) {
          e2.RTCPeerConnection && !("removeStream" in e2.RTCPeerConnection.prototype) && (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            li("removeStream", "removeTrack"), this.getSenders().forEach((t2) => {
              t2.track && e3.getTracks().includes(t2.track) && this.removeTrack(t2);
            });
          });
        }
        function Mi(e2) {
          e2.DataChannel && !e2.RTCDataChannel && (e2.RTCDataChannel = e2.DataChannel);
        }
        function Ni(e2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
          const t2 = e2.RTCPeerConnection.prototype.addTransceiver;
          t2 && (e2.RTCPeerConnection.prototype.addTransceiver = function() {
            this.setParametersPromises = [];
            let e3 = arguments[1] && arguments[1].sendEncodings;
            void 0 === e3 && (e3 = []), e3 = [...e3];
            const n2 = e3.length > 0;
            n2 && e3.forEach((e4) => {
              if ("rid" in e4) {
                if (!/^[a-z0-9]{0,16}$/i.test(e4.rid)) throw new TypeError("Invalid RID value provided.");
              }
              if ("scaleResolutionDownBy" in e4 && !(parseFloat(e4.scaleResolutionDownBy) >= 1)) throw new RangeError("scale_resolution_down_by must be >= 1.0");
              if ("maxFramerate" in e4 && !(parseFloat(e4.maxFramerate) >= 0)) throw new RangeError("max_framerate must be >= 0.0");
            });
            const i2 = t2.apply(this, arguments);
            if (n2) {
              const { sender: t3 } = i2, n3 = t3.getParameters();
              (!("encodings" in n3) || 1 === n3.encodings.length && 0 === Object.keys(n3.encodings[0]).length) && (n3.encodings = e3, t3.sendEncodings = e3, this.setParametersPromises.push(t3.setParameters(n3).then(() => {
                delete t3.sendEncodings;
              }).catch(() => {
                delete t3.sendEncodings;
              })));
            }
            return i2;
          });
        }
        function _i(e2) {
          if ("object" != typeof e2 || !e2.RTCRtpSender) return;
          const t2 = e2.RTCRtpSender.prototype.getParameters;
          t2 && (e2.RTCRtpSender.prototype.getParameters = function() {
            const e3 = t2.apply(this, arguments);
            return "encodings" in e3 || (e3.encodings = [].concat(this.sendEncodings || [{}])), e3;
          });
        }
        function Ai(e2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
          const t2 = e2.RTCPeerConnection.prototype.createOffer;
          e2.RTCPeerConnection.prototype.createOffer = function() {
            return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
              this.setParametersPromises = [];
            }) : t2.apply(this, arguments);
          };
        }
        function Li(e2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
          const t2 = e2.RTCPeerConnection.prototype.createAnswer;
          e2.RTCPeerConnection.prototype.createAnswer = function() {
            return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
              this.setParametersPromises = [];
            }) : t2.apply(this, arguments);
          };
        }
        var Ui = Object.freeze({ __proto__: null, shimAddTransceiver: Ni, shimCreateAnswer: Li, shimCreateOffer: Ai, shimGetDisplayMedia: function(e2, t2) {
          e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && (e2.navigator.mediaDevices.getDisplayMedia = function(n2) {
            if (!n2 || !n2.video) {
              const e3 = new DOMException("getDisplayMedia without video constraints is undefined");
              return e3.name = "NotFoundError", e3.code = 8, Promise.reject(e3);
            }
            return true === n2.video ? n2.video = { mediaSource: t2 } : n2.video.mediaSource = t2, e2.navigator.mediaDevices.getUserMedia(n2);
          });
        }, shimGetParameters: _i, shimGetUserMedia: Pi, shimOnTrack: Ri, shimPeerConnection: Ii, shimRTCDataChannel: Mi, shimReceiverGetStats: Di, shimRemoveStream: xi, shimSenderGetStats: Oi });
        function ji(e2) {
          if ("object" == typeof e2 && e2.RTCPeerConnection) {
            if ("getLocalStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getLocalStreams = function() {
              return this._localStreams || (this._localStreams = []), this._localStreams;
            }), !("addStream" in e2.RTCPeerConnection.prototype)) {
              const t2 = e2.RTCPeerConnection.prototype.addTrack;
              e2.RTCPeerConnection.prototype.addStream = function(e3) {
                this._localStreams || (this._localStreams = []), this._localStreams.includes(e3) || this._localStreams.push(e3), e3.getAudioTracks().forEach((n2) => t2.call(this, n2, e3)), e3.getVideoTracks().forEach((n2) => t2.call(this, n2, e3));
              }, e2.RTCPeerConnection.prototype.addTrack = function(e3) {
                for (var n2 = arguments.length, i2 = new Array(n2 > 1 ? n2 - 1 : 0), s2 = 1; s2 < n2; s2++) i2[s2 - 1] = arguments[s2];
                return i2 && i2.forEach((e4) => {
                  this._localStreams ? this._localStreams.includes(e4) || this._localStreams.push(e4) : this._localStreams = [e4];
                }), t2.apply(this, arguments);
              };
            }
            "removeStream" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
              this._localStreams || (this._localStreams = []);
              const t2 = this._localStreams.indexOf(e3);
              if (-1 === t2) return;
              this._localStreams.splice(t2, 1);
              const n2 = e3.getTracks();
              this.getSenders().forEach((e4) => {
                n2.includes(e4.track) && this.removeTrack(e4);
              });
            });
          }
        }
        function Fi(e2) {
          if ("object" == typeof e2 && e2.RTCPeerConnection && ("getRemoteStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getRemoteStreams = function() {
            return this._remoteStreams ? this._remoteStreams : [];
          }), !("onaddstream" in e2.RTCPeerConnection.prototype))) {
            Object.defineProperty(e2.RTCPeerConnection.prototype, "onaddstream", { get() {
              return this._onaddstream;
            }, set(e3) {
              this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e3), this.addEventListener("track", this._onaddstreampoly = (e4) => {
                e4.streams.forEach((e5) => {
                  if (this._remoteStreams || (this._remoteStreams = []), this._remoteStreams.includes(e5)) return;
                  this._remoteStreams.push(e5);
                  const t3 = new Event("addstream");
                  t3.stream = e5, this.dispatchEvent(t3);
                });
              });
            } });
            const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
            e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
              const e3 = this;
              return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function(t3) {
                t3.streams.forEach((t4) => {
                  if (e3._remoteStreams || (e3._remoteStreams = []), e3._remoteStreams.indexOf(t4) >= 0) return;
                  e3._remoteStreams.push(t4);
                  const n2 = new Event("addstream");
                  n2.stream = t4, e3.dispatchEvent(n2);
                });
              }), t2.apply(e3, arguments);
            };
          }
        }
        function Bi(e2) {
          if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
          const t2 = e2.RTCPeerConnection.prototype, n2 = t2.createOffer, i2 = t2.createAnswer, s2 = t2.setLocalDescription, o2 = t2.setRemoteDescription, r2 = t2.addIceCandidate;
          t2.createOffer = function(e3, t3) {
            const i3 = arguments.length >= 2 ? arguments[2] : arguments[0], s3 = n2.apply(this, [i3]);
            return t3 ? (s3.then(e3, t3), Promise.resolve()) : s3;
          }, t2.createAnswer = function(e3, t3) {
            const n3 = arguments.length >= 2 ? arguments[2] : arguments[0], s3 = i2.apply(this, [n3]);
            return t3 ? (s3.then(e3, t3), Promise.resolve()) : s3;
          };
          let a2 = function(e3, t3, n3) {
            const i3 = s2.apply(this, [e3]);
            return n3 ? (i3.then(t3, n3), Promise.resolve()) : i3;
          };
          t2.setLocalDescription = a2, a2 = function(e3, t3, n3) {
            const i3 = o2.apply(this, [e3]);
            return n3 ? (i3.then(t3, n3), Promise.resolve()) : i3;
          }, t2.setRemoteDescription = a2, a2 = function(e3, t3, n3) {
            const i3 = r2.apply(this, [e3]);
            return n3 ? (i3.then(t3, n3), Promise.resolve()) : i3;
          }, t2.addIceCandidate = a2;
        }
        function Vi(e2) {
          const t2 = e2 && e2.navigator;
          if (t2.mediaDevices && t2.mediaDevices.getUserMedia) {
            const e3 = t2.mediaDevices, n2 = e3.getUserMedia.bind(e3);
            t2.mediaDevices.getUserMedia = (e4) => n2(qi(e4));
          }
          !t2.getUserMedia && t2.mediaDevices && t2.mediaDevices.getUserMedia && (t2.getUserMedia = function(e3, n2, i2) {
            t2.mediaDevices.getUserMedia(e3).then(n2, i2);
          }.bind(t2));
        }
        function qi(e2) {
          return e2 && void 0 !== e2.video ? Object.assign({}, e2, { video: hi(e2.video) }) : e2;
        }
        function Ki(e2) {
          if (!e2.RTCPeerConnection) return;
          const t2 = e2.RTCPeerConnection;
          e2.RTCPeerConnection = function(e3, n2) {
            if (e3 && e3.iceServers) {
              const t3 = [];
              for (let n3 = 0; n3 < e3.iceServers.length; n3++) {
                let i2 = e3.iceServers[n3];
                void 0 === i2.urls && i2.url ? (li("RTCIceServer.url", "RTCIceServer.urls"), i2 = JSON.parse(JSON.stringify(i2)), i2.urls = i2.url, delete i2.url, t3.push(i2)) : t3.push(e3.iceServers[n3]);
              }
              e3.iceServers = t3;
            }
            return new t2(e3, n2);
          }, e2.RTCPeerConnection.prototype = t2.prototype, "generateCertificate" in t2 && Object.defineProperty(e2.RTCPeerConnection, "generateCertificate", { get: () => t2.generateCertificate });
        }
        function Wi(e2) {
          "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
            return { receiver: this.receiver };
          } });
        }
        function Hi(e2) {
          const t2 = e2.RTCPeerConnection.prototype.createOffer;
          e2.RTCPeerConnection.prototype.createOffer = function(e3) {
            if (e3) {
              void 0 !== e3.offerToReceiveAudio && (e3.offerToReceiveAudio = !!e3.offerToReceiveAudio);
              const t3 = this.getTransceivers().find((e4) => "audio" === e4.receiver.track.kind);
              false === e3.offerToReceiveAudio && t3 ? "sendrecv" === t3.direction ? t3.setDirection ? t3.setDirection("sendonly") : t3.direction = "sendonly" : "recvonly" === t3.direction && (t3.setDirection ? t3.setDirection("inactive") : t3.direction = "inactive") : true !== e3.offerToReceiveAudio || t3 || this.addTransceiver("audio", { direction: "recvonly" }), void 0 !== e3.offerToReceiveVideo && (e3.offerToReceiveVideo = !!e3.offerToReceiveVideo);
              const n2 = this.getTransceivers().find((e4) => "video" === e4.receiver.track.kind);
              false === e3.offerToReceiveVideo && n2 ? "sendrecv" === n2.direction ? n2.setDirection ? n2.setDirection("sendonly") : n2.direction = "sendonly" : "recvonly" === n2.direction && (n2.setDirection ? n2.setDirection("inactive") : n2.direction = "inactive") : true !== e3.offerToReceiveVideo || n2 || this.addTransceiver("video", { direction: "recvonly" });
            }
            return t2.apply(this, arguments);
          };
        }
        function Gi(e2) {
          "object" != typeof e2 || e2.AudioContext || (e2.AudioContext = e2.webkitAudioContext);
        }
        var zi, Ji = Object.freeze({ __proto__: null, shimAudioContext: Gi, shimCallbacksAPI: Bi, shimConstraints: qi, shimCreateOfferLegacy: Hi, shimGetUserMedia: Vi, shimLocalStreamsAPI: ji, shimRTCIceServerUrls: Ki, shimRemoteStreamsAPI: Fi, shimTrackEventTransceiver: Wi }), Qi = { exports: {} };
        var Yi = (zi || (zi = 1, function(e2) {
          const t2 = { generateIdentifier: function() {
            return Math.random().toString(36).substring(2, 12);
          } };
          t2.localCName = t2.generateIdentifier(), t2.splitLines = function(e3) {
            return e3.trim().split("\n").map((e4) => e4.trim());
          }, t2.splitSections = function(e3) {
            return e3.split("\nm=").map((e4, t3) => (t3 > 0 ? "m=" + e4 : e4).trim() + "\r\n");
          }, t2.getDescription = function(e3) {
            const n2 = t2.splitSections(e3);
            return n2 && n2[0];
          }, t2.getMediaSections = function(e3) {
            const n2 = t2.splitSections(e3);
            return n2.shift(), n2;
          }, t2.matchPrefix = function(e3, n2) {
            return t2.splitLines(e3).filter((e4) => 0 === e4.indexOf(n2));
          }, t2.parseCandidate = function(e3) {
            let t3;
            t3 = 0 === e3.indexOf("a=candidate:") ? e3.substring(12).split(" ") : e3.substring(10).split(" ");
            const n2 = { foundation: t3[0], component: { 1: "rtp", 2: "rtcp" }[t3[1]] || t3[1], protocol: t3[2].toLowerCase(), priority: parseInt(t3[3], 10), ip: t3[4], address: t3[4], port: parseInt(t3[5], 10), type: t3[7] };
            for (let e4 = 8; e4 < t3.length; e4 += 2) switch (t3[e4]) {
              case "raddr":
                n2.relatedAddress = t3[e4 + 1];
                break;
              case "rport":
                n2.relatedPort = parseInt(t3[e4 + 1], 10);
                break;
              case "tcptype":
                n2.tcpType = t3[e4 + 1];
                break;
              case "ufrag":
                n2.ufrag = t3[e4 + 1], n2.usernameFragment = t3[e4 + 1];
                break;
              default:
                void 0 === n2[t3[e4]] && (n2[t3[e4]] = t3[e4 + 1]);
            }
            return n2;
          }, t2.writeCandidate = function(e3) {
            const t3 = [];
            t3.push(e3.foundation);
            const n2 = e3.component;
            "rtp" === n2 ? t3.push(1) : "rtcp" === n2 ? t3.push(2) : t3.push(n2), t3.push(e3.protocol.toUpperCase()), t3.push(e3.priority), t3.push(e3.address || e3.ip), t3.push(e3.port);
            const i2 = e3.type;
            return t3.push("typ"), t3.push(i2), "host" !== i2 && e3.relatedAddress && e3.relatedPort && (t3.push("raddr"), t3.push(e3.relatedAddress), t3.push("rport"), t3.push(e3.relatedPort)), e3.tcpType && "tcp" === e3.protocol.toLowerCase() && (t3.push("tcptype"), t3.push(e3.tcpType)), (e3.usernameFragment || e3.ufrag) && (t3.push("ufrag"), t3.push(e3.usernameFragment || e3.ufrag)), "candidate:" + t3.join(" ");
          }, t2.parseIceOptions = function(e3) {
            return e3.substring(14).split(" ");
          }, t2.parseRtpMap = function(e3) {
            let t3 = e3.substring(9).split(" ");
            const n2 = { payloadType: parseInt(t3.shift(), 10) };
            return t3 = t3[0].split("/"), n2.name = t3[0], n2.clockRate = parseInt(t3[1], 10), n2.channels = 3 === t3.length ? parseInt(t3[2], 10) : 1, n2.numChannels = n2.channels, n2;
          }, t2.writeRtpMap = function(e3) {
            let t3 = e3.payloadType;
            void 0 !== e3.preferredPayloadType && (t3 = e3.preferredPayloadType);
            const n2 = e3.channels || e3.numChannels || 1;
            return "a=rtpmap:" + t3 + " " + e3.name + "/" + e3.clockRate + (1 !== n2 ? "/" + n2 : "") + "\r\n";
          }, t2.parseExtmap = function(e3) {
            const t3 = e3.substring(9).split(" ");
            return { id: parseInt(t3[0], 10), direction: t3[0].indexOf("/") > 0 ? t3[0].split("/")[1] : "sendrecv", uri: t3[1], attributes: t3.slice(2).join(" ") };
          }, t2.writeExtmap = function(e3) {
            return "a=extmap:" + (e3.id || e3.preferredId) + (e3.direction && "sendrecv" !== e3.direction ? "/" + e3.direction : "") + " " + e3.uri + (e3.attributes ? " " + e3.attributes : "") + "\r\n";
          }, t2.parseFmtp = function(e3) {
            const t3 = {};
            let n2;
            const i2 = e3.substring(e3.indexOf(" ") + 1).split(";");
            for (let e4 = 0; e4 < i2.length; e4++) n2 = i2[e4].trim().split("="), t3[n2[0].trim()] = n2[1];
            return t3;
          }, t2.writeFmtp = function(e3) {
            let t3 = "", n2 = e3.payloadType;
            if (void 0 !== e3.preferredPayloadType && (n2 = e3.preferredPayloadType), e3.parameters && Object.keys(e3.parameters).length) {
              const i2 = [];
              Object.keys(e3.parameters).forEach((t4) => {
                void 0 !== e3.parameters[t4] ? i2.push(t4 + "=" + e3.parameters[t4]) : i2.push(t4);
              }), t3 += "a=fmtp:" + n2 + " " + i2.join(";") + "\r\n";
            }
            return t3;
          }, t2.parseRtcpFb = function(e3) {
            const t3 = e3.substring(e3.indexOf(" ") + 1).split(" ");
            return { type: t3.shift(), parameter: t3.join(" ") };
          }, t2.writeRtcpFb = function(e3) {
            let t3 = "", n2 = e3.payloadType;
            return void 0 !== e3.preferredPayloadType && (n2 = e3.preferredPayloadType), e3.rtcpFeedback && e3.rtcpFeedback.length && e3.rtcpFeedback.forEach((e4) => {
              t3 += "a=rtcp-fb:" + n2 + " " + e4.type + (e4.parameter && e4.parameter.length ? " " + e4.parameter : "") + "\r\n";
            }), t3;
          }, t2.parseSsrcMedia = function(e3) {
            const t3 = e3.indexOf(" "), n2 = { ssrc: parseInt(e3.substring(7, t3), 10) }, i2 = e3.indexOf(":", t3);
            return i2 > -1 ? (n2.attribute = e3.substring(t3 + 1, i2), n2.value = e3.substring(i2 + 1)) : n2.attribute = e3.substring(t3 + 1), n2;
          }, t2.parseSsrcGroup = function(e3) {
            const t3 = e3.substring(13).split(" ");
            return { semantics: t3.shift(), ssrcs: t3.map((e4) => parseInt(e4, 10)) };
          }, t2.getMid = function(e3) {
            const n2 = t2.matchPrefix(e3, "a=mid:")[0];
            if (n2) return n2.substring(6);
          }, t2.parseFingerprint = function(e3) {
            const t3 = e3.substring(14).split(" ");
            return { algorithm: t3[0].toLowerCase(), value: t3[1].toUpperCase() };
          }, t2.getDtlsParameters = function(e3, n2) {
            return { role: "auto", fingerprints: t2.matchPrefix(e3 + n2, "a=fingerprint:").map(t2.parseFingerprint) };
          }, t2.writeDtlsParameters = function(e3, t3) {
            let n2 = "a=setup:" + t3 + "\r\n";
            return e3.fingerprints.forEach((e4) => {
              n2 += "a=fingerprint:" + e4.algorithm + " " + e4.value + "\r\n";
            }), n2;
          }, t2.parseCryptoLine = function(e3) {
            const t3 = e3.substring(9).split(" ");
            return { tag: parseInt(t3[0], 10), cryptoSuite: t3[1], keyParams: t3[2], sessionParams: t3.slice(3) };
          }, t2.writeCryptoLine = function(e3) {
            return "a=crypto:" + e3.tag + " " + e3.cryptoSuite + " " + ("object" == typeof e3.keyParams ? t2.writeCryptoKeyParams(e3.keyParams) : e3.keyParams) + (e3.sessionParams ? " " + e3.sessionParams.join(" ") : "") + "\r\n";
          }, t2.parseCryptoKeyParams = function(e3) {
            if (0 !== e3.indexOf("inline:")) return null;
            const t3 = e3.substring(7).split("|");
            return { keyMethod: "inline", keySalt: t3[0], lifeTime: t3[1], mkiValue: t3[2] ? t3[2].split(":")[0] : void 0, mkiLength: t3[2] ? t3[2].split(":")[1] : void 0 };
          }, t2.writeCryptoKeyParams = function(e3) {
            return e3.keyMethod + ":" + e3.keySalt + (e3.lifeTime ? "|" + e3.lifeTime : "") + (e3.mkiValue && e3.mkiLength ? "|" + e3.mkiValue + ":" + e3.mkiLength : "");
          }, t2.getCryptoParameters = function(e3, n2) {
            return t2.matchPrefix(e3 + n2, "a=crypto:").map(t2.parseCryptoLine);
          }, t2.getIceParameters = function(e3, n2) {
            const i2 = t2.matchPrefix(e3 + n2, "a=ice-ufrag:")[0], s2 = t2.matchPrefix(e3 + n2, "a=ice-pwd:")[0];
            return i2 && s2 ? { usernameFragment: i2.substring(12), password: s2.substring(10) } : null;
          }, t2.writeIceParameters = function(e3) {
            let t3 = "a=ice-ufrag:" + e3.usernameFragment + "\r\na=ice-pwd:" + e3.password + "\r\n";
            return e3.iceLite && (t3 += "a=ice-lite\r\n"), t3;
          }, t2.parseRtpParameters = function(e3) {
            const n2 = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] }, i2 = t2.splitLines(e3)[0].split(" ");
            n2.profile = i2[2];
            for (let s3 = 3; s3 < i2.length; s3++) {
              const o2 = i2[s3], r2 = t2.matchPrefix(e3, "a=rtpmap:" + o2 + " ")[0];
              if (r2) {
                const i3 = t2.parseRtpMap(r2), s4 = t2.matchPrefix(e3, "a=fmtp:" + o2 + " ");
                switch (i3.parameters = s4.length ? t2.parseFmtp(s4[0]) : {}, i3.rtcpFeedback = t2.matchPrefix(e3, "a=rtcp-fb:" + o2 + " ").map(t2.parseRtcpFb), n2.codecs.push(i3), i3.name.toUpperCase()) {
                  case "RED":
                  case "ULPFEC":
                    n2.fecMechanisms.push(i3.name.toUpperCase());
                }
              }
            }
            t2.matchPrefix(e3, "a=extmap:").forEach((e4) => {
              n2.headerExtensions.push(t2.parseExtmap(e4));
            });
            const s2 = t2.matchPrefix(e3, "a=rtcp-fb:* ").map(t2.parseRtcpFb);
            return n2.codecs.forEach((e4) => {
              s2.forEach((t3) => {
                e4.rtcpFeedback.find((e5) => e5.type === t3.type && e5.parameter === t3.parameter) || e4.rtcpFeedback.push(t3);
              });
            }), n2;
          }, t2.writeRtpDescription = function(e3, n2) {
            let i2 = "";
            i2 += "m=" + e3 + " ", i2 += n2.codecs.length > 0 ? "9" : "0", i2 += " " + (n2.profile || "UDP/TLS/RTP/SAVPF") + " ", i2 += n2.codecs.map((e4) => void 0 !== e4.preferredPayloadType ? e4.preferredPayloadType : e4.payloadType).join(" ") + "\r\n", i2 += "c=IN IP4 0.0.0.0\r\n", i2 += "a=rtcp:9 IN IP4 0.0.0.0\r\n", n2.codecs.forEach((e4) => {
              i2 += t2.writeRtpMap(e4), i2 += t2.writeFmtp(e4), i2 += t2.writeRtcpFb(e4);
            });
            let s2 = 0;
            return n2.codecs.forEach((e4) => {
              e4.maxptime > s2 && (s2 = e4.maxptime);
            }), s2 > 0 && (i2 += "a=maxptime:" + s2 + "\r\n"), n2.headerExtensions && n2.headerExtensions.forEach((e4) => {
              i2 += t2.writeExtmap(e4);
            }), i2;
          }, t2.parseRtpEncodingParameters = function(e3) {
            const n2 = [], i2 = t2.parseRtpParameters(e3), s2 = -1 !== i2.fecMechanisms.indexOf("RED"), o2 = -1 !== i2.fecMechanisms.indexOf("ULPFEC"), r2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute), a2 = r2.length > 0 && r2[0].ssrc;
            let c2;
            const d2 = t2.matchPrefix(e3, "a=ssrc-group:FID").map((e4) => e4.substring(17).split(" ").map((e5) => parseInt(e5, 10)));
            d2.length > 0 && d2[0].length > 1 && d2[0][0] === a2 && (c2 = d2[0][1]), i2.codecs.forEach((e4) => {
              if ("RTX" === e4.name.toUpperCase() && e4.parameters.apt) {
                let t3 = { ssrc: a2, codecPayloadType: parseInt(e4.parameters.apt, 10) };
                a2 && c2 && (t3.rtx = { ssrc: c2 }), n2.push(t3), s2 && (t3 = JSON.parse(JSON.stringify(t3)), t3.fec = { ssrc: a2, mechanism: o2 ? "red+ulpfec" : "red" }, n2.push(t3));
              }
            }), 0 === n2.length && a2 && n2.push({ ssrc: a2 });
            let l2 = t2.matchPrefix(e3, "b=");
            return l2.length && (l2 = 0 === l2[0].indexOf("b=TIAS:") ? parseInt(l2[0].substring(7), 10) : 0 === l2[0].indexOf("b=AS:") ? 1e3 * parseInt(l2[0].substring(5), 10) * 0.95 - 16e3 : void 0, n2.forEach((e4) => {
              e4.maxBitrate = l2;
            })), n2;
          }, t2.parseRtcpParameters = function(e3) {
            const n2 = {}, i2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute)[0];
            i2 && (n2.cname = i2.value, n2.ssrc = i2.ssrc);
            const s2 = t2.matchPrefix(e3, "a=rtcp-rsize");
            n2.reducedSize = s2.length > 0, n2.compound = 0 === s2.length;
            const o2 = t2.matchPrefix(e3, "a=rtcp-mux");
            return n2.mux = o2.length > 0, n2;
          }, t2.writeRtcpParameters = function(e3) {
            let t3 = "";
            return e3.reducedSize && (t3 += "a=rtcp-rsize\r\n"), e3.mux && (t3 += "a=rtcp-mux\r\n"), void 0 !== e3.ssrc && e3.cname && (t3 += "a=ssrc:" + e3.ssrc + " cname:" + e3.cname + "\r\n"), t3;
          }, t2.parseMsid = function(e3) {
            let n2;
            const i2 = t2.matchPrefix(e3, "a=msid:");
            if (1 === i2.length) return n2 = i2[0].substring(7).split(" "), { stream: n2[0], track: n2[1] };
            const s2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "msid" === e4.attribute);
            return s2.length > 0 ? (n2 = s2[0].value.split(" "), { stream: n2[0], track: n2[1] }) : void 0;
          }, t2.parseSctpDescription = function(e3) {
            const n2 = t2.parseMLine(e3), i2 = t2.matchPrefix(e3, "a=max-message-size:");
            let s2;
            i2.length > 0 && (s2 = parseInt(i2[0].substring(19), 10)), isNaN(s2) && (s2 = 65536);
            const o2 = t2.matchPrefix(e3, "a=sctp-port:");
            if (o2.length > 0) return { port: parseInt(o2[0].substring(12), 10), protocol: n2.fmt, maxMessageSize: s2 };
            const r2 = t2.matchPrefix(e3, "a=sctpmap:");
            if (r2.length > 0) {
              const e4 = r2[0].substring(10).split(" ");
              return { port: parseInt(e4[0], 10), protocol: e4[1], maxMessageSize: s2 };
            }
          }, t2.writeSctpDescription = function(e3, t3) {
            let n2 = [];
            return n2 = "DTLS/SCTP" !== e3.protocol ? ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.protocol + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctp-port:" + t3.port + "\r\n"] : ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.port + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctpmap:" + t3.port + " " + t3.protocol + " 65535\r\n"], void 0 !== t3.maxMessageSize && n2.push("a=max-message-size:" + t3.maxMessageSize + "\r\n"), n2.join("");
          }, t2.generateSessionId = function() {
            return Math.random().toString().substr(2, 22);
          }, t2.writeSessionBoilerplate = function(e3, n2, i2) {
            let s2;
            const o2 = void 0 !== n2 ? n2 : 2;
            return s2 = e3 || t2.generateSessionId(), "v=0\r\no=" + (i2 || "thisisadapterortc") + " " + s2 + " " + o2 + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
          }, t2.getDirection = function(e3, n2) {
            const i2 = t2.splitLines(e3);
            for (let e4 = 0; e4 < i2.length; e4++) switch (i2[e4]) {
              case "a=sendrecv":
              case "a=sendonly":
              case "a=recvonly":
              case "a=inactive":
                return i2[e4].substring(2);
            }
            return n2 ? t2.getDirection(n2) : "sendrecv";
          }, t2.getKind = function(e3) {
            return t2.splitLines(e3)[0].split(" ")[0].substring(2);
          }, t2.isRejected = function(e3) {
            return "0" === e3.split(" ", 2)[1];
          }, t2.parseMLine = function(e3) {
            const n2 = t2.splitLines(e3)[0].substring(2).split(" ");
            return { kind: n2[0], port: parseInt(n2[1], 10), protocol: n2[2], fmt: n2.slice(3).join(" ") };
          }, t2.parseOLine = function(e3) {
            const n2 = t2.matchPrefix(e3, "o=")[0].substring(2).split(" ");
            return { username: n2[0], sessionId: n2[1], sessionVersion: parseInt(n2[2], 10), netType: n2[3], addressType: n2[4], address: n2[5] };
          }, t2.isValidSDP = function(e3) {
            if ("string" != typeof e3 || 0 === e3.length) return false;
            const n2 = t2.splitLines(e3);
            for (let e4 = 0; e4 < n2.length; e4++) if (n2[e4].length < 2 || "=" !== n2[e4].charAt(1)) return false;
            return true;
          }, e2.exports = t2;
        }(Qi)), Qi.exports), Xi = Un(Yi), Zi = t({ __proto__: null, default: Xi }, [Yi]);
        function $i(e2) {
          if (!e2.RTCIceCandidate || e2.RTCIceCandidate && "foundation" in e2.RTCIceCandidate.prototype) return;
          const t2 = e2.RTCIceCandidate;
          e2.RTCIceCandidate = function(e3) {
            if ("object" == typeof e3 && e3.candidate && 0 === e3.candidate.indexOf("a=") && ((e3 = JSON.parse(JSON.stringify(e3))).candidate = e3.candidate.substring(2)), e3.candidate && e3.candidate.length) {
              const n2 = new t2(e3), i2 = Xi.parseCandidate(e3.candidate);
              for (const e4 in i2) e4 in n2 || Object.defineProperty(n2, e4, { value: i2[e4] });
              return n2.toJSON = function() {
                return { candidate: n2.candidate, sdpMid: n2.sdpMid, sdpMLineIndex: n2.sdpMLineIndex, usernameFragment: n2.usernameFragment };
              }, n2;
            }
            return new t2(e3);
          }, e2.RTCIceCandidate.prototype = t2.prototype, ri(e2, "icecandidate", (t3) => (t3.candidate && Object.defineProperty(t3, "candidate", { value: new e2.RTCIceCandidate(t3.candidate), writable: "false" }), t3));
        }
        function es(e2) {
          !e2.RTCIceCandidate || e2.RTCIceCandidate && "relayProtocol" in e2.RTCIceCandidate.prototype || ri(e2, "icecandidate", (e3) => {
            if (e3.candidate) {
              const t2 = Xi.parseCandidate(e3.candidate.candidate);
              "relay" === t2.type && (e3.candidate.relayProtocol = { 0: "tls", 1: "tcp", 2: "udp" }[t2.priority >> 24]);
            }
            return e3;
          });
        }
        function ts(e2, t2) {
          if (!e2.RTCPeerConnection) return;
          "sctp" in e2.RTCPeerConnection.prototype || Object.defineProperty(e2.RTCPeerConnection.prototype, "sctp", { get() {
            return void 0 === this._sctp ? null : this._sctp;
          } });
          const n2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            if (this._sctp = null, "chrome" === t2.browser && t2.version >= 76) {
              const { sdpSemantics: e3 } = this.getConfiguration();
              "plan-b" === e3 && Object.defineProperty(this, "sctp", { get() {
                return void 0 === this._sctp ? null : this._sctp;
              }, enumerable: true, configurable: true });
            }
            if (function(e3) {
              if (!e3 || !e3.sdp) return false;
              const t3 = Xi.splitSections(e3.sdp);
              return t3.shift(), t3.some((e4) => {
                const t4 = Xi.parseMLine(e4);
                return t4 && "application" === t4.kind && -1 !== t4.protocol.indexOf("SCTP");
              });
            }(arguments[0])) {
              const e3 = function(e4) {
                const t3 = e4.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
                if (null === t3 || t3.length < 2) return -1;
                const n4 = parseInt(t3[1], 10);
                return n4 != n4 ? -1 : n4;
              }(arguments[0]), n3 = function(e4) {
                let n4 = 65536;
                return "firefox" === t2.browser && (n4 = t2.version < 57 ? -1 === e4 ? 16384 : 2147483637 : t2.version < 60 ? 57 === t2.version ? 65535 : 65536 : 2147483637), n4;
              }(e3), i2 = function(e4, n4) {
                let i3 = 65536;
                "firefox" === t2.browser && 57 === t2.version && (i3 = 65535);
                const s3 = Xi.matchPrefix(e4.sdp, "a=max-message-size:");
                return s3.length > 0 ? i3 = parseInt(s3[0].substring(19), 10) : "firefox" === t2.browser && -1 !== n4 && (i3 = 2147483637), i3;
              }(arguments[0], e3);
              let s2;
              s2 = 0 === n3 && 0 === i2 ? Number.POSITIVE_INFINITY : 0 === n3 || 0 === i2 ? Math.max(n3, i2) : Math.min(n3, i2);
              const o2 = {};
              Object.defineProperty(o2, "maxMessageSize", { get: () => s2 }), this._sctp = o2;
            }
            return n2.apply(this, arguments);
          };
        }
        function ns(e2) {
          if (!e2.RTCPeerConnection || !("createDataChannel" in e2.RTCPeerConnection.prototype)) return;
          function t2(e3, t3) {
            const n3 = e3.send;
            e3.send = function() {
              const i2 = arguments[0], s2 = i2.length || i2.size || i2.byteLength;
              if ("open" === e3.readyState && t3.sctp && s2 > t3.sctp.maxMessageSize) throw new TypeError("Message too large (can send a maximum of " + t3.sctp.maxMessageSize + " bytes)");
              return n3.apply(e3, arguments);
            };
          }
          const n2 = e2.RTCPeerConnection.prototype.createDataChannel;
          e2.RTCPeerConnection.prototype.createDataChannel = function() {
            const e3 = n2.apply(this, arguments);
            return t2(e3, this), e3;
          }, ri(e2, "datachannel", (e3) => (t2(e3.channel, e3.target), e3));
        }
        function is(e2) {
          if (!e2.RTCPeerConnection || "connectionState" in e2.RTCPeerConnection.prototype) return;
          const t2 = e2.RTCPeerConnection.prototype;
          Object.defineProperty(t2, "connectionState", { get() {
            return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2, "onconnectionstatechange", { get() {
            return this._onconnectionstatechange || null;
          }, set(e3) {
            this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e3 && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e3);
          }, enumerable: true, configurable: true }), ["setLocalDescription", "setRemoteDescription"].forEach((e3) => {
            const n2 = t2[e3];
            t2[e3] = function() {
              return this._connectionstatechangepoly || (this._connectionstatechangepoly = (e4) => {
                const t3 = e4.target;
                if (t3._lastConnectionState !== t3.connectionState) {
                  t3._lastConnectionState = t3.connectionState;
                  const n3 = new Event("connectionstatechange", e4);
                  t3.dispatchEvent(n3);
                }
                return e4;
              }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), n2.apply(this, arguments);
            };
          });
        }
        function ss(e2, t2) {
          if (!e2.RTCPeerConnection) return;
          if ("chrome" === t2.browser && t2.version >= 71) return;
          if ("safari" === t2.browser && t2.version >= 605) return;
          const n2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function(t3) {
            if (t3 && t3.sdp && -1 !== t3.sdp.indexOf("\na=extmap-allow-mixed")) {
              const n3 = t3.sdp.split("\n").filter((e3) => "a=extmap-allow-mixed" !== e3.trim()).join("\n");
              e2.RTCSessionDescription && t3 instanceof e2.RTCSessionDescription ? arguments[0] = new e2.RTCSessionDescription({ type: t3.type, sdp: n3 }) : t3.sdp = n3;
            }
            return n2.apply(this, arguments);
          };
        }
        function os(e2, t2) {
          if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype) return;
          const n2 = e2.RTCPeerConnection.prototype.addIceCandidate;
          n2 && 0 !== n2.length && (e2.RTCPeerConnection.prototype.addIceCandidate = function() {
            return arguments[0] ? ("chrome" === t2.browser && t2.version < 78 || "firefox" === t2.browser && t2.version < 68 || "safari" === t2.browser) && arguments[0] && "" === arguments[0].candidate ? Promise.resolve() : n2.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve());
          });
        }
        function rs(e2, t2) {
          if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype) return;
          const n2 = e2.RTCPeerConnection.prototype.setLocalDescription;
          n2 && 0 !== n2.length && (e2.RTCPeerConnection.prototype.setLocalDescription = function() {
            let e3 = arguments[0] || {};
            if ("object" != typeof e3 || e3.type && e3.sdp) return n2.apply(this, arguments);
            if (e3 = { type: e3.type, sdp: e3.sdp }, !e3.type) switch (this.signalingState) {
              case "stable":
              case "have-local-offer":
              case "have-remote-pranswer":
                e3.type = "offer";
                break;
              default:
                e3.type = "answer";
            }
            if (e3.sdp || "offer" !== e3.type && "answer" !== e3.type) return n2.apply(this, [e3]);
            return ("offer" === e3.type ? this.createOffer : this.createAnswer).apply(this).then((e4) => n2.apply(this, [e4]));
          });
        }
        var as = Object.freeze({ __proto__: null, removeExtmapAllowMixed: ss, shimAddIceCandidateNullOrEmpty: os, shimConnectionState: is, shimMaxMessageSize: ts, shimParameterlessSetLocalDescription: rs, shimRTCIceCandidate: $i, shimRTCIceCandidateRelayProtocol: es, shimSendThrowTypeError: ns });
        !function() {
          let { window: e2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { shimChrome: true, shimFirefox: true, shimSafari: true };
          const n2 = di, i2 = function(e3) {
            const t3 = { browser: null, version: null };
            if (void 0 === e3 || !e3.navigator || !e3.navigator.userAgent) return t3.browser = "Not a browser.", t3;
            const { navigator: n3 } = e3;
            if (n3.userAgentData && n3.userAgentData.brands) {
              const e4 = n3.userAgentData.brands.find((e5) => "Chromium" === e5.brand);
              if (e4) return { browser: "chrome", version: parseInt(e4.version, 10) };
            }
            if (n3.mozGetUserMedia) t3.browser = "firefox", t3.version = oi(n3.userAgent, /Firefox\/(\d+)\./, 1);
            else if (n3.webkitGetUserMedia || false === e3.isSecureContext && e3.webkitRTCPeerConnection) t3.browser = "chrome", t3.version = oi(n3.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
            else {
              if (!e3.RTCPeerConnection || !n3.userAgent.match(/AppleWebKit\/(\d+)\./)) return t3.browser = "Not a supported browser.", t3;
              t3.browser = "safari", t3.version = oi(n3.userAgent, /AppleWebKit\/(\d+)\./, 1), t3.supportsUnifiedPlan = e3.RTCRtpTransceiver && "currentDirection" in e3.RTCRtpTransceiver.prototype;
            }
            return t3;
          }(e2), s2 = { browserDetails: i2, commonShim: as, extractVersion: oi, disableLog: ai, disableWarnings: ci, sdp: Zi };
          switch (i2.browser) {
            case "chrome":
              if (!wi || !Si || !t2.shimChrome) return n2("Chrome shim is not included in this adapter release."), s2;
              if (null === i2.version) return n2("Chrome shim can not determine version, not shimming."), s2;
              n2("adapter.js shimming chrome."), s2.browserShim = wi, os(e2, i2), rs(e2), vi(e2, i2), fi(e2), Si(e2, i2), ki(e2), Ci(e2, i2), bi(e2), yi(e2), Ei(e2, i2), $i(e2), es(e2), is(e2), ts(e2, i2), ns(e2), ss(e2, i2);
              break;
            case "firefox":
              if (!Ui || !Ii || !t2.shimFirefox) return n2("Firefox shim is not included in this adapter release."), s2;
              n2("adapter.js shimming firefox."), s2.browserShim = Ui, os(e2, i2), rs(e2), Pi(e2, i2), Ii(e2, i2), Ri(e2), xi(e2), Oi(e2), Di(e2), Mi(e2), Ni(e2), _i(e2), Ai(e2), Li(e2), $i(e2), is(e2), ts(e2, i2), ns(e2);
              break;
            case "safari":
              if (!Ji || !t2.shimSafari) return n2("Safari shim is not included in this adapter release."), s2;
              n2("adapter.js shimming safari."), s2.browserShim = Ji, os(e2, i2), rs(e2), Ki(e2), Hi(e2), Bi(e2), ji(e2), Fi(e2), Wi(e2), Vi(e2), Gi(e2), $i(e2), es(e2), ts(e2, i2), ns(e2), ss(e2, i2);
              break;
            default:
              n2("Unsupported browser!");
          }
        }({ window: "undefined" == typeof window ? void 0 : window });
        const cs = "AES-GCM", ds = "lk_e2ee", ls = { sharedKey: false, ratchetSalt: "LKFrameEncryptionKey", ratchetWindowSize: 8, failureTolerance: 10, keyringSize: 16 };
        var us, hs;
        function ps() {
          return gs() || ms();
        }
        function ms() {
          return void 0 !== window.RTCRtpScriptTransform;
        }
        function gs() {
          return void 0 !== window.RTCRtpSender && void 0 !== window.RTCRtpSender.prototype.createEncodedStreams;
        }
        function vs(e2) {
          return Xn(this, void 0, void 0, function* () {
            let t2 = new TextEncoder();
            return yield crypto.subtle.importKey("raw", t2.encode(e2), { name: "PBKDF2" }, false, ["deriveBits", "deriveKey"]);
          });
        }
        function fs(e2) {
          return Xn(this, void 0, void 0, function* () {
            return yield crypto.subtle.importKey("raw", e2, "HKDF", false, ["deriveBits", "deriveKey"]);
          });
        }
        function ks(e2, t2) {
          const n2 = new TextEncoder().encode(t2);
          switch (e2) {
            case "HKDF":
              return { name: "HKDF", salt: n2, hash: "SHA-256", info: new ArrayBuffer(128) };
            case "PBKDF2":
              return { name: "PBKDF2", salt: n2, hash: "SHA-256", iterations: 1e5 };
            default:
              throw new Error("algorithm ".concat(e2, " is currently unsupported"));
          }
        }
        e.KeyProviderEvent = void 0, (us = e.KeyProviderEvent || (e.KeyProviderEvent = {})).SetKey = "setKey", us.RatchetRequest = "ratchetRequest", us.KeyRatcheted = "keyRatcheted", e.KeyHandlerEvent = void 0, (e.KeyHandlerEvent || (e.KeyHandlerEvent = {})).KeyRatcheted = "keyRatcheted", e.EncryptionEvent = void 0, (hs = e.EncryptionEvent || (e.EncryptionEvent = {})).ParticipantEncryptionStatusChanged = "participantEncryptionStatusChanged", hs.EncryptionError = "encryptionError", e.CryptorEvent = void 0, (e.CryptorEvent || (e.CryptorEvent = {})).Error = "cryptorError";
        class bs extends ni.EventEmitter {
          constructor() {
            let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            super(), this.onKeyRatcheted = (e2, t3, n2) => {
              Wn.debug("key ratcheted event received", { ratchetResult: e2, participantId: t3, keyIndex: n2 });
            }, this.keyInfoMap = /* @__PURE__ */ new Map(), this.options = Object.assign(Object.assign({}, ls), t2), this.on(e.KeyProviderEvent.KeyRatcheted, this.onKeyRatcheted);
          }
          onSetEncryptionKey(t2, n2, i2) {
            const s2 = { key: t2, participantIdentity: n2, keyIndex: i2 };
            if (!this.options.sharedKey && !n2) throw new Error("participant identity needs to be passed for encryption key if sharedKey option is false");
            this.keyInfoMap.set("".concat(null != n2 ? n2 : "shared", "-").concat(null != i2 ? i2 : 0), s2), this.emit(e.KeyProviderEvent.SetKey, s2);
          }
          getKeys() {
            return Array.from(this.keyInfoMap.values());
          }
          getOptions() {
            return this.options;
          }
          ratchetKey(t2, n2) {
            this.emit(e.KeyProviderEvent.RatchetRequest, t2, n2);
          }
        }
        class ys extends Error {
          constructor(e2, t2) {
            super(t2 || "an error has occured"), this.name = "LiveKitError", this.code = e2;
          }
        }
        var Ts, Cs, Ss, Es, ws, Ps, Rs;
        e.ConnectionErrorReason = void 0, (Ts = e.ConnectionErrorReason || (e.ConnectionErrorReason = {}))[Ts.NotAllowed = 0] = "NotAllowed", Ts[Ts.ServerUnreachable = 1] = "ServerUnreachable", Ts[Ts.InternalError = 2] = "InternalError", Ts[Ts.Cancelled = 3] = "Cancelled", Ts[Ts.LeaveRequest = 4] = "LeaveRequest";
        class Is extends ys {
          constructor(t2, n2, i2, s2) {
            super(1, t2), this.name = "ConnectionError", this.status = i2, this.reason = n2, this.context = s2, this.reasonName = e.ConnectionErrorReason[n2];
          }
        }
        class Os extends ys {
          constructor(e2) {
            super(21, null != e2 ? e2 : "device is unsupported"), this.name = "DeviceUnsupportedError";
          }
        }
        class Ds extends ys {
          constructor(e2) {
            super(20, null != e2 ? e2 : "track is invalid"), this.name = "TrackInvalidError";
          }
        }
        class xs extends ys {
          constructor(e2) {
            super(10, null != e2 ? e2 : "unsupported server"), this.name = "UnsupportedServer";
          }
        }
        class Ms extends ys {
          constructor(e2) {
            super(12, null != e2 ? e2 : "unexpected connection state"), this.name = "UnexpectedConnectionState";
          }
        }
        class Ns extends ys {
          constructor(e2) {
            super(13, null != e2 ? e2 : "unable to negotiate"), this.name = "NegotiationError";
          }
        }
        class _s extends ys {
          constructor(e2, t2) {
            super(15, e2), this.name = "PublishTrackError", this.status = t2;
          }
        }
        class As extends ys {
          constructor(e2, t2) {
            super(15, e2), this.reason = t2, this.reasonName = "string" == typeof t2 ? t2 : An[t2];
          }
        }
        e.MediaDeviceFailure = void 0, (Cs = e.MediaDeviceFailure || (e.MediaDeviceFailure = {})).PermissionDenied = "PermissionDenied", Cs.NotFound = "NotFound", Cs.DeviceInUse = "DeviceInUse", Cs.Other = "Other", function(e2) {
          e2.getFailure = function(t2) {
            if (t2 && "name" in t2) return "NotFoundError" === t2.name || "DevicesNotFoundError" === t2.name ? e2.NotFound : "NotAllowedError" === t2.name || "PermissionDeniedError" === t2.name ? e2.PermissionDenied : "NotReadableError" === t2.name || "TrackStartError" === t2.name ? e2.DeviceInUse : e2.Other;
          };
        }(e.MediaDeviceFailure || (e.MediaDeviceFailure = {})), e.CryptorErrorReason = void 0, (Ss = e.CryptorErrorReason || (e.CryptorErrorReason = {}))[Ss.InvalidKey = 0] = "InvalidKey", Ss[Ss.MissingKey = 1] = "MissingKey", Ss[Ss.InternalError = 2] = "InternalError";
        e.RoomEvent = void 0, (Es = e.RoomEvent || (e.RoomEvent = {})).Connected = "connected", Es.Reconnecting = "reconnecting", Es.SignalReconnecting = "signalReconnecting", Es.Reconnected = "reconnected", Es.Disconnected = "disconnected", Es.ConnectionStateChanged = "connectionStateChanged", Es.Moved = "moved", Es.MediaDevicesChanged = "mediaDevicesChanged", Es.ParticipantConnected = "participantConnected", Es.ParticipantDisconnected = "participantDisconnected", Es.TrackPublished = "trackPublished", Es.TrackSubscribed = "trackSubscribed", Es.TrackSubscriptionFailed = "trackSubscriptionFailed", Es.TrackUnpublished = "trackUnpublished", Es.TrackUnsubscribed = "trackUnsubscribed", Es.TrackMuted = "trackMuted", Es.TrackUnmuted = "trackUnmuted", Es.LocalTrackPublished = "localTrackPublished", Es.LocalTrackUnpublished = "localTrackUnpublished", Es.LocalAudioSilenceDetected = "localAudioSilenceDetected", Es.ActiveSpeakersChanged = "activeSpeakersChanged", Es.ParticipantMetadataChanged = "participantMetadataChanged", Es.ParticipantNameChanged = "participantNameChanged", Es.ParticipantAttributesChanged = "participantAttributesChanged", Es.ParticipantActive = "participantActive", Es.RoomMetadataChanged = "roomMetadataChanged", Es.DataReceived = "dataReceived", Es.SipDTMFReceived = "sipDTMFReceived", Es.TranscriptionReceived = "transcriptionReceived", Es.ConnectionQualityChanged = "connectionQualityChanged", Es.TrackStreamStateChanged = "trackStreamStateChanged", Es.TrackSubscriptionPermissionChanged = "trackSubscriptionPermissionChanged", Es.TrackSubscriptionStatusChanged = "trackSubscriptionStatusChanged", Es.AudioPlaybackStatusChanged = "audioPlaybackChanged", Es.VideoPlaybackStatusChanged = "videoPlaybackChanged", Es.MediaDevicesError = "mediaDevicesError", Es.ParticipantPermissionsChanged = "participantPermissionsChanged", Es.SignalConnected = "signalConnected", Es.RecordingStatusChanged = "recordingStatusChanged", Es.ParticipantEncryptionStatusChanged = "participantEncryptionStatusChanged", Es.EncryptionError = "encryptionError", Es.DCBufferStatusChanged = "dcBufferStatusChanged", Es.ActiveDeviceChanged = "activeDeviceChanged", Es.ChatMessage = "chatMessage", Es.LocalTrackSubscribed = "localTrackSubscribed", Es.MetricsReceived = "metricsReceived", e.ParticipantEvent = void 0, (ws = e.ParticipantEvent || (e.ParticipantEvent = {})).TrackPublished = "trackPublished", ws.TrackSubscribed = "trackSubscribed", ws.TrackSubscriptionFailed = "trackSubscriptionFailed", ws.TrackUnpublished = "trackUnpublished", ws.TrackUnsubscribed = "trackUnsubscribed", ws.TrackMuted = "trackMuted", ws.TrackUnmuted = "trackUnmuted", ws.LocalTrackPublished = "localTrackPublished", ws.LocalTrackUnpublished = "localTrackUnpublished", ws.ParticipantMetadataChanged = "participantMetadataChanged", ws.ParticipantNameChanged = "participantNameChanged", ws.DataReceived = "dataReceived", ws.SipDTMFReceived = "sipDTMFReceived", ws.TranscriptionReceived = "transcriptionReceived", ws.IsSpeakingChanged = "isSpeakingChanged", ws.ConnectionQualityChanged = "connectionQualityChanged", ws.TrackStreamStateChanged = "trackStreamStateChanged", ws.TrackSubscriptionPermissionChanged = "trackSubscriptionPermissionChanged", ws.TrackSubscriptionStatusChanged = "trackSubscriptionStatusChanged", ws.MediaDevicesError = "mediaDevicesError", ws.AudioStreamAcquired = "audioStreamAcquired", ws.ParticipantPermissionsChanged = "participantPermissionsChanged", ws.PCTrackAdded = "pcTrackAdded", ws.AttributesChanged = "attributesChanged", ws.LocalTrackSubscribed = "localTrackSubscribed", ws.ChatMessage = "chatMessage", ws.Active = "active", e.EngineEvent = void 0, (Ps = e.EngineEvent || (e.EngineEvent = {})).TransportsCreated = "transportsCreated", Ps.Connected = "connected", Ps.Disconnected = "disconnected", Ps.Resuming = "resuming", Ps.Resumed = "resumed", Ps.Restarting = "restarting", Ps.Restarted = "restarted", Ps.SignalResumed = "signalResumed", Ps.SignalRestarted = "signalRestarted", Ps.Closing = "closing", Ps.MediaTrackAdded = "mediaTrackAdded", Ps.ActiveSpeakersUpdate = "activeSpeakersUpdate", Ps.DataPacketReceived = "dataPacketReceived", Ps.RTPVideoMapUpdate = "rtpVideoMapUpdate", Ps.DCBufferStatusChanged = "dcBufferStatusChanged", Ps.ParticipantUpdate = "participantUpdate", Ps.RoomUpdate = "roomUpdate", Ps.SpeakersChanged = "speakersChanged", Ps.StreamStateChanged = "streamStateChanged", Ps.ConnectionQualityUpdate = "connectionQualityUpdate", Ps.SubscriptionError = "subscriptionError", Ps.SubscriptionPermissionUpdate = "subscriptionPermissionUpdate", Ps.RemoteMute = "remoteMute", Ps.SubscribedQualityUpdate = "subscribedQualityUpdate", Ps.LocalTrackUnpublished = "localTrackUnpublished", Ps.LocalTrackSubscribed = "localTrackSubscribed", Ps.Offline = "offline", Ps.SignalRequestResponse = "signalRequestResponse", Ps.SignalConnected = "signalConnected", Ps.RoomMoved = "roomMoved", e.TrackEvent = void 0, (Rs = e.TrackEvent || (e.TrackEvent = {})).Message = "message", Rs.Muted = "muted", Rs.Unmuted = "unmuted", Rs.Restarted = "restarted", Rs.Ended = "ended", Rs.Subscribed = "subscribed", Rs.Unsubscribed = "unsubscribed", Rs.UpdateSettings = "updateSettings", Rs.UpdateSubscription = "updateSubscription", Rs.AudioPlaybackStarted = "audioPlaybackStarted", Rs.AudioPlaybackFailed = "audioPlaybackFailed", Rs.AudioSilenceDetected = "audioSilenceDetected", Rs.VisibilityChanged = "visibilityChanged", Rs.VideoDimensionsChanged = "videoDimensionsChanged", Rs.VideoPlaybackStarted = "videoPlaybackStarted", Rs.VideoPlaybackFailed = "videoPlaybackFailed", Rs.ElementAttached = "elementAttached", Rs.ElementDetached = "elementDetached", Rs.UpstreamPaused = "upstreamPaused", Rs.UpstreamResumed = "upstreamResumed", Rs.SubscriptionPermissionChanged = "subscriptionPermissionChanged", Rs.SubscriptionStatusChanged = "subscriptionStatusChanged", Rs.SubscriptionFailed = "subscriptionFailed", Rs.TrackProcessorUpdate = "trackProcessorUpdate", Rs.AudioTrackFeatureUpdate = "audioTrackFeatureUpdate", Rs.TranscriptionReceived = "transcriptionReceived", Rs.TimeSyncUpdate = "timeSyncUpdate";
        const Ls = /version\/(\d+(\.?_?\d+)+)/i;
        let Us;
        function js(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (void 0 === e2 && "undefined" == typeof navigator) return;
          const n2 = (null != e2 ? e2 : navigator.userAgent).toLowerCase();
          if (void 0 === Us || t2) {
            const e3 = Fs.find((e4) => {
              let { test: t3 } = e4;
              return t3.test(n2);
            });
            Us = null == e3 ? void 0 : e3.describe(n2);
          }
          return Us;
        }
        const Fs = [{ test: /firefox|iceweasel|fxios/i, describe: (e2) => ({ name: "Firefox", version: Bs(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e2), os: e2.toLowerCase().includes("fxios") ? "iOS" : void 0, osVersion: Vs(e2) }) }, { test: /chrom|crios|crmo/i, describe: (e2) => ({ name: "Chrome", version: Bs(/(?:chrome|chromium|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e2), os: e2.toLowerCase().includes("crios") ? "iOS" : void 0, osVersion: Vs(e2) }) }, { test: /safari|applewebkit/i, describe: (e2) => ({ name: "Safari", version: Bs(Ls, e2), os: e2.includes("mobile/") ? "iOS" : "macOS", osVersion: Vs(e2) }) }];
        function Bs(e2, t2) {
          let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
          const i2 = t2.match(e2);
          return i2 && i2.length >= n2 && i2[n2] || "";
        }
        function Vs(e2) {
          return e2.includes("mac os") ? Bs(/\(.+?(\d+_\d+(:?_\d+)?)/, e2, 1).replace(/_/g, ".") : void 0;
        }
        const qs = "2.13.0";
        class Ks {
        }
        Ks.setTimeout = function() {
          return setTimeout(...arguments);
        }, Ks.setInterval = function() {
          return setInterval(...arguments);
        }, Ks.clearTimeout = function() {
          return clearTimeout(...arguments);
        }, Ks.clearInterval = function() {
          return clearInterval(...arguments);
        };
        const Ws = [];
        e.VideoQuality = void 0, function(e2) {
          e2[e2.LOW = 0] = "LOW", e2[e2.MEDIUM = 1] = "MEDIUM", e2[e2.HIGH = 2] = "HIGH";
        }(e.VideoQuality || (e.VideoQuality = {}));
        class Hs extends ni.EventEmitter {
          constructor(t2, n2) {
            let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            var s2;
            super(), this.attachedElements = [], this.isMuted = false, this.streamState = Hs.StreamState.Active, this.isInBackground = false, this._currentBitrate = 0, this.log = Wn, this.appVisibilityChangedListener = () => {
              this.backgroundTimeout && clearTimeout(this.backgroundTimeout), "hidden" === document.visibilityState ? this.backgroundTimeout = setTimeout(() => this.handleAppVisibilityChanged(), 5e3) : this.handleAppVisibilityChanged();
            }, this.log = Gn(null !== (s2 = i2.loggerName) && void 0 !== s2 ? s2 : e.LoggerNames.Track), this.loggerContextCb = i2.loggerContextCb, this.setMaxListeners(100), this.kind = n2, this._mediaStreamTrack = t2, this._mediaStreamID = t2.id, this.source = Hs.Source.Unknown;
          }
          get logContext() {
            var e2;
            return Object.assign(Object.assign({}, null === (e2 = this.loggerContextCb) || void 0 === e2 ? void 0 : e2.call(this)), sr(this));
          }
          get currentBitrate() {
            return this._currentBitrate;
          }
          get mediaStreamTrack() {
            return this._mediaStreamTrack;
          }
          get mediaStreamID() {
            return this._mediaStreamID;
          }
          attach(t2) {
            let n2 = "audio";
            this.kind === Hs.Kind.Video && (n2 = "video"), 0 === this.attachedElements.length && this.kind === Hs.Kind.Video && this.addAppVisibilityListener(), t2 || ("audio" === n2 && (Ws.forEach((e2) => {
              null !== e2.parentElement || t2 || (t2 = e2);
            }), t2 && Ws.splice(Ws.indexOf(t2), 1)), t2 || (t2 = document.createElement(n2))), this.attachedElements.includes(t2) || this.attachedElements.push(t2), Gs(this.mediaStreamTrack, t2);
            const i2 = t2.srcObject.getTracks(), s2 = i2.some((e2) => "audio" === e2.kind);
            return t2.play().then(() => {
              this.emit(s2 ? e.TrackEvent.AudioPlaybackStarted : e.TrackEvent.VideoPlaybackStarted);
            }).catch((n3) => {
              "NotAllowedError" === n3.name ? this.emit(s2 ? e.TrackEvent.AudioPlaybackFailed : e.TrackEvent.VideoPlaybackFailed, n3) : "AbortError" === n3.name ? Wn.debug("".concat(s2 ? "audio" : "video", " playback aborted, likely due to new play request")) : Wn.warn("could not playback ".concat(s2 ? "audio" : "video"), n3), s2 && t2 && i2.some((e2) => "video" === e2.kind) && "NotAllowedError" === n3.name && (t2.muted = true, t2.play().catch(() => {
              }));
            }), this.emit(e.TrackEvent.ElementAttached, t2), t2;
          }
          detach(t2) {
            try {
              if (t2) {
                zs(this.mediaStreamTrack, t2);
                const n3 = this.attachedElements.indexOf(t2);
                return n3 >= 0 && (this.attachedElements.splice(n3, 1), this.recycleElement(t2), this.emit(e.TrackEvent.ElementDetached, t2)), t2;
              }
              const n2 = [];
              return this.attachedElements.forEach((t3) => {
                zs(this.mediaStreamTrack, t3), n2.push(t3), this.recycleElement(t3), this.emit(e.TrackEvent.ElementDetached, t3);
              }), this.attachedElements = [], n2;
            } finally {
              0 === this.attachedElements.length && this.removeAppVisibilityListener();
            }
          }
          stop() {
            this.stopMonitor(), this._mediaStreamTrack.stop();
          }
          enable() {
            this._mediaStreamTrack.enabled = true;
          }
          disable() {
            this._mediaStreamTrack.enabled = false;
          }
          stopMonitor() {
            this.monitorInterval && clearInterval(this.monitorInterval), this.timeSyncHandle && cancelAnimationFrame(this.timeSyncHandle);
          }
          updateLoggerOptions(e2) {
            e2.loggerName && (this.log = Gn(e2.loggerName)), e2.loggerContextCb && (this.loggerContextCb = e2.loggerContextCb);
          }
          recycleElement(e2) {
            if (e2 instanceof HTMLAudioElement) {
              let t2 = true;
              e2.pause(), Ws.forEach((e3) => {
                e3.parentElement || (t2 = false);
              }), t2 && Ws.push(e2);
            }
          }
          handleAppVisibilityChanged() {
            return Xn(this, void 0, void 0, function* () {
              this.isInBackground = "hidden" === document.visibilityState, this.isInBackground || this.kind !== Hs.Kind.Video || setTimeout(() => this.attachedElements.forEach((e2) => e2.play().catch(() => {
              })), 0);
            });
          }
          addAppVisibilityListener() {
            vo() ? (this.isInBackground = "hidden" === document.visibilityState, document.addEventListener("visibilitychange", this.appVisibilityChangedListener)) : this.isInBackground = false;
          }
          removeAppVisibilityListener() {
            vo() && document.removeEventListener("visibilitychange", this.appVisibilityChangedListener);
          }
        }
        function Gs(e2, t2) {
          let n2, i2;
          n2 = t2.srcObject instanceof MediaStream ? t2.srcObject : new MediaStream(), i2 = "audio" === e2.kind ? n2.getAudioTracks() : n2.getVideoTracks(), i2.includes(e2) || (i2.forEach((e3) => {
            n2.removeTrack(e3);
          }), n2.addTrack(e2)), po() && t2 instanceof HTMLVideoElement || (t2.autoplay = true), t2.muted = 0 === n2.getAudioTracks().length, t2 instanceof HTMLVideoElement && (t2.playsInline = true), t2.srcObject !== n2 && (t2.srcObject = n2, (po() || ho()) && t2 instanceof HTMLVideoElement && setTimeout(() => {
            t2.srcObject = n2, t2.play().catch(() => {
            });
          }, 0));
        }
        function zs(e2, t2) {
          if (t2.srcObject instanceof MediaStream) {
            const n2 = t2.srcObject;
            n2.removeTrack(e2), n2.getTracks().length > 0 ? t2.srcObject = n2 : t2.srcObject = null;
          }
        }
        !function(e2) {
          let t2, n2, i2;
          !function(e3) {
            e3.Audio = "audio", e3.Video = "video", e3.Unknown = "unknown";
          }(t2 = e2.Kind || (e2.Kind = {})), function(e3) {
            e3.Camera = "camera", e3.Microphone = "microphone", e3.ScreenShare = "screen_share", e3.ScreenShareAudio = "screen_share_audio", e3.Unknown = "unknown";
          }(n2 = e2.Source || (e2.Source = {})), function(e3) {
            e3.Active = "active", e3.Paused = "paused", e3.Unknown = "unknown";
          }(i2 = e2.StreamState || (e2.StreamState = {})), e2.kindToProto = function(e3) {
            switch (e3) {
              case t2.Audio:
                return Je.AUDIO;
              case t2.Video:
                return Je.VIDEO;
              default:
                return Je.DATA;
            }
          }, e2.kindFromProto = function(e3) {
            switch (e3) {
              case Je.AUDIO:
                return t2.Audio;
              case Je.VIDEO:
                return t2.Video;
              default:
                return t2.Unknown;
            }
          }, e2.sourceToProto = function(e3) {
            switch (e3) {
              case n2.Camera:
                return Qe.CAMERA;
              case n2.Microphone:
                return Qe.MICROPHONE;
              case n2.ScreenShare:
                return Qe.SCREEN_SHARE;
              case n2.ScreenShareAudio:
                return Qe.SCREEN_SHARE_AUDIO;
              default:
                return Qe.UNKNOWN;
            }
          }, e2.sourceFromProto = function(e3) {
            switch (e3) {
              case Qe.CAMERA:
                return n2.Camera;
              case Qe.MICROPHONE:
                return n2.Microphone;
              case Qe.SCREEN_SHARE:
                return n2.ScreenShare;
              case Qe.SCREEN_SHARE_AUDIO:
                return n2.ScreenShareAudio;
              default:
                return n2.Unknown;
            }
          }, e2.streamStateFromProto = function(e3) {
            switch (e3) {
              case Kt.ACTIVE:
                return i2.Active;
              case Kt.PAUSED:
                return i2.Paused;
              default:
                return i2.Unknown;
            }
          };
        }(Hs || (Hs = {}));
        class Js {
          constructor(e2, t2, n2, i2, s2) {
            if ("object" == typeof e2) this.width = e2.width, this.height = e2.height, this.aspectRatio = e2.aspectRatio, this.encoding = { maxBitrate: e2.maxBitrate, maxFramerate: e2.maxFramerate, priority: e2.priority };
            else {
              if (void 0 === t2 || void 0 === n2) throw new TypeError("Unsupported options: provide at least width, height and maxBitrate");
              this.width = e2, this.height = t2, this.aspectRatio = e2 / t2, this.encoding = { maxBitrate: n2, maxFramerate: i2, priority: s2 };
            }
          }
          get resolution() {
            return { width: this.width, height: this.height, frameRate: this.encoding.maxFramerate, aspectRatio: this.aspectRatio };
          }
        }
        const Qs = ["vp8", "h264"], Ys = ["vp8", "h264", "vp9", "av1"];
        function Xs(e2) {
          return !!Qs.find((t2) => t2 === e2);
        }
        var Zs;
        e.BackupCodecPolicy = void 0, function(e2) {
          e2[e2.PREFER_REGRESSION = 0] = "PREFER_REGRESSION", e2[e2.SIMULCAST = 1] = "SIMULCAST", e2[e2.REGRESSION = 2] = "REGRESSION";
        }(e.BackupCodecPolicy || (e.BackupCodecPolicy = {})), e.AudioPresets = void 0, (Zs = e.AudioPresets || (e.AudioPresets = {})).telephone = { maxBitrate: 12e3 }, Zs.speech = { maxBitrate: 24e3 }, Zs.music = { maxBitrate: 48e3 }, Zs.musicStereo = { maxBitrate: 64e3 }, Zs.musicHighQuality = { maxBitrate: 96e3 }, Zs.musicHighQualityStereo = { maxBitrate: 128e3 };
        const $s = { h90: new Js(160, 90, 9e4, 20), h180: new Js(320, 180, 16e4, 20), h216: new Js(384, 216, 18e4, 20), h360: new Js(640, 360, 45e4, 20), h540: new Js(960, 540, 8e5, 25), h720: new Js(1280, 720, 17e5, 30), h1080: new Js(1920, 1080, 3e6, 30), h1440: new Js(2560, 1440, 5e6, 30), h2160: new Js(3840, 2160, 8e6, 30) }, eo = { h120: new Js(160, 120, 7e4, 20), h180: new Js(240, 180, 125e3, 20), h240: new Js(320, 240, 14e4, 20), h360: new Js(480, 360, 33e4, 20), h480: new Js(640, 480, 5e5, 20), h540: new Js(720, 540, 6e5, 25), h720: new Js(960, 720, 13e5, 30), h1080: new Js(1440, 1080, 23e5, 30), h1440: new Js(1920, 1440, 38e5, 30) }, to = { h360fps3: new Js(640, 360, 2e5, 3, "medium"), h360fps15: new Js(640, 360, 4e5, 15, "medium"), h720fps5: new Js(1280, 720, 8e5, 5, "medium"), h720fps15: new Js(1280, 720, 15e5, 15, "medium"), h720fps30: new Js(1280, 720, 2e6, 30, "medium"), h1080fps15: new Js(1920, 1080, 25e5, 15, "medium"), h1080fps30: new Js(1920, 1080, 5e6, 30, "medium"), original: new Js(0, 0, 7e6, 30, "medium") }, no = "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension";
        function io(e2) {
          return Xn(this, void 0, void 0, function* () {
            return new Promise((t2) => Ks.setTimeout(t2, e2));
          });
        }
        function so() {
          return "addTransceiver" in RTCPeerConnection.prototype;
        }
        function oo() {
          return "addTrack" in RTCPeerConnection.prototype;
        }
        function ro() {
          if (!("getCapabilities" in RTCRtpSender)) return false;
          if (po()) return false;
          const e2 = RTCRtpSender.getCapabilities("video");
          let t2 = false;
          if (e2) {
            for (const n2 of e2.codecs) if ("video/AV1" === n2.mimeType) {
              t2 = true;
              break;
            }
          }
          return t2;
        }
        function ao() {
          if (!("getCapabilities" in RTCRtpSender)) return false;
          if (ho()) return false;
          if (po()) {
            const e3 = js();
            if ((null == e3 ? void 0 : e3.version) && Co(e3.version, "16") < 0) return false;
          }
          const e2 = RTCRtpSender.getCapabilities("video");
          let t2 = false;
          if (e2) {
            for (const n2 of e2.codecs) if ("video/VP9" === n2.mimeType) {
              t2 = true;
              break;
            }
          }
          return t2;
        }
        function co(e2) {
          return "av1" === e2 || "vp9" === e2;
        }
        function lo(e2) {
          return !!document && (e2 || (e2 = document.createElement("audio")), "setSinkId" in e2);
        }
        function uo() {
          return "undefined" != typeof RTCPeerConnection && (so() || oo());
        }
        function ho() {
          var e2;
          return "Firefox" === (null === (e2 = js()) || void 0 === e2 ? void 0 : e2.name);
        }
        function po() {
          var e2;
          return "Safari" === (null === (e2 = js()) || void 0 === e2 ? void 0 : e2.name);
        }
        function mo() {
          const e2 = js();
          return "Safari" === (null == e2 ? void 0 : e2.name) && e2.version.startsWith("17.");
        }
        function go() {
          var e2, t2;
          return !!vo() && (null !== (t2 = null === (e2 = navigator.userAgentData) || void 0 === e2 ? void 0 : e2.mobile) && void 0 !== t2 ? t2 : /Tablet|iPad|Mobile|Android|BlackBerry/.test(navigator.userAgent));
        }
        function vo() {
          return "undefined" != typeof document;
        }
        function fo() {
          return "ReactNative" == navigator.product;
        }
        function ko(e2) {
          return e2.hostname.endsWith(".livekit.cloud") || e2.hostname.endsWith(".livekit.run");
        }
        function bo() {
          if (window && window.LiveKitReactNativeGlobal) return window.LiveKitReactNativeGlobal;
        }
        function yo() {
          if (!fo()) return;
          let e2 = bo();
          return e2 ? e2.platform : void 0;
        }
        function To() {
          if (vo()) return window.devicePixelRatio;
          if (fo()) {
            let e2 = bo();
            if (e2) return e2.devicePixelRatio;
          }
          return 1;
        }
        function Co(e2, t2) {
          const n2 = e2.split("."), i2 = t2.split("."), s2 = Math.min(n2.length, i2.length);
          for (let e3 = 0; e3 < s2; ++e3) {
            const t3 = parseInt(n2[e3], 10), o2 = parseInt(i2[e3], 10);
            if (t3 > o2) return 1;
            if (t3 < o2) return -1;
            if (e3 === s2 - 1 && t3 === o2) return 0;
          }
          return "" === e2 && "" !== t2 ? -1 : "" === t2 ? 1 : n2.length == i2.length ? 0 : n2.length < i2.length ? -1 : 1;
        }
        function So(e2) {
          for (const t2 of e2) t2.target.handleResize(t2);
        }
        function Eo(e2) {
          for (const t2 of e2) t2.target.handleVisibilityChanged(t2);
        }
        let wo = null;
        const Po = () => (wo || (wo = new ResizeObserver(So)), wo);
        let Ro = null;
        const Io = () => (Ro || (Ro = new IntersectionObserver(Eo, { root: null, rootMargin: "0px" })), Ro);
        let Oo, Do;
        function xo() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 16, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 16, n2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], i2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
          const s2 = document.createElement("canvas");
          s2.width = e2, s2.height = t2;
          const o2 = s2.getContext("2d");
          null == o2 || o2.fillRect(0, 0, s2.width, s2.height), i2 && o2 && (o2.beginPath(), o2.arc(e2 / 2, t2 / 2, 50, 0, 2 * Math.PI, true), o2.closePath(), o2.fillStyle = "grey", o2.fill());
          const r2 = s2.captureStream(), [a2] = r2.getTracks();
          if (!a2) throw Error("Could not get empty media stream video track");
          return a2.enabled = n2, a2;
        }
        function Mo() {
          if (!Do) {
            const e2 = new AudioContext(), t2 = e2.createOscillator(), n2 = e2.createGain();
            n2.gain.setValueAtTime(0, 0);
            const i2 = e2.createMediaStreamDestination();
            if (t2.connect(n2), n2.connect(i2), t2.start(), [Do] = i2.stream.getAudioTracks(), !Do) throw Error("Could not get empty media stream audio track");
            Do.enabled = false;
          }
          return Do.clone();
        }
        class No {
          constructor(e2, t2) {
            this.onFinally = t2, this.promise = new Promise((t3, n2) => Xn(this, void 0, void 0, function* () {
              this.resolve = t3, this.reject = n2, e2 && (yield e2(t3, n2));
            })).finally(() => {
              var e3;
              return null === (e3 = this.onFinally) || void 0 === e3 ? void 0 : e3.call(this);
            });
          }
        }
        function _o(e2) {
          if ("string" == typeof e2 || "number" == typeof e2) return e2;
          if (Array.isArray(e2)) return e2[0];
          if (e2.exact) return Array.isArray(e2.exact) ? e2.exact[0] : e2.exact;
          if (e2.ideal) return Array.isArray(e2.ideal) ? e2.ideal[0] : e2.ideal;
          throw Error("could not unwrap constraint");
        }
        function Ao(e2) {
          return e2.startsWith("ws") ? e2.replace(/^(ws)/, "http") : e2;
        }
        function Lo(t2) {
          switch (t2.reason) {
            case e.ConnectionErrorReason.LeaveRequest:
              return t2.context;
            case e.ConnectionErrorReason.Cancelled:
              return $e.CLIENT_INITIATED;
            case e.ConnectionErrorReason.NotAllowed:
              return $e.USER_REJECTED;
            case e.ConnectionErrorReason.ServerUnreachable:
              return $e.JOIN_FAILURE;
            default:
              return $e.UNKNOWN_REASON;
          }
        }
        function Uo(e2) {
          return void 0 !== e2 ? Number(e2) : void 0;
        }
        function jo(e2) {
          return void 0 !== e2 ? BigInt(e2) : void 0;
        }
        function Fo(e2) {
          return !!e2 && !(e2 instanceof MediaStreamTrack) && e2.isLocal;
        }
        function Bo(e2) {
          return !!e2 && e2.kind == Hs.Kind.Audio;
        }
        function Vo(e2) {
          return !!e2 && e2.kind == Hs.Kind.Video;
        }
        function qo(e2) {
          return Fo(e2) && Vo(e2);
        }
        function Ko(e2) {
          return Fo(e2) && Bo(e2);
        }
        function Wo(e2) {
          return !!e2 && !e2.isLocal;
        }
        function Ho(e2) {
          return !!e2 && !e2.isLocal;
        }
        function Go(e2) {
          return Wo(e2) && Vo(e2);
        }
        function zo(e2) {
          return e2.isLocal;
        }
        function Jo(e2, t2, n2) {
          var i2, s2, o2, r2;
          const { optionsWithoutProcessor: a2, audioProcessor: c2, videoProcessor: d2 } = or(null != e2 ? e2 : {}), l2 = null == t2 ? void 0 : t2.processor, u2 = null == n2 ? void 0 : n2.processor, h2 = null != a2 ? a2 : {};
          return true === h2.audio && (h2.audio = {}), true === h2.video && (h2.video = {}), h2.audio && (Qo(h2.audio, t2), null !== (i2 = (o2 = h2.audio).deviceId) && void 0 !== i2 || (o2.deviceId = { ideal: "default" }), (c2 || l2) && (h2.audio.processor = null != c2 ? c2 : l2)), h2.video && (Qo(h2.video, n2), null !== (s2 = (r2 = h2.video).deviceId) && void 0 !== s2 || (r2.deviceId = { ideal: "default" }), (d2 || u2) && (h2.video.processor = null != d2 ? d2 : u2)), h2;
        }
        function Qo(e2, t2) {
          return Object.keys(t2).forEach((n2) => {
            void 0 === e2[n2] && (e2[n2] = t2[n2]);
          }), e2;
        }
        function Yo(e2) {
          var t2, n2, i2, s2;
          const o2 = {};
          if (e2.video) if ("object" == typeof e2.video) {
            const n3 = {}, s3 = n3, r2 = e2.video;
            Object.keys(r2).forEach((e3) => {
              if ("resolution" === e3) Qo(s3, r2.resolution);
              else s3[e3] = r2[e3];
            }), o2.video = n3, null !== (t2 = (i2 = o2.video).deviceId) && void 0 !== t2 || (i2.deviceId = { ideal: "default" });
          } else o2.video = !!e2.video && { deviceId: { ideal: "default" } };
          else o2.video = false;
          return e2.audio ? "object" == typeof e2.audio ? (o2.audio = e2.audio, null !== (n2 = (s2 = o2.audio).deviceId) && void 0 !== n2 || (s2.deviceId = { ideal: "default" })) : o2.audio = { deviceId: { ideal: "default" } } : o2.audio = false, o2;
        }
        function Xo(e2) {
          return Xn(this, arguments, void 0, function(e3) {
            let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 200;
            return function* () {
              const n2 = Zo();
              if (n2) {
                const i2 = n2.createAnalyser();
                i2.fftSize = 2048;
                const s2 = i2.frequencyBinCount, o2 = new Uint8Array(s2);
                n2.createMediaStreamSource(new MediaStream([e3.mediaStreamTrack])).connect(i2), yield io(t2), i2.getByteTimeDomainData(o2);
                const r2 = o2.some((e4) => 128 !== e4 && 0 !== e4);
                return n2.close(), !r2;
              }
              return false;
            }();
          });
        }
        function Zo() {
          var e2;
          const t2 = "undefined" != typeof window && (window.AudioContext || window.webkitAudioContext);
          if (t2) {
            const n2 = new t2({ latencyHint: "interactive" });
            if ("suspended" === n2.state && "undefined" != typeof window && (null === (e2 = window.document) || void 0 === e2 ? void 0 : e2.body)) {
              const e3 = () => Xn(this, void 0, void 0, function* () {
                var t3;
                try {
                  "suspended" === n2.state && (yield n2.resume());
                } catch (e4) {
                  console.warn("Error trying to auto-resume audio context", e4);
                }
                null === (t3 = window.document.body) || void 0 === t3 || t3.removeEventListener("click", e3);
              });
              window.document.body.addEventListener("click", e3);
            }
            return n2;
          }
        }
        function $o(e2) {
          return "audioinput" === e2 ? Hs.Source.Microphone : "videoinput" === e2 ? Hs.Source.Camera : Hs.Source.Unknown;
        }
        function er(e2) {
          return e2 === Hs.Source.Microphone ? "audioinput" : e2 === Hs.Source.Camera ? "videoinput" : void 0;
        }
        function tr(e2) {
          var t2, n2;
          let i2 = null === (t2 = e2.video) || void 0 === t2 || t2;
          return e2.resolution && e2.resolution.width > 0 && e2.resolution.height > 0 && (i2 = "boolean" == typeof i2 ? {} : i2, i2 = po() ? Object.assign(Object.assign({}, i2), { width: { max: e2.resolution.width }, height: { max: e2.resolution.height }, frameRate: e2.resolution.frameRate }) : Object.assign(Object.assign({}, i2), { width: { ideal: e2.resolution.width }, height: { ideal: e2.resolution.height }, frameRate: e2.resolution.frameRate })), { audio: null !== (n2 = e2.audio) && void 0 !== n2 && n2, video: i2, controller: e2.controller, selfBrowserSurface: e2.selfBrowserSurface, surfaceSwitching: e2.surfaceSwitching, systemAudio: e2.systemAudio, preferCurrentTab: e2.preferCurrentTab };
        }
        function nr(e2) {
          return e2.split("/")[1].toLowerCase();
        }
        function ir(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            void 0 !== e3.track && t2.push(new $t({ cid: e3.track.mediaStreamID, track: e3.trackInfo }));
          }), t2;
        }
        function sr(e2) {
          return "mediaStreamTrack" in e2 ? { trackID: e2.sid, source: e2.source, muted: e2.isMuted, enabled: e2.mediaStreamTrack.enabled, kind: e2.kind, streamID: e2.mediaStreamID, streamTrackID: e2.mediaStreamTrack.id } : { trackID: e2.trackSid, enabled: e2.isEnabled, muted: e2.isMuted, trackInfo: Object.assign({ mimeType: e2.mimeType, name: e2.trackName, encrypted: e2.isEncrypted, kind: e2.kind, source: e2.source }, e2.track ? sr(e2.track) : {}) };
        }
        function or(e2) {
          const t2 = Object.assign({}, e2);
          let n2, i2;
          return "object" == typeof t2.audio && t2.audio.processor && (n2 = t2.audio.processor, t2.audio = Object.assign(Object.assign({}, t2.audio), { processor: void 0 })), "object" == typeof t2.video && t2.video.processor && (i2 = t2.video.processor, t2.video = Object.assign(Object.assign({}, t2.video), { processor: void 0 })), { audioProcessor: n2, videoProcessor: i2, optionsWithoutProcessor: (s2 = t2, void 0 === s2 ? s2 : "function" == typeof structuredClone ? structuredClone(s2) : JSON.parse(JSON.stringify(s2))) };
          var s2;
        }
        class rr extends ni.EventEmitter {
          constructor(t2) {
            super(), this.onWorkerMessage = (t3) => {
              var n2, i2;
              const { kind: s2, data: o2 } = t3.data;
              switch (s2) {
                case "error":
                  Wn.error(o2.error.message), this.emit(e.EncryptionEvent.EncryptionError, o2.error);
                  break;
                case "initAck":
                  o2.enabled && this.keyProvider.getKeys().forEach((e2) => {
                    this.postKey(e2);
                  });
                  break;
                case "enable":
                  if (o2.enabled && this.keyProvider.getKeys().forEach((e2) => {
                    this.postKey(e2);
                  }), this.encryptionEnabled !== o2.enabled && o2.participantIdentity === (null === (n2 = this.room) || void 0 === n2 ? void 0 : n2.localParticipant.identity)) this.emit(e.EncryptionEvent.ParticipantEncryptionStatusChanged, o2.enabled, this.room.localParticipant), this.encryptionEnabled = o2.enabled;
                  else if (o2.participantIdentity) {
                    const t4 = null === (i2 = this.room) || void 0 === i2 ? void 0 : i2.getParticipantByIdentity(o2.participantIdentity);
                    if (!t4) throw TypeError("couldn't set encryption status, participant not found".concat(o2.participantIdentity));
                    this.emit(e.EncryptionEvent.ParticipantEncryptionStatusChanged, o2.enabled, t4);
                  }
                  break;
                case "ratchetKey":
                  this.keyProvider.emit(e.KeyProviderEvent.KeyRatcheted, o2.ratchetResult, o2.participantIdentity, o2.keyIndex);
              }
            }, this.onWorkerError = (t3) => {
              Wn.error("e2ee worker encountered an error:", { error: t3.error }), this.emit(e.EncryptionEvent.EncryptionError, t3.error);
            }, this.keyProvider = t2.keyProvider, this.worker = t2.worker, this.encryptionEnabled = false;
          }
          setup(e2) {
            if (!ps()) throw new Os("tried to setup end-to-end encryption on an unsupported browser");
            if (Wn.info("setting up e2ee"), e2 !== this.room) {
              this.room = e2, this.setupEventListeners(e2, this.keyProvider);
              const t2 = { kind: "init", data: { keyProviderOptions: this.keyProvider.getOptions(), loglevel: zn.getLevel() } };
              this.worker && (Wn.info("initializing worker", { worker: this.worker }), this.worker.onmessage = this.onWorkerMessage, this.worker.onerror = this.onWorkerError, this.worker.postMessage(t2));
            }
          }
          setParticipantCryptorEnabled(e2, t2) {
            Wn.debug("set e2ee to ".concat(e2, " for participant ").concat(t2)), this.postEnable(e2, t2);
          }
          setSifTrailer(e2) {
            e2 && 0 !== e2.length ? this.postSifTrailer(e2) : Wn.warn("ignoring server sent trailer as it's empty");
          }
          setupEngine(t2) {
            t2.on(e.EngineEvent.RTPVideoMapUpdate, (e2) => {
              this.postRTPMap(e2);
            });
          }
          setupEventListeners(t2, n2) {
            t2.on(e.RoomEvent.TrackPublished, (e2, t3) => this.setParticipantCryptorEnabled(e2.trackInfo.encryption !== lt.NONE, t3.identity)), t2.on(e.RoomEvent.ConnectionStateChanged, (n3) => {
              n3 === e.ConnectionState.Connected && t2.remoteParticipants.forEach((e2) => {
                e2.trackPublications.forEach((t3) => {
                  this.setParticipantCryptorEnabled(t3.trackInfo.encryption !== lt.NONE, e2.identity);
                });
              });
            }).on(e.RoomEvent.TrackUnsubscribed, (e2, t3, n3) => {
              var i2;
              const s2 = { kind: "removeTransform", data: { participantIdentity: n3.identity, trackId: e2.mediaStreamID } };
              null === (i2 = this.worker) || void 0 === i2 || i2.postMessage(s2);
            }).on(e.RoomEvent.TrackSubscribed, (e2, t3, n3) => {
              this.setupE2EEReceiver(e2, n3.identity, t3.trackInfo);
            }).on(e.RoomEvent.SignalConnected, () => {
              if (!this.room) throw new TypeError("expected room to be present on signal connect");
              n2.getKeys().forEach((e2) => {
                this.postKey(e2);
              }), this.setParticipantCryptorEnabled(this.room.localParticipant.isE2EEEnabled, this.room.localParticipant.identity);
            }), t2.localParticipant.on(e.ParticipantEvent.LocalTrackPublished, (e2) => Xn(this, void 0, void 0, function* () {
              this.setupE2EESender(e2.track, e2.track.sender);
            })), n2.on(e.KeyProviderEvent.SetKey, (e2) => this.postKey(e2)).on(e.KeyProviderEvent.RatchetRequest, (e2, t3) => this.postRatchetRequest(e2, t3));
          }
          postRatchetRequest(e2, t2) {
            if (!this.worker) throw Error("could not ratchet key, worker is missing");
            const n2 = { kind: "ratchetRequest", data: { participantIdentity: e2, keyIndex: t2 } };
            this.worker.postMessage(n2);
          }
          postKey(e2) {
            let { key: t2, participantIdentity: n2, keyIndex: i2 } = e2;
            var s2;
            if (!this.worker) throw Error("could not set key, worker is missing");
            const o2 = { kind: "setKey", data: { participantIdentity: n2, isPublisher: n2 === (null === (s2 = this.room) || void 0 === s2 ? void 0 : s2.localParticipant.identity), key: t2, keyIndex: i2 } };
            this.worker.postMessage(o2);
          }
          postEnable(e2, t2) {
            if (!this.worker) throw new ReferenceError("failed to enable e2ee, worker is not ready");
            {
              const n2 = { kind: "enable", data: { enabled: e2, participantIdentity: t2 } };
              this.worker.postMessage(n2);
            }
          }
          postRTPMap(e2) {
            var t2;
            if (!this.worker) throw TypeError("could not post rtp map, worker is missing");
            if (!(null === (t2 = this.room) || void 0 === t2 ? void 0 : t2.localParticipant.identity)) throw TypeError("could not post rtp map, local participant identity is missing");
            const n2 = { kind: "setRTPMap", data: { map: e2, participantIdentity: this.room.localParticipant.identity } };
            this.worker.postMessage(n2);
          }
          postSifTrailer(e2) {
            if (!this.worker) throw Error("could not post SIF trailer, worker is missing");
            const t2 = { kind: "setSifTrailer", data: { trailer: e2 } };
            this.worker.postMessage(t2);
          }
          setupE2EEReceiver(e2, t2, n2) {
            if (e2.receiver) {
              if (!(null == n2 ? void 0 : n2.mimeType) || "" === n2.mimeType) throw new TypeError("MimeType missing from trackInfo, cannot set up E2EE cryptor");
              this.handleReceiver(e2.receiver, e2.mediaStreamID, t2, "video" === e2.kind ? nr(n2.mimeType) : void 0);
            }
          }
          setupE2EESender(e2, t2) {
            Fo(e2) && t2 ? this.handleSender(t2, e2.mediaStreamID, void 0) : t2 || Wn.warn("early return because sender is not ready");
          }
          handleReceiver(e2, t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              if (this.worker) {
                if (ms()) {
                  const s2 = { kind: "decode", participantIdentity: n2, trackId: t2, codec: i2 };
                  e2.transform = new RTCRtpScriptTransform(this.worker, s2);
                } else {
                  if (ds in e2 && i2) {
                    const e3 = { kind: "updateCodec", data: { trackId: t2, codec: i2, participantIdentity: n2 } };
                    return void this.worker.postMessage(e3);
                  }
                  let s2 = e2.writableStream, o2 = e2.readableStream;
                  if (!s2 || !o2) {
                    const t3 = e2.createEncodedStreams();
                    e2.writableStream = t3.writable, s2 = t3.writable, e2.readableStream = t3.readable, o2 = t3.readable;
                  }
                  const r2 = { kind: "decode", data: { readableStream: o2, writableStream: s2, trackId: t2, codec: i2, participantIdentity: n2 } };
                  this.worker.postMessage(r2, [o2, s2]);
                }
                e2[ds] = true;
              }
            });
          }
          handleSender(e2, t2, n2) {
            var i2;
            if (!(ds in e2) && this.worker) {
              if (!(null === (i2 = this.room) || void 0 === i2 ? void 0 : i2.localParticipant.identity) || "" === this.room.localParticipant.identity) throw TypeError("local identity needs to be known in order to set up encrypted sender");
              if (ms()) {
                Wn.info("initialize script transform");
                const i3 = { kind: "encode", participantIdentity: this.room.localParticipant.identity, trackId: t2, codec: n2 };
                e2.transform = new RTCRtpScriptTransform(this.worker, i3);
              } else {
                Wn.info("initialize encoded streams");
                const i3 = e2.createEncodedStreams(), s2 = { kind: "encode", data: { readableStream: i3.readable, writableStream: i3.writable, codec: n2, trackId: t2, participantIdentity: this.room.localParticipant.identity } };
                this.worker.postMessage(s2, [i3.readable, i3.writable]);
              }
              e2[ds] = true;
            }
          }
        }
        const ar = "default";
        class cr {
          constructor() {
            this._previousDevices = [];
          }
          static getInstance() {
            return void 0 === this.instance && (this.instance = new cr()), this.instance;
          }
          get previousDevices() {
            return this._previousDevices;
          }
          getDevices(e2) {
            return Xn(this, arguments, void 0, function(e3) {
              var t2 = this;
              let n2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              return function* () {
                var i2;
                if ((null === (i2 = cr.userMediaPromiseMap) || void 0 === i2 ? void 0 : i2.size) > 0) {
                  Wn.debug("awaiting getUserMedia promise");
                  try {
                    e3 ? yield cr.userMediaPromiseMap.get(e3) : yield Promise.all(cr.userMediaPromiseMap.values());
                  } catch (e4) {
                    Wn.warn("error waiting for media permissons");
                  }
                }
                let s2 = yield navigator.mediaDevices.enumerateDevices();
                if (n2 && (!po() || !t2.hasDeviceInUse(e3))) {
                  if (0 === s2.filter((t3) => t3.kind === e3).length || s2.some((t3) => {
                    const n3 = "" === t3.label, i3 = !e3 || t3.kind === e3;
                    return n3 && i3;
                  })) {
                    const t3 = { video: "audioinput" !== e3 && "audiooutput" !== e3, audio: "videoinput" !== e3 && { deviceId: { ideal: "default" } } }, n3 = yield navigator.mediaDevices.getUserMedia(t3);
                    s2 = yield navigator.mediaDevices.enumerateDevices(), n3.getTracks().forEach((e4) => {
                      e4.stop();
                    });
                  }
                }
                return t2._previousDevices = s2, e3 && (s2 = s2.filter((t3) => t3.kind === e3)), s2;
              }();
            });
          }
          normalizeDeviceId(e2, t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              if (t2 !== ar) return t2;
              const i2 = yield this.getDevices(e2), s2 = i2.find((e3) => e3.deviceId === ar);
              if (!s2) return void Wn.warn("could not reliably determine default device");
              const o2 = i2.find((e3) => e3.deviceId !== ar && e3.groupId === (null != n2 ? n2 : s2.groupId));
              if (o2) return null == o2 ? void 0 : o2.deviceId;
              Wn.warn("could not reliably determine default device");
            });
          }
          hasDeviceInUse(e2) {
            return e2 ? cr.userMediaPromiseMap.has(e2) : cr.userMediaPromiseMap.size > 0;
          }
        }
        var dr;
        cr.mediaDeviceKinds = ["audioinput", "audiooutput", "videoinput"], cr.userMediaPromiseMap = /* @__PURE__ */ new Map(), function(e2) {
          e2[e2.WAITING = 0] = "WAITING", e2[e2.RUNNING = 1] = "RUNNING", e2[e2.COMPLETED = 2] = "COMPLETED";
        }(dr || (dr = {}));
        class lr {
          constructor() {
            this.pendingTasks = /* @__PURE__ */ new Map(), this.taskMutex = new s(), this.nextTaskIndex = 0;
          }
          run(e2) {
            return Xn(this, void 0, void 0, function* () {
              const t2 = { id: this.nextTaskIndex++, enqueuedAt: Date.now(), status: dr.WAITING };
              this.pendingTasks.set(t2.id, t2);
              const n2 = yield this.taskMutex.lock();
              try {
                return t2.executedAt = Date.now(), t2.status = dr.RUNNING, yield e2();
              } finally {
                t2.status = dr.COMPLETED, this.pendingTasks.delete(t2.id), n2();
              }
            });
          }
          flush() {
            return Xn(this, void 0, void 0, function* () {
              return this.run(() => Xn(this, void 0, void 0, function* () {
              }));
            });
          }
          snapshot() {
            return Array.from(this.pendingTasks.values());
          }
        }
        function ur(e2, t2) {
          return e2.pathname = "".concat(function(e3) {
            return e3.endsWith("/") ? e3 : "".concat(e3, "/");
          }(e2.pathname)).concat(t2), e2.toString();
        }
        const hr = ["syncState", "trickle", "offer", "answer", "simulate", "leave"];
        var pr;
        !function(e2) {
          e2[e2.CONNECTING = 0] = "CONNECTING", e2[e2.CONNECTED = 1] = "CONNECTED", e2[e2.RECONNECTING = 2] = "RECONNECTING", e2[e2.DISCONNECTING = 3] = "DISCONNECTING", e2[e2.DISCONNECTED = 4] = "DISCONNECTED";
        }(pr || (pr = {}));
        class mr {
          get currentState() {
            return this.state;
          }
          get isDisconnected() {
            return this.state === pr.DISCONNECTING || this.state === pr.DISCONNECTED;
          }
          get isEstablishingConnection() {
            return this.state === pr.CONNECTING || this.state === pr.RECONNECTING;
          }
          getNextRequestId() {
            return this._requestId += 1, this._requestId;
          }
          constructor() {
            let t2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            var i2;
            this.rtt = 0, this.state = pr.DISCONNECTED, this.log = Wn, this._requestId = 0, this.resetCallbacks = () => {
              this.onAnswer = void 0, this.onLeave = void 0, this.onLocalTrackPublished = void 0, this.onLocalTrackUnpublished = void 0, this.onNegotiateRequested = void 0, this.onOffer = void 0, this.onRemoteMuteChanged = void 0, this.onSubscribedQualityUpdate = void 0, this.onTokenRefresh = void 0, this.onTrickle = void 0, this.onClose = void 0;
            }, this.log = Gn(null !== (i2 = n2.loggerName) && void 0 !== i2 ? i2 : e.LoggerNames.Signal), this.loggerContextCb = n2.loggerContextCb, this.useJSON = t2, this.requestQueue = new lr(), this.queuedRequests = [], this.closingLock = new s(), this.connectionLock = new s(), this.state = pr.DISCONNECTED;
          }
          get logContext() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this.loggerContextCb) || void 0 === e2 ? void 0 : e2.call(this)) && void 0 !== t2 ? t2 : {};
          }
          join(e2, t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              this.state = pr.CONNECTING, this.options = n2;
              return yield this.connect(e2, t2, n2, i2);
            });
          }
          reconnect(e2, t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.options) return void this.log.warn("attempted to reconnect without signal options being set, ignoring", this.logContext);
              this.state = pr.RECONNECTING, this.clearPingInterval();
              return yield this.connect(e2, t2, Object.assign(Object.assign({}, this.options), { reconnect: true, sid: n2, reconnectReason: i2 }));
            });
          }
          connect(t2, n2, i2, s2) {
            this.connectOptions = i2;
            const o2 = function(e2, t3, n3) {
              var i3;
              const s3 = new URLSearchParams();
              s3.set("access_token", e2), n3.reconnect && (s3.set("reconnect", "1"), n3.sid && s3.set("sid", n3.sid));
              s3.set("auto_subscribe", n3.autoSubscribe ? "1" : "0"), s3.set("sdk", fo() ? "reactnative" : "js"), s3.set("version", t3.version), s3.set("protocol", t3.protocol.toString()), t3.deviceModel && s3.set("device_model", t3.deviceModel);
              t3.os && s3.set("os", t3.os);
              t3.osVersion && s3.set("os_version", t3.osVersion);
              t3.browser && s3.set("browser", t3.browser);
              t3.browserVersion && s3.set("browser_version", t3.browserVersion);
              n3.adaptiveStream && s3.set("adaptive_stream", "1");
              n3.reconnectReason && s3.set("reconnect_reason", n3.reconnectReason.toString());
              (null === (i3 = navigator.connection) || void 0 === i3 ? void 0 : i3.type) && s3.set("network", navigator.connection.type);
              return s3;
            }(n2, function() {
              var e2;
              const t3 = new Dt({ sdk: xt.JS, protocol: 16, version: qs });
              return fo() && (t3.os = null !== (e2 = yo()) && void 0 !== e2 ? e2 : ""), t3;
            }(), i2), r2 = function(e2, t3) {
              const n3 = new URL(function(e3) {
                return e3.startsWith("http") ? e3.replace(/^(http)/, "ws") : e3;
              }(e2));
              return t3.forEach((e3, t4) => {
                n3.searchParams.set(t4, e3);
              }), ur(n3, "rtc");
            }(t2, o2), a2 = ur(new URL(Ao(r2)), "validate");
            return new Promise((t3, n3) => Xn(this, void 0, void 0, function* () {
              const o3 = yield this.connectionLock.lock();
              try {
                const o4 = () => Xn(this, void 0, void 0, function* () {
                  this.close(), clearTimeout(c2), n3(new Is("room connection has been cancelled (signal)", e.ConnectionErrorReason.Cancelled));
                }), c2 = setTimeout(() => {
                  this.close(), n3(new Is("room connection has timed out (signal)", e.ConnectionErrorReason.ServerUnreachable));
                }, i2.websocketTimeout);
                (null == s2 ? void 0 : s2.aborted) && o4(), null == s2 || s2.addEventListener("abort", o4);
                const d2 = new URL(r2);
                d2.searchParams.has("access_token") && d2.searchParams.set("access_token", "<redacted>"), this.log.debug("connecting to ".concat(d2), Object.assign({ reconnect: i2.reconnect, reconnectReason: i2.reconnectReason }, this.logContext)), this.ws && (yield this.close(false)), this.ws = new WebSocket(r2), this.ws.binaryType = "arraybuffer", this.ws.onopen = () => {
                  clearTimeout(c2);
                }, this.ws.onerror = (t4) => Xn(this, void 0, void 0, function* () {
                  if (this.state === pr.CONNECTED) this.handleWSError(t4);
                  else {
                    this.state = pr.DISCONNECTED, clearTimeout(c2);
                    try {
                      const i3 = yield fetch(a2);
                      if (i3.status.toFixed(0).startsWith("4")) {
                        const t5 = yield i3.text();
                        n3(new Is(t5, e.ConnectionErrorReason.NotAllowed, i3.status));
                      } else n3(new Is("Encountered unknown websocket error during connection: ".concat(t4.toString()), e.ConnectionErrorReason.InternalError, i3.status));
                    } catch (t5) {
                      n3(new Is(t5 instanceof Error ? t5.message : "server was not reachable", e.ConnectionErrorReason.ServerUnreachable));
                    }
                  }
                }), this.ws.onmessage = (r3) => Xn(this, void 0, void 0, function* () {
                  var a3, c3, d3;
                  let l2;
                  if ("string" == typeof r3.data) {
                    const e2 = JSON.parse(r3.data);
                    l2 = Gt.fromJson(e2, { ignoreUnknownFields: true });
                  } else {
                    if (!(r3.data instanceof ArrayBuffer)) return void this.log.error("could not decode websocket message: ".concat(typeof r3.data), this.logContext);
                    l2 = Gt.fromBinary(new Uint8Array(r3.data));
                  }
                  if (this.state !== pr.CONNECTED) {
                    let r4 = false;
                    if ("join" === (null === (a3 = l2.message) || void 0 === a3 ? void 0 : a3.case) ? (this.state = pr.CONNECTED, null == s2 || s2.removeEventListener("abort", o4), this.pingTimeoutDuration = l2.message.value.pingTimeout, this.pingIntervalDuration = l2.message.value.pingInterval, this.pingTimeoutDuration && this.pingTimeoutDuration > 0 && (this.log.debug("ping config", Object.assign(Object.assign({}, this.logContext), { timeout: this.pingTimeoutDuration, interval: this.pingIntervalDuration })), this.startPingInterval()), t3(l2.message.value)) : this.state === pr.RECONNECTING && "leave" !== l2.message.case ? (this.state = pr.CONNECTED, null == s2 || s2.removeEventListener("abort", o4), this.startPingInterval(), "reconnect" === (null === (c3 = l2.message) || void 0 === c3 ? void 0 : c3.case) ? t3(l2.message.value) : (this.log.debug("declaring signal reconnected without reconnect response received", this.logContext), t3(void 0), r4 = true)) : this.isEstablishingConnection && "leave" === l2.message.case ? n3(new Is("Received leave request while trying to (re)connect", e.ConnectionErrorReason.LeaveRequest, void 0, l2.message.value.reason)) : i2.reconnect || n3(new Is("did not receive join response, got ".concat(null === (d3 = l2.message) || void 0 === d3 ? void 0 : d3.case, " instead"), e.ConnectionErrorReason.InternalError)), !r4) return;
                  }
                  this.signalLatency && (yield io(this.signalLatency)), this.handleSignalResponse(l2);
                }), this.ws.onclose = (t4) => {
                  this.isEstablishingConnection && n3(new Is("Websocket got closed during a (re)connection attempt", e.ConnectionErrorReason.InternalError)), this.log.warn("websocket closed", Object.assign(Object.assign({}, this.logContext), { reason: t4.reason, code: t4.code, wasClean: t4.wasClean, state: this.state })), this.handleOnClose(t4.reason);
                };
              } finally {
                o3();
              }
            }));
          }
          close() {
            return Xn(this, arguments, void 0, function() {
              var e2 = this;
              let t2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
              return function* () {
                const n2 = yield e2.closingLock.lock();
                try {
                  if (e2.clearPingInterval(), t2 && (e2.state = pr.DISCONNECTING), e2.ws) {
                    e2.ws.onmessage = null, e2.ws.onopen = null, e2.ws.onclose = null;
                    const t3 = new Promise((t4) => {
                      e2.ws ? e2.ws.onclose = () => {
                        t4();
                      } : t4();
                    });
                    e2.ws.readyState < e2.ws.CLOSING && (e2.ws.close(), yield Promise.race([t3, io(250)])), e2.ws = void 0;
                  }
                } finally {
                  t2 && (e2.state = pr.DISCONNECTED), n2();
                }
              }();
            });
          }
          sendOffer(e2) {
            this.log.debug("sending offer", Object.assign(Object.assign({}, this.logContext), { offerSdp: e2.sdp })), this.sendRequest({ case: "offer", value: vr(e2) });
          }
          sendAnswer(e2) {
            return this.log.debug("sending answer", Object.assign(Object.assign({}, this.logContext), { answerSdp: e2.sdp })), this.sendRequest({ case: "answer", value: vr(e2) });
          }
          sendIceCandidate(e2, t2) {
            return this.log.debug("sending ice candidate", Object.assign(Object.assign({}, this.logContext), { candidate: e2 })), this.sendRequest({ case: "trickle", value: new Qt({ candidateInit: JSON.stringify(e2), target: t2 }) });
          }
          sendMuteTrack(e2, t2) {
            return this.sendRequest({ case: "mute", value: new Yt({ sid: e2, muted: t2 }) });
          }
          sendAddTrack(e2) {
            return this.sendRequest({ case: "addTrack", value: e2 });
          }
          sendUpdateLocalMetadata(e2, t2) {
            return Xn(this, arguments, void 0, function(e3, t3) {
              var n2 = this;
              let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
              return function* () {
                const s2 = n2.getNextRequestId();
                return yield n2.sendRequest({ case: "updateMetadata", value: new un({ requestId: s2, metadata: e3, name: t3, attributes: i2 }) }), s2;
              }();
            });
          }
          sendUpdateTrackSettings(e2) {
            this.sendRequest({ case: "trackSetting", value: e2 });
          }
          sendUpdateSubscription(e2) {
            return this.sendRequest({ case: "subscription", value: e2 });
          }
          sendSyncState(e2) {
            return this.sendRequest({ case: "syncState", value: e2 });
          }
          sendUpdateVideoLayers(e2, t2) {
            return this.sendRequest({ case: "updateLayers", value: new ln({ trackSid: e2, layers: t2 }) });
          }
          sendUpdateSubscriptionPermissions(e2, t2) {
            return this.sendRequest({ case: "subscriptionPermission", value: new Sn({ allParticipants: e2, trackPermissions: t2 }) });
          }
          sendSimulateScenario(e2) {
            return this.sendRequest({ case: "simulate", value: e2 });
          }
          sendPing() {
            return Promise.all([this.sendRequest({ case: "ping", value: x.parse(Date.now()) }), this.sendRequest({ case: "pingReq", value: new On({ timestamp: x.parse(Date.now()), rtt: x.parse(this.rtt) }) })]);
          }
          sendUpdateLocalAudioTrack(e2, t2) {
            return this.sendRequest({ case: "updateAudioTrack", value: new rn({ trackSid: e2, features: t2 }) });
          }
          sendLeave() {
            return this.sendRequest({ case: "leave", value: new cn({ reason: $e.CLIENT_INITIATED, action: dn.DISCONNECT }) });
          }
          sendRequest(e2) {
            return Xn(this, arguments, void 0, function(e3) {
              var t2 = this;
              let n2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              return function* () {
                const i2 = !n2 && !function(e4) {
                  const t3 = hr.indexOf(e4.case) >= 0;
                  return Wn.trace("request allowed to bypass queue:", { canPass: t3, req: e4 }), t3;
                }(e3);
                if (i2 && t2.state === pr.RECONNECTING) return void t2.queuedRequests.push(() => Xn(t2, void 0, void 0, function* () {
                  yield this.sendRequest(e3, true);
                }));
                if (n2 || (yield t2.requestQueue.flush()), t2.signalLatency && (yield io(t2.signalLatency)), !t2.ws || t2.ws.readyState !== t2.ws.OPEN) return void t2.log.error("cannot send signal request before connected, type: ".concat(null == e3 ? void 0 : e3.case), t2.logContext);
                const s2 = new Ht({ message: e3 });
                try {
                  t2.useJSON ? t2.ws.send(s2.toJsonString()) : t2.ws.send(s2.toBinary());
                } catch (e4) {
                  t2.log.error("error sending signal message", Object.assign(Object.assign({}, t2.logContext), { error: e4 }));
                }
              }();
            });
          }
          handleSignalResponse(e2) {
            var t2, n2;
            const i2 = e2.message;
            if (null == i2) return void this.log.debug("received unsupported message", this.logContext);
            let s2 = false;
            if ("answer" === i2.case) {
              const e3 = gr(i2.value);
              this.onAnswer && this.onAnswer(e3);
            } else if ("offer" === i2.case) {
              const e3 = gr(i2.value);
              this.onOffer && this.onOffer(e3);
            } else if ("trickle" === i2.case) {
              const e3 = JSON.parse(i2.value.candidateInit);
              this.onTrickle && this.onTrickle(e3, i2.value.target);
            } else "update" === i2.case ? this.onParticipantUpdate && this.onParticipantUpdate(null !== (t2 = i2.value.participants) && void 0 !== t2 ? t2 : []) : "trackPublished" === i2.case ? this.onLocalTrackPublished && this.onLocalTrackPublished(i2.value) : "speakersChanged" === i2.case ? this.onSpeakersChanged && this.onSpeakersChanged(null !== (n2 = i2.value.speakers) && void 0 !== n2 ? n2 : []) : "leave" === i2.case ? this.onLeave && this.onLeave(i2.value) : "mute" === i2.case ? this.onRemoteMuteChanged && this.onRemoteMuteChanged(i2.value.sid, i2.value.muted) : "roomUpdate" === i2.case ? this.onRoomUpdate && i2.value.room && this.onRoomUpdate(i2.value.room) : "connectionQuality" === i2.case ? this.onConnectionQuality && this.onConnectionQuality(i2.value) : "streamStateUpdate" === i2.case ? this.onStreamStateUpdate && this.onStreamStateUpdate(i2.value) : "subscribedQualityUpdate" === i2.case ? this.onSubscribedQualityUpdate && this.onSubscribedQualityUpdate(i2.value) : "subscriptionPermissionUpdate" === i2.case ? this.onSubscriptionPermissionUpdate && this.onSubscriptionPermissionUpdate(i2.value) : "refreshToken" === i2.case ? this.onTokenRefresh && this.onTokenRefresh(i2.value) : "trackUnpublished" === i2.case ? this.onLocalTrackUnpublished && this.onLocalTrackUnpublished(i2.value) : "subscriptionResponse" === i2.case ? this.onSubscriptionError && this.onSubscriptionError(i2.value) : "pong" === i2.case || ("pongResp" === i2.case ? (this.rtt = Date.now() - Number.parseInt(i2.value.lastPingTimestamp.toString()), this.resetPingTimeout(), s2 = true) : "requestResponse" === i2.case ? this.onRequestResponse && this.onRequestResponse(i2.value) : "trackSubscribed" === i2.case ? this.onLocalTrackSubscribed && this.onLocalTrackSubscribed(i2.value.trackSid) : "roomMoved" === i2.case ? (this.onTokenRefresh && this.onTokenRefresh(i2.value.token), this.onRoomMoved && this.onRoomMoved(i2.value)) : this.log.debug("unsupported message", Object.assign(Object.assign({}, this.logContext), { msgCase: i2.case })));
            s2 || this.resetPingTimeout();
          }
          setReconnected() {
            for (; this.queuedRequests.length > 0; ) {
              const e2 = this.queuedRequests.shift();
              e2 && this.requestQueue.run(e2);
            }
          }
          handleOnClose(e2) {
            return Xn(this, void 0, void 0, function* () {
              if (this.state === pr.DISCONNECTED) return;
              const t2 = this.onClose;
              yield this.close(), this.log.debug("websocket connection closed: ".concat(e2), Object.assign(Object.assign({}, this.logContext), { reason: e2 })), t2 && t2(e2);
            });
          }
          handleWSError(e2) {
            this.log.error("websocket error", Object.assign(Object.assign({}, this.logContext), { error: e2 }));
          }
          resetPingTimeout() {
            this.clearPingTimeout(), this.pingTimeoutDuration ? this.pingTimeout = Ks.setTimeout(() => {
              this.log.warn("ping timeout triggered. last pong received at: ".concat(new Date(Date.now() - 1e3 * this.pingTimeoutDuration).toUTCString()), this.logContext), this.handleOnClose("ping timeout");
            }, 1e3 * this.pingTimeoutDuration) : this.log.warn("ping timeout duration not set", this.logContext);
          }
          clearPingTimeout() {
            this.pingTimeout && Ks.clearTimeout(this.pingTimeout);
          }
          startPingInterval() {
            this.clearPingInterval(), this.resetPingTimeout(), this.pingIntervalDuration ? (this.log.debug("start ping interval", this.logContext), this.pingInterval = Ks.setInterval(() => {
              this.sendPing();
            }, 1e3 * this.pingIntervalDuration)) : this.log.warn("ping interval duration not set", this.logContext);
          }
          clearPingInterval() {
            this.log.debug("clearing ping interval", this.logContext), this.clearPingTimeout(), this.pingInterval && Ks.clearInterval(this.pingInterval);
          }
        }
        function gr(e2) {
          const t2 = { type: "offer", sdp: e2.sdp };
          switch (e2.type) {
            case "answer":
            case "offer":
            case "pranswer":
            case "rollback":
              t2.type = e2.type;
          }
          return t2;
        }
        function vr(e2) {
          return new tn({ sdp: e2.sdp, type: e2.type });
        }
        var fr, kr, br, yr, Tr, Cr = {}, Sr = {}, Er = { exports: {} };
        function wr() {
          if (fr) return Er.exports;
          fr = 1;
          var e2 = Er.exports = { v: [{ name: "version", reg: /^(\d*)$/ }], o: [{ name: "origin", reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/, names: ["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"], format: "%s %s %d %s IP%d %s" }], s: [{ name: "name" }], i: [{ name: "description" }], u: [{ name: "uri" }], e: [{ name: "email" }], p: [{ name: "phone" }], z: [{ name: "timezones" }], r: [{ name: "repeats" }], t: [{ name: "timing", reg: /^(\d*) (\d*)/, names: ["start", "stop"], format: "%d %d" }], c: [{ name: "connection", reg: /^IN IP(\d) (\S*)/, names: ["version", "ip"], format: "IN IP%d %s" }], b: [{ push: "bandwidth", reg: /^(TIAS|AS|CT|RR|RS):(\d*)/, names: ["type", "limit"], format: "%s:%s" }], m: [{ reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/, names: ["type", "port", "protocol", "payloads"], format: "%s %d %s %s" }], a: [{ push: "rtp", reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/, names: ["payload", "codec", "rate", "encoding"], format: function(e3) {
            return e3.encoding ? "rtpmap:%d %s/%s/%s" : e3.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
          } }, { push: "fmtp", reg: /^fmtp:(\d*) ([\S| ]*)/, names: ["payload", "config"], format: "fmtp:%d %s" }, { name: "control", reg: /^control:(.*)/, format: "control:%s" }, { name: "rtcp", reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/, names: ["port", "netType", "ipVer", "address"], format: function(e3) {
            return null != e3.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
          } }, { push: "rtcpFbTrrInt", reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/, names: ["payload", "value"], format: "rtcp-fb:%s trr-int %d" }, { push: "rtcpFb", reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/, names: ["payload", "type", "subtype"], format: function(e3) {
            return null != e3.subtype ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
          } }, { push: "ext", reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/, names: ["value", "direction", "encrypt-uri", "uri", "config"], format: function(e3) {
            return "extmap:%d" + (e3.direction ? "/%s" : "%v") + (e3["encrypt-uri"] ? " %s" : "%v") + " %s" + (e3.config ? " %s" : "");
          } }, { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ }, { push: "crypto", reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/, names: ["id", "suite", "config", "sessionConfig"], format: function(e3) {
            return null != e3.sessionConfig ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
          } }, { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" }, { name: "connectionType", reg: /^connection:(new|existing)/, format: "connection:%s" }, { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" }, { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" }, { name: "ptime", reg: /^ptime:(\d*(?:\.\d*)*)/, format: "ptime:%d" }, { name: "maxptime", reg: /^maxptime:(\d*(?:\.\d*)*)/, format: "maxptime:%d" }, { name: "direction", reg: /^(sendrecv|recvonly|sendonly|inactive)/ }, { name: "icelite", reg: /^(ice-lite)/ }, { name: "iceUfrag", reg: /^ice-ufrag:(\S*)/, format: "ice-ufrag:%s" }, { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" }, { name: "fingerprint", reg: /^fingerprint:(\S*) (\S*)/, names: ["type", "hash"], format: "fingerprint:%s %s" }, { push: "candidates", reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/, names: ["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"], format: function(e3) {
            var t2 = "candidate:%s %d %s %d %s %d typ %s";
            return t2 += null != e3.raddr ? " raddr %s rport %d" : "%v%v", t2 += null != e3.tcptype ? " tcptype %s" : "%v", null != e3.generation && (t2 += " generation %d"), t2 += null != e3["network-id"] ? " network-id %d" : "%v", t2 += null != e3["network-cost"] ? " network-cost %d" : "%v";
          } }, { name: "endOfCandidates", reg: /^(end-of-candidates)/ }, { name: "remoteCandidates", reg: /^remote-candidates:(.*)/, format: "remote-candidates:%s" }, { name: "iceOptions", reg: /^ice-options:(\S*)/, format: "ice-options:%s" }, { push: "ssrcs", reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/, names: ["id", "attribute", "value"], format: function(e3) {
            var t2 = "ssrc:%d";
            return null != e3.attribute && (t2 += " %s", null != e3.value && (t2 += ":%s")), t2;
          } }, { push: "ssrcGroups", reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/, names: ["semantics", "ssrcs"], format: "ssrc-group:%s %s" }, { name: "msidSemantic", reg: /^msid-semantic:\s?(\w*) (\S*)/, names: ["semantic", "token"], format: "msid-semantic: %s %s" }, { push: "groups", reg: /^group:(\w*) (.*)/, names: ["type", "mids"], format: "group:%s %s" }, { name: "rtcpMux", reg: /^(rtcp-mux)/ }, { name: "rtcpRsize", reg: /^(rtcp-rsize)/ }, { name: "sctpmap", reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/, names: ["sctpmapNumber", "app", "maxMessageSize"], format: function(e3) {
            return null != e3.maxMessageSize ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
          } }, { name: "xGoogleFlag", reg: /^x-google-flag:([^\s]*)/, format: "x-google-flag:%s" }, { push: "rids", reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/, names: ["id", "direction", "params"], format: function(e3) {
            return e3.params ? "rid:%s %s %s" : "rid:%s %s";
          } }, { push: "imageattrs", reg: new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"), names: ["pt", "dir1", "attrs1", "dir2", "attrs2"], format: function(e3) {
            return "imageattr:%s %s %s" + (e3.dir2 ? " %s %s" : "");
          } }, { name: "simulcast", reg: new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"), names: ["dir1", "list1", "dir2", "list2"], format: function(e3) {
            return "simulcast:%s %s" + (e3.dir2 ? " %s %s" : "");
          } }, { name: "simulcast_03", reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/, names: ["value"], format: "simulcast: %s" }, { name: "framerate", reg: /^framerate:(\d+(?:$|\.\d+))/, format: "framerate:%s" }, { name: "sourceFilter", reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/, names: ["filterMode", "netType", "addressTypes", "destAddress", "srcList"], format: "source-filter: %s %s %s %s %s" }, { name: "bundleOnly", reg: /^(bundle-only)/ }, { name: "label", reg: /^label:(.+)/, format: "label:%s" }, { name: "sctpPort", reg: /^sctp-port:(\d+)$/, format: "sctp-port:%s" }, { name: "maxMessageSize", reg: /^max-message-size:(\d+)$/, format: "max-message-size:%s" }, { push: "tsRefClocks", reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/, names: ["clksrc", "clksrcExt"], format: function(e3) {
            return "ts-refclk:%s" + (null != e3.clksrcExt ? "=%s" : "");
          } }, { name: "mediaClk", reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/, names: ["id", "mediaClockName", "mediaClockValue", "rateNumerator", "rateDenominator"], format: function(e3) {
            var t2 = "mediaclk:";
            return t2 += null != e3.id ? "id=%s %s" : "%v%s", t2 += null != e3.mediaClockValue ? "=%s" : "", t2 += null != e3.rateNumerator ? " rate=%s" : "", t2 += null != e3.rateDenominator ? "/%s" : "";
          } }, { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" }, { name: "content", reg: /^content:(.+)/, format: "content:%s" }, { name: "bfcpFloorCtrl", reg: /^floorctrl:(c-only|s-only|c-s)/, format: "floorctrl:%s" }, { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" }, { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" }, { name: "bfcpFloorId", reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/, names: ["id", "mStream"], format: "floorid:%s mstrm:%s" }, { push: "invalid", names: ["value"] }] };
          return Object.keys(e2).forEach(function(t2) {
            e2[t2].forEach(function(e3) {
              e3.reg || (e3.reg = /(.*)/), e3.format || (e3.format = "%s");
            });
          }), Er.exports;
        }
        function Pr() {
          return kr || (kr = 1, function(e2) {
            var t2 = function(e3) {
              return String(Number(e3)) === e3 ? Number(e3) : e3;
            }, n2 = function(e3, n3, i3) {
              var s3 = e3.name && e3.names;
              e3.push && !n3[e3.push] ? n3[e3.push] = [] : s3 && !n3[e3.name] && (n3[e3.name] = {});
              var o3 = e3.push ? {} : s3 ? n3[e3.name] : n3;
              !function(e4, n4, i4, s4) {
                if (s4 && !i4) n4[s4] = t2(e4[1]);
                else for (var o4 = 0; o4 < i4.length; o4 += 1) null != e4[o4 + 1] && (n4[i4[o4]] = t2(e4[o4 + 1]));
              }(i3.match(e3.reg), o3, e3.names, e3.name), e3.push && n3[e3.push].push(o3);
            }, i2 = wr(), s2 = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
            e2.parse = function(e3) {
              var t3 = {}, o3 = [], r2 = t3;
              return e3.split(/(\r\n|\r|\n)/).filter(s2).forEach(function(e4) {
                var t4 = e4[0], s3 = e4.slice(2);
                "m" === t4 && (o3.push({ rtp: [], fmtp: [] }), r2 = o3[o3.length - 1]);
                for (var a2 = 0; a2 < (i2[t4] || []).length; a2 += 1) {
                  var c2 = i2[t4][a2];
                  if (c2.reg.test(s3)) return n2(c2, r2, s3);
                }
              }), t3.media = o3, t3;
            };
            var o2 = function(e3, n3) {
              var i3 = n3.split(/=(.+)/, 2);
              return 2 === i3.length ? e3[i3[0]] = t2(i3[1]) : 1 === i3.length && n3.length > 1 && (e3[i3[0]] = void 0), e3;
            };
            e2.parseParams = function(e3) {
              return e3.split(/;\s?/).reduce(o2, {});
            }, e2.parseFmtpConfig = e2.parseParams, e2.parsePayloads = function(e3) {
              return e3.toString().split(" ").map(Number);
            }, e2.parseRemoteCandidates = function(e3) {
              for (var n3 = [], i3 = e3.split(" ").map(t2), s3 = 0; s3 < i3.length; s3 += 3) n3.push({ component: i3[s3], ip: i3[s3 + 1], port: i3[s3 + 2] });
              return n3;
            }, e2.parseImageAttributes = function(e3) {
              return e3.split(" ").map(function(e4) {
                return e4.substring(1, e4.length - 1).split(",").reduce(o2, {});
              });
            }, e2.parseSimulcastStreamList = function(e3) {
              return e3.split(";").map(function(e4) {
                return e4.split(",").map(function(e5) {
                  var n3, i3 = false;
                  return "~" !== e5[0] ? n3 = t2(e5) : (n3 = t2(e5.substring(1, e5.length)), i3 = true), { scid: n3, paused: i3 };
                });
              });
            };
          }(Sr)), Sr;
        }
        function Rr() {
          if (yr) return br;
          yr = 1;
          var e2 = wr(), t2 = /%[sdv%]/g, n2 = function(e3) {
            var n3 = 1, i3 = arguments, s3 = i3.length;
            return e3.replace(t2, function(e4) {
              if (n3 >= s3) return e4;
              var t3 = i3[n3];
              switch (n3 += 1, e4) {
                case "%%":
                  return "%";
                case "%s":
                  return String(t3);
                case "%d":
                  return Number(t3);
                case "%v":
                  return "";
              }
            });
          }, i2 = function(e3, t3, i3) {
            var s3 = [e3 + "=" + (t3.format instanceof Function ? t3.format(t3.push ? i3 : i3[t3.name]) : t3.format)];
            if (t3.names) for (var o3 = 0; o3 < t3.names.length; o3 += 1) {
              var r2 = t3.names[o3];
              t3.name ? s3.push(i3[t3.name][r2]) : s3.push(i3[t3.names[o3]]);
            }
            else s3.push(i3[t3.name]);
            return n2.apply(null, s3);
          }, s2 = ["v", "o", "s", "i", "u", "e", "p", "c", "b", "t", "r", "z", "a"], o2 = ["i", "c", "b", "a"];
          return br = function(t3, n3) {
            n3 = n3 || {}, null == t3.version && (t3.version = 0), null == t3.name && (t3.name = " "), t3.media.forEach(function(e3) {
              null == e3.payloads && (e3.payloads = "");
            });
            var r2 = n3.outerOrder || s2, a2 = n3.innerOrder || o2, c2 = [];
            return r2.forEach(function(n4) {
              e2[n4].forEach(function(e3) {
                e3.name in t3 && null != t3[e3.name] ? c2.push(i2(n4, e3, t3)) : e3.push in t3 && null != t3[e3.push] && t3[e3.push].forEach(function(t4) {
                  c2.push(i2(n4, e3, t4));
                });
              });
            }), t3.media.forEach(function(t4) {
              c2.push(i2("m", e2.m[0], t4)), a2.forEach(function(n4) {
                e2[n4].forEach(function(e3) {
                  e3.name in t4 && null != t4[e3.name] ? c2.push(i2(n4, e3, t4)) : e3.push in t4 && null != t4[e3.push] && t4[e3.push].forEach(function(t5) {
                    c2.push(i2(n4, e3, t5));
                  });
                });
              });
            }), c2.join("\r\n") + "\r\n";
          }, br;
        }
        var Ir = function() {
          if (Tr) return Cr;
          Tr = 1;
          var e2 = Pr(), t2 = Rr(), n2 = wr();
          return Cr.grammar = n2, Cr.write = t2, Cr.parse = e2.parse, Cr.parseParams = e2.parseParams, Cr.parseFmtpConfig = e2.parseFmtpConfig, Cr.parsePayloads = e2.parsePayloads, Cr.parseRemoteCandidates = e2.parseRemoteCandidates, Cr.parseImageAttributes = e2.parseImageAttributes, Cr.parseSimulcastStreamList = e2.parseSimulcastStreamList, Cr;
        }();
        function Or(e2, t2, n2) {
          var i2, s2, o2;
          void 0 === t2 && (t2 = 50), void 0 === n2 && (n2 = {});
          var r2 = null != (i2 = n2.isImmediate) && i2, a2 = null != (s2 = n2.callback) && s2, c2 = n2.maxWait, d2 = Date.now(), l2 = [];
          function u2() {
            if (void 0 !== c2) {
              var e3 = Date.now() - d2;
              if (e3 + t2 >= c2) return c2 - e3;
            }
            return t2;
          }
          var h2 = function() {
            var t3 = [].slice.call(arguments), n3 = this;
            return new Promise(function(i3, s3) {
              var c3 = r2 && void 0 === o2;
              if (void 0 !== o2 && clearTimeout(o2), o2 = setTimeout(function() {
                if (o2 = void 0, d2 = Date.now(), !r2) {
                  var i4 = e2.apply(n3, t3);
                  a2 && a2(i4), l2.forEach(function(e3) {
                    return (0, e3.resolve)(i4);
                  }), l2 = [];
                }
              }, u2()), c3) {
                var h3 = e2.apply(n3, t3);
                return a2 && a2(h3), i3(h3);
              }
              l2.push({ resolve: i3, reject: s3 });
            });
          };
          return h2.cancel = function(e3) {
            void 0 !== o2 && clearTimeout(o2), l2.forEach(function(t3) {
              return (0, t3.reject)(e3);
            }), l2 = [];
          }, h2;
        }
        const Dr = "negotiationStarted", xr = "negotiationComplete", Mr = "rtpVideoPayloadTypes";
        class Nr extends ni.EventEmitter {
          get pc() {
            return this._pc || (this._pc = this.createPC()), this._pc;
          }
          constructor(t2) {
            let n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            var i2;
            super(), this.log = Wn, this.ddExtID = 0, this.pendingCandidates = [], this.restartingIce = false, this.renegotiate = false, this.trackBitrates = [], this.remoteStereoMids = [], this.remoteNackMids = [], this.negotiate = Or((e2) => Xn(this, void 0, void 0, function* () {
              this.emit(Dr);
              try {
                yield this.createAndSendOffer();
              } catch (t3) {
                if (!e2) throw t3;
                e2(t3);
              }
            }), 20), this.close = () => {
              this._pc && (this._pc.close(), this._pc.onconnectionstatechange = null, this._pc.oniceconnectionstatechange = null, this._pc.onicegatheringstatechange = null, this._pc.ondatachannel = null, this._pc.onnegotiationneeded = null, this._pc.onsignalingstatechange = null, this._pc.onicecandidate = null, this._pc.ondatachannel = null, this._pc.ontrack = null, this._pc.onconnectionstatechange = null, this._pc.oniceconnectionstatechange = null, this._pc = null);
            }, this.log = Gn(null !== (i2 = n2.loggerName) && void 0 !== i2 ? i2 : e.LoggerNames.PCTransport), this.loggerOptions = n2, this.config = t2, this._pc = this.createPC();
          }
          createPC() {
            const e2 = new RTCPeerConnection(this.config);
            return e2.onicecandidate = (e3) => {
              var t2;
              e3.candidate && (null === (t2 = this.onIceCandidate) || void 0 === t2 || t2.call(this, e3.candidate));
            }, e2.onicecandidateerror = (e3) => {
              var t2;
              null === (t2 = this.onIceCandidateError) || void 0 === t2 || t2.call(this, e3);
            }, e2.oniceconnectionstatechange = () => {
              var t2;
              null === (t2 = this.onIceConnectionStateChange) || void 0 === t2 || t2.call(this, e2.iceConnectionState);
            }, e2.onsignalingstatechange = () => {
              var t2;
              null === (t2 = this.onSignalingStatechange) || void 0 === t2 || t2.call(this, e2.signalingState);
            }, e2.onconnectionstatechange = () => {
              var t2;
              null === (t2 = this.onConnectionStateChange) || void 0 === t2 || t2.call(this, e2.connectionState);
            }, e2.ondatachannel = (e3) => {
              var t2;
              null === (t2 = this.onDataChannel) || void 0 === t2 || t2.call(this, e3);
            }, e2.ontrack = (e3) => {
              var t2;
              null === (t2 = this.onTrack) || void 0 === t2 || t2.call(this, e3);
            }, e2;
          }
          get logContext() {
            var e2, t2;
            return Object.assign({}, null === (t2 = (e2 = this.loggerOptions).loggerContextCb) || void 0 === t2 ? void 0 : t2.call(e2));
          }
          get isICEConnected() {
            return null !== this._pc && ("connected" === this.pc.iceConnectionState || "completed" === this.pc.iceConnectionState);
          }
          addIceCandidate(e2) {
            return Xn(this, void 0, void 0, function* () {
              if (this.pc.remoteDescription && !this.restartingIce) return this.pc.addIceCandidate(e2);
              this.pendingCandidates.push(e2);
            });
          }
          setRemoteDescription(e2) {
            return Xn(this, void 0, void 0, function* () {
              var t2;
              let n2;
              if ("offer" === e2.type) {
                let { stereoMids: t3, nackMids: n3 } = function(e3) {
                  var t4;
                  const n4 = [], i2 = [], s2 = Ir.parse(null !== (t4 = e3.sdp) && void 0 !== t4 ? t4 : "");
                  let o2 = 0;
                  return s2.media.forEach((e4) => {
                    var t5;
                    "audio" === e4.type && (e4.rtp.some((e5) => "opus" === e5.codec && (o2 = e5.payload, true)), (null === (t5 = e4.rtcpFb) || void 0 === t5 ? void 0 : t5.some((e5) => e5.payload === o2 && "nack" === e5.type)) && i2.push(e4.mid), e4.fmtp.some((t6) => t6.payload === o2 && (t6.config.includes("sprop-stereo=1") && n4.push(e4.mid), true)));
                  }), { stereoMids: n4, nackMids: i2 };
                }(e2);
                this.remoteStereoMids = t3, this.remoteNackMids = n3;
              } else if ("answer" === e2.type) {
                const i2 = Ir.parse(null !== (t2 = e2.sdp) && void 0 !== t2 ? t2 : "");
                i2.media.forEach((e3) => {
                  "audio" === e3.type && this.trackBitrates.some((t3) => {
                    if (!t3.transceiver || e3.mid != t3.transceiver.mid) return false;
                    let n3 = 0;
                    if (e3.rtp.some((e4) => e4.codec.toUpperCase() === t3.codec.toUpperCase() && (n3 = e4.payload, true)), 0 === n3) return true;
                    let i3 = false;
                    for (const s2 of e3.fmtp) if (s2.payload === n3) {
                      s2.config = s2.config.split(";").filter((e4) => !e4.includes("maxaveragebitrate")).join(";"), t3.maxbr > 0 && (s2.config += ";maxaveragebitrate=".concat(1e3 * t3.maxbr)), i3 = true;
                      break;
                    }
                    return i3 || t3.maxbr > 0 && e3.fmtp.push({ payload: n3, config: "maxaveragebitrate=".concat(1e3 * t3.maxbr) }), true;
                  });
                }), n2 = Ir.write(i2);
              }
              if (yield this.setMungedSDP(e2, n2, true), this.pendingCandidates.forEach((e3) => {
                this.pc.addIceCandidate(e3);
              }), this.pendingCandidates = [], this.restartingIce = false, this.renegotiate) this.renegotiate = false, yield this.createAndSendOffer();
              else if ("answer" === e2.type && (this.emit(xr), e2.sdp)) {
                Ir.parse(e2.sdp).media.forEach((e3) => {
                  "video" === e3.type && this.emit(Mr, e3.rtp);
                });
              }
            });
          }
          createAndSendOffer(e2) {
            return Xn(this, void 0, void 0, function* () {
              var t2;
              if (void 0 === this.onOffer) return;
              if ((null == e2 ? void 0 : e2.iceRestart) && (this.log.debug("restarting ICE", this.logContext), this.restartingIce = true), this._pc && "have-local-offer" === this._pc.signalingState) {
                const t3 = this._pc.remoteDescription;
                if (!(null == e2 ? void 0 : e2.iceRestart) || !t3) return void (this.renegotiate = true);
                yield this._pc.setRemoteDescription(t3);
              } else if (!this._pc || "closed" === this._pc.signalingState) return void this.log.warn("could not createOffer with closed peer connection", this.logContext);
              this.log.debug("starting to negotiate", this.logContext);
              const n2 = yield this.pc.createOffer(e2);
              this.log.debug("original offer", Object.assign({ sdp: n2.sdp }, this.logContext));
              const i2 = Ir.parse(null !== (t2 = n2.sdp) && void 0 !== t2 ? t2 : "");
              i2.media.forEach((e3) => {
                Ar(e3), "audio" === e3.type ? _r(e3, [], []) : "video" === e3.type && this.trackBitrates.some((t3) => {
                  if (!e3.msid || !t3.cid || !e3.msid.includes(t3.cid)) return false;
                  let n3 = 0;
                  if (e3.rtp.some((e4) => e4.codec.toUpperCase() === t3.codec.toUpperCase() && (n3 = e4.payload, true)), 0 === n3) return true;
                  if (co(t3.codec) && this.ensureVideoDDExtensionForSVC(e3, i2), "av1" !== t3.codec) return true;
                  const s2 = Math.round(0.7 * t3.maxbr);
                  for (const t4 of e3.fmtp) if (t4.payload === n3) {
                    t4.config.includes("x-google-start-bitrate") || (t4.config += ";x-google-start-bitrate=".concat(s2));
                    break;
                  }
                  return true;
                });
              }), yield this.setMungedSDP(n2, Ir.write(i2)), this.onOffer(n2);
            });
          }
          createAndSetAnswer() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              const t2 = yield this.pc.createAnswer(), n2 = Ir.parse(null !== (e2 = t2.sdp) && void 0 !== e2 ? e2 : "");
              return n2.media.forEach((e3) => {
                Ar(e3), "audio" === e3.type && _r(e3, this.remoteStereoMids, this.remoteNackMids);
              }), yield this.setMungedSDP(t2, Ir.write(n2)), t2;
            });
          }
          createDataChannel(e2, t2) {
            return this.pc.createDataChannel(e2, t2);
          }
          addTransceiver(e2, t2) {
            return this.pc.addTransceiver(e2, t2);
          }
          addTrack(e2) {
            if (!this._pc) throw new Ms("PC closed, cannot add track");
            return this._pc.addTrack(e2);
          }
          setTrackCodecBitrate(e2) {
            this.trackBitrates.push(e2);
          }
          setConfiguration(e2) {
            var t2;
            if (!this._pc) throw new Ms("PC closed, cannot configure");
            return null === (t2 = this._pc) || void 0 === t2 ? void 0 : t2.setConfiguration(e2);
          }
          canRemoveTrack() {
            var e2;
            return !!(null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.removeTrack);
          }
          removeTrack(e2) {
            var t2;
            return null === (t2 = this._pc) || void 0 === t2 ? void 0 : t2.removeTrack(e2);
          }
          getConnectionState() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.connectionState) && void 0 !== t2 ? t2 : "closed";
          }
          getICEConnectionState() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.iceConnectionState) && void 0 !== t2 ? t2 : "closed";
          }
          getSignallingState() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.signalingState) && void 0 !== t2 ? t2 : "closed";
          }
          getTransceivers() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.getTransceivers()) && void 0 !== t2 ? t2 : [];
          }
          getSenders() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.getSenders()) && void 0 !== t2 ? t2 : [];
          }
          getLocalDescription() {
            var e2;
            return null === (e2 = this._pc) || void 0 === e2 ? void 0 : e2.localDescription;
          }
          getRemoteDescription() {
            var e2;
            return null === (e2 = this.pc) || void 0 === e2 ? void 0 : e2.remoteDescription;
          }
          getStats() {
            return this.pc.getStats();
          }
          getConnectedAddress() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              if (!this._pc) return;
              let t2 = "";
              const n2 = /* @__PURE__ */ new Map(), i2 = /* @__PURE__ */ new Map();
              if ((yield this._pc.getStats()).forEach((e3) => {
                switch (e3.type) {
                  case "transport":
                    t2 = e3.selectedCandidatePairId;
                    break;
                  case "candidate-pair":
                    "" === t2 && e3.selected && (t2 = e3.id), n2.set(e3.id, e3);
                    break;
                  case "remote-candidate":
                    i2.set(e3.id, "".concat(e3.address, ":").concat(e3.port));
                }
              }), "" === t2) return;
              const s2 = null === (e2 = n2.get(t2)) || void 0 === e2 ? void 0 : e2.remoteCandidateId;
              return void 0 !== s2 ? i2.get(s2) : void 0;
            });
          }
          setMungedSDP(e2, t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              if (t2) {
                const i2 = e2.sdp;
                e2.sdp = t2;
                try {
                  return this.log.debug("setting munged ".concat(n2 ? "remote" : "local", " description"), this.logContext), void (n2 ? yield this.pc.setRemoteDescription(e2) : yield this.pc.setLocalDescription(e2));
                } catch (n3) {
                  this.log.warn("not able to set ".concat(e2.type, ", falling back to unmodified sdp"), Object.assign(Object.assign({}, this.logContext), { error: n3, sdp: t2 })), e2.sdp = i2;
                }
              }
              try {
                n2 ? yield this.pc.setRemoteDescription(e2) : yield this.pc.setLocalDescription(e2);
              } catch (t3) {
                let i2 = "unknown error";
                t3 instanceof Error ? i2 = t3.message : "string" == typeof t3 && (i2 = t3);
                const s2 = { error: i2, sdp: e2.sdp };
                throw !n2 && this.pc.remoteDescription && (s2.remoteSdp = this.pc.remoteDescription), this.log.error("unable to set ".concat(e2.type), Object.assign(Object.assign({}, this.logContext), { fields: s2 })), new Ns(i2);
              }
            });
          }
          ensureVideoDDExtensionForSVC(e2, t2) {
            var n2, i2;
            if (!(null === (n2 = e2.ext) || void 0 === n2 ? void 0 : n2.some((e3) => e3.uri === no))) {
              if (0 === this.ddExtID) {
                let e3 = 0;
                t2.media.forEach((t3) => {
                  var n3;
                  "video" === t3.type && (null === (n3 = t3.ext) || void 0 === n3 || n3.forEach((t4) => {
                    t4.value > e3 && (e3 = t4.value);
                  }));
                }), this.ddExtID = e3 + 1;
              }
              null === (i2 = e2.ext) || void 0 === i2 || i2.push({ value: this.ddExtID, uri: no });
            }
          }
        }
        function _r(e2, t2, n2) {
          let i2 = 0;
          e2.rtp.some((e3) => "opus" === e3.codec && (i2 = e3.payload, true)), i2 > 0 && (e2.rtcpFb || (e2.rtcpFb = []), n2.includes(e2.mid) && !e2.rtcpFb.some((e3) => e3.payload === i2 && "nack" === e3.type) && e2.rtcpFb.push({ payload: i2, type: "nack" }), t2.includes(e2.mid) && e2.fmtp.some((e3) => e3.payload === i2 && (e3.config.includes("stereo=1") || (e3.config += ";stereo=1"), true)));
        }
        function Ar(e2) {
          if (e2.connection) {
            const t2 = e2.connection.ip.indexOf(":") >= 0;
            (4 === e2.connection.version && t2 || 6 === e2.connection.version && !t2) && (e2.connection.ip = "0.0.0.0", e2.connection.version = 4);
          }
        }
        const Lr = "vp8", Ur = { audioPreset: e.AudioPresets.music, dtx: true, red: true, forceStereo: false, simulcast: true, screenShareEncoding: to.h1080fps15.encoding, stopMicTrackOnMute: false, videoCodec: Lr, backupCodec: true }, jr = { deviceId: { ideal: "default" }, autoGainControl: true, echoCancellation: true, noiseSuppression: true, voiceIsolation: true }, Fr = { deviceId: { ideal: "default" }, resolution: $s.h720.resolution }, Br = { adaptiveStream: false, dynacast: false, stopLocalTrackOnUnpublish: true, reconnectPolicy: new Yn(), disconnectOnPageLeave: true, webAudioMix: false }, Vr = { autoSubscribe: true, maxRetries: 1, peerConnectionTimeout: 15e3, websocketTimeout: 15e3 };
        var qr;
        !function(e2) {
          e2[e2.NEW = 0] = "NEW", e2[e2.CONNECTING = 1] = "CONNECTING", e2[e2.CONNECTED = 2] = "CONNECTED", e2[e2.FAILED = 3] = "FAILED", e2[e2.CLOSING = 4] = "CLOSING", e2[e2.CLOSED = 5] = "CLOSED";
        }(qr || (qr = {}));
        class Kr {
          get needsPublisher() {
            return this.isPublisherConnectionRequired;
          }
          get needsSubscriber() {
            return this.isSubscriberConnectionRequired;
          }
          get currentState() {
            return this.state;
          }
          constructor(t2, n2, i2) {
            var o2;
            this.peerConnectionTimeout = Vr.peerConnectionTimeout, this.log = Wn, this.updateState = () => {
              var e2;
              const t3 = this.state, n3 = this.requiredTransports.map((e3) => e3.getConnectionState());
              n3.every((e3) => "connected" === e3) ? this.state = qr.CONNECTED : n3.some((e3) => "failed" === e3) ? this.state = qr.FAILED : n3.some((e3) => "connecting" === e3) ? this.state = qr.CONNECTING : n3.every((e3) => "closed" === e3) ? this.state = qr.CLOSED : n3.some((e3) => "closed" === e3) ? this.state = qr.CLOSING : n3.every((e3) => "new" === e3) && (this.state = qr.NEW), t3 !== this.state && (this.log.debug("pc state change: from ".concat(qr[t3], " to ").concat(qr[this.state]), this.logContext), null === (e2 = this.onStateChange) || void 0 === e2 || e2.call(this, this.state, this.publisher.getConnectionState(), this.subscriber.getConnectionState()));
            }, this.log = Gn(null !== (o2 = i2.loggerName) && void 0 !== o2 ? o2 : e.LoggerNames.PCManager), this.loggerOptions = i2, this.isPublisherConnectionRequired = !n2, this.isSubscriberConnectionRequired = n2, this.publisher = new Nr(t2, i2), this.subscriber = new Nr(t2, i2), this.publisher.onConnectionStateChange = this.updateState, this.subscriber.onConnectionStateChange = this.updateState, this.publisher.onIceConnectionStateChange = this.updateState, this.subscriber.onIceConnectionStateChange = this.updateState, this.publisher.onSignalingStatechange = this.updateState, this.subscriber.onSignalingStatechange = this.updateState, this.publisher.onIceCandidate = (e2) => {
              var t3;
              null === (t3 = this.onIceCandidate) || void 0 === t3 || t3.call(this, e2, qt.PUBLISHER);
            }, this.subscriber.onIceCandidate = (e2) => {
              var t3;
              null === (t3 = this.onIceCandidate) || void 0 === t3 || t3.call(this, e2, qt.SUBSCRIBER);
            }, this.subscriber.onDataChannel = (e2) => {
              var t3;
              null === (t3 = this.onDataChannel) || void 0 === t3 || t3.call(this, e2);
            }, this.subscriber.onTrack = (e2) => {
              var t3;
              null === (t3 = this.onTrack) || void 0 === t3 || t3.call(this, e2);
            }, this.publisher.onOffer = (e2) => {
              var t3;
              null === (t3 = this.onPublisherOffer) || void 0 === t3 || t3.call(this, e2);
            }, this.state = qr.NEW, this.connectionLock = new s(), this.remoteOfferLock = new s();
          }
          get logContext() {
            var e2, t2;
            return Object.assign({}, null === (t2 = (e2 = this.loggerOptions).loggerContextCb) || void 0 === t2 ? void 0 : t2.call(e2));
          }
          requirePublisher() {
            let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            this.isPublisherConnectionRequired = e2, this.updateState();
          }
          requireSubscriber() {
            let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            this.isSubscriberConnectionRequired = e2, this.updateState();
          }
          createAndSendPublisherOffer(e2) {
            return this.publisher.createAndSendOffer(e2);
          }
          setPublisherAnswer(e2) {
            return this.publisher.setRemoteDescription(e2);
          }
          removeTrack(e2) {
            return this.publisher.removeTrack(e2);
          }
          close() {
            return Xn(this, void 0, void 0, function* () {
              if (this.publisher && "closed" !== this.publisher.getSignallingState()) {
                const e2 = this.publisher;
                for (const t2 of e2.getSenders()) try {
                  e2.canRemoveTrack() && e2.removeTrack(t2);
                } catch (e3) {
                  this.log.warn("could not removeTrack", Object.assign(Object.assign({}, this.logContext), { error: e3 }));
                }
              }
              yield Promise.all([this.publisher.close(), this.subscriber.close()]), this.updateState();
            });
          }
          triggerIceRestart() {
            return Xn(this, void 0, void 0, function* () {
              this.subscriber.restartingIce = true, this.needsPublisher && (yield this.createAndSendPublisherOffer({ iceRestart: true }));
            });
          }
          addIceCandidate(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              t2 === qt.PUBLISHER ? yield this.publisher.addIceCandidate(e2) : yield this.subscriber.addIceCandidate(e2);
            });
          }
          createSubscriberAnswerFromOffer(e2) {
            return Xn(this, void 0, void 0, function* () {
              this.log.debug("received server offer", Object.assign(Object.assign({}, this.logContext), { RTCSdpType: e2.type, sdp: e2.sdp, signalingState: this.subscriber.getSignallingState().toString() }));
              const t2 = yield this.remoteOfferLock.lock();
              try {
                yield this.subscriber.setRemoteDescription(e2);
                return yield this.subscriber.createAndSetAnswer();
              } finally {
                t2();
              }
            });
          }
          updateConfiguration(e2, t2) {
            this.publisher.setConfiguration(e2), this.subscriber.setConfiguration(e2), t2 && this.triggerIceRestart();
          }
          ensurePCTransportConnection(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2;
              const i2 = yield this.connectionLock.lock();
              try {
                this.isPublisherConnectionRequired && "connected" !== this.publisher.getConnectionState() && "connecting" !== this.publisher.getConnectionState() && (this.log.debug("negotiation required, start negotiating", this.logContext), this.publisher.negotiate()), yield Promise.all(null === (n2 = this.requiredTransports) || void 0 === n2 ? void 0 : n2.map((n3) => this.ensureTransportConnected(n3, e2, t2)));
              } finally {
                i2();
              }
            });
          }
          negotiate(e2) {
            return Xn(this, void 0, void 0, function* () {
              return new Promise((t2, n2) => Xn(this, void 0, void 0, function* () {
                const i2 = setTimeout(() => {
                  n2("negotiation timed out");
                }, this.peerConnectionTimeout);
                e2.signal.addEventListener("abort", () => {
                  clearTimeout(i2), n2("negotiation aborted");
                }), this.publisher.once(Dr, () => {
                  e2.signal.aborted || this.publisher.once(xr, () => {
                    clearTimeout(i2), t2();
                  });
                }), yield this.publisher.negotiate((e3) => {
                  clearTimeout(i2), n2(e3);
                });
              }));
            });
          }
          addPublisherTransceiver(e2, t2) {
            return this.publisher.addTransceiver(e2, t2);
          }
          addPublisherTrack(e2) {
            return this.publisher.addTrack(e2);
          }
          createPublisherDataChannel(e2, t2) {
            return this.publisher.createDataChannel(e2, t2);
          }
          getConnectedAddress(e2) {
            return e2 === qt.PUBLISHER || e2 === qt.SUBSCRIBER ? this.publisher.getConnectedAddress() : this.requiredTransports[0].getConnectedAddress();
          }
          get requiredTransports() {
            const e2 = [];
            return this.isPublisherConnectionRequired && e2.push(this.publisher), this.isSubscriberConnectionRequired && e2.push(this.subscriber), e2;
          }
          ensureTransportConnected(t2, n2) {
            return Xn(this, arguments, void 0, function(t3, n3) {
              var i2 = this;
              let s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.peerConnectionTimeout;
              return function* () {
                if ("connected" !== t3.getConnectionState()) return new Promise((t4, o2) => Xn(i2, void 0, void 0, function* () {
                  const i3 = () => {
                    this.log.warn("abort transport connection", this.logContext), Ks.clearTimeout(r2), o2(new Is("room connection has been cancelled", e.ConnectionErrorReason.Cancelled));
                  };
                  (null == n3 ? void 0 : n3.signal.aborted) && i3(), null == n3 || n3.signal.addEventListener("abort", i3);
                  const r2 = Ks.setTimeout(() => {
                    null == n3 || n3.signal.removeEventListener("abort", i3), o2(new Is("could not establish pc connection", e.ConnectionErrorReason.InternalError));
                  }, s2);
                  for (; this.state !== qr.CONNECTED; ) if (yield io(50), null == n3 ? void 0 : n3.signal.aborted) return void o2(new Is("room connection has been cancelled", e.ConnectionErrorReason.Cancelled));
                  Ks.clearTimeout(r2), null == n3 || n3.signal.removeEventListener("abort", i3), t4();
                }));
              }();
            });
          }
        }
        class Wr extends Error {
          constructor(e2, t2, n2) {
            super(t2), this.code = e2, this.message = Gr(t2, Wr.MAX_MESSAGE_BYTES), this.data = n2 ? Gr(n2, Wr.MAX_DATA_BYTES) : void 0;
          }
          static fromProto(e2) {
            return new Wr(e2.code, e2.message, e2.data);
          }
          toProto() {
            return new Pt({ code: this.code, message: this.message, data: this.data });
          }
          static builtIn(e2, t2) {
            return new Wr(Wr.ErrorCode[e2], Wr.ErrorMessage[e2], t2);
          }
        }
        Wr.MAX_MESSAGE_BYTES = 256, Wr.MAX_DATA_BYTES = 15360, Wr.ErrorCode = { APPLICATION_ERROR: 1500, CONNECTION_TIMEOUT: 1501, RESPONSE_TIMEOUT: 1502, RECIPIENT_DISCONNECTED: 1503, RESPONSE_PAYLOAD_TOO_LARGE: 1504, SEND_FAILED: 1505, UNSUPPORTED_METHOD: 1400, RECIPIENT_NOT_FOUND: 1401, REQUEST_PAYLOAD_TOO_LARGE: 1402, UNSUPPORTED_SERVER: 1403, UNSUPPORTED_VERSION: 1404 }, Wr.ErrorMessage = { APPLICATION_ERROR: "Application error in method handler", CONNECTION_TIMEOUT: "Connection timeout", RESPONSE_TIMEOUT: "Response timeout", RECIPIENT_DISCONNECTED: "Recipient disconnected", RESPONSE_PAYLOAD_TOO_LARGE: "Response payload too large", SEND_FAILED: "Failed to send", UNSUPPORTED_METHOD: "Method not supported at destination", RECIPIENT_NOT_FOUND: "Recipient not found", REQUEST_PAYLOAD_TOO_LARGE: "Request payload too large", UNSUPPORTED_SERVER: "RPC not supported by server", UNSUPPORTED_VERSION: "Unsupported RPC version" };
        function Hr(e2) {
          return new TextEncoder().encode(e2).length;
        }
        function Gr(e2, t2) {
          if (Hr(e2) <= t2) return e2;
          let n2 = 0, i2 = e2.length;
          const s2 = new TextEncoder();
          for (; n2 < i2; ) {
            const o2 = Math.floor((n2 + i2 + 1) / 2);
            s2.encode(e2.slice(0, o2)).length <= t2 ? n2 = o2 : i2 = o2 - 1;
          }
          return e2.slice(0, n2);
        }
        const zr = 2e3;
        function Jr(e2, t2) {
          if (!t2) return 0;
          let n2, i2;
          return "bytesReceived" in e2 ? (n2 = e2.bytesReceived, i2 = t2.bytesReceived) : "bytesSent" in e2 && (n2 = e2.bytesSent, i2 = t2.bytesSent), void 0 === n2 || void 0 === i2 || void 0 === e2.timestamp || void 0 === t2.timestamp ? 0 : 8 * (n2 - i2) * 1e3 / (e2.timestamp - t2.timestamp);
        }
        class Qr extends Hs {
          get sender() {
            return this._sender;
          }
          set sender(e2) {
            this._sender = e2;
          }
          get constraints() {
            return this._constraints;
          }
          constructor(t2, n2, i2) {
            let o2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            super(t2, n2, arguments.length > 4 ? arguments[4] : void 0), this.manuallyStopped = false, this._isUpstreamPaused = false, this.handleTrackMuteEvent = () => this.debouncedTrackMuteHandler().catch(() => this.log.debug("track mute bounce got cancelled by an unmute event", this.logContext)), this.debouncedTrackMuteHandler = Or(() => Xn(this, void 0, void 0, function* () {
              yield this.pauseUpstream();
            }), 5e3), this.handleTrackUnmuteEvent = () => Xn(this, void 0, void 0, function* () {
              this.debouncedTrackMuteHandler.cancel("unmute"), yield this.resumeUpstream();
            }), this.handleEnded = () => {
              this.isInBackground && (this.reacquireTrack = true), this._mediaStreamTrack.removeEventListener("mute", this.handleTrackMuteEvent), this._mediaStreamTrack.removeEventListener("unmute", this.handleTrackUnmuteEvent), this.emit(e.TrackEvent.Ended, this);
            }, this.reacquireTrack = false, this.providedByUser = o2, this.muteLock = new s(), this.pauseUpstreamLock = new s(), this.processorLock = new s(), this.restartLock = new s(), this.setMediaStreamTrack(t2, true), this._constraints = t2.getConstraints(), i2 && (this._constraints = i2);
          }
          get id() {
            return this._mediaStreamTrack.id;
          }
          get dimensions() {
            if (this.kind !== Hs.Kind.Video) return;
            const { width: e2, height: t2 } = this._mediaStreamTrack.getSettings();
            return e2 && t2 ? { width: e2, height: t2 } : void 0;
          }
          get isUpstreamPaused() {
            return this._isUpstreamPaused;
          }
          get isUserProvided() {
            return this.providedByUser;
          }
          get mediaStreamTrack() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this.processor) || void 0 === e2 ? void 0 : e2.processedTrack) && void 0 !== t2 ? t2 : this._mediaStreamTrack;
          }
          get isLocal() {
            return true;
          }
          getSourceTrackSettings() {
            return this._mediaStreamTrack.getSettings();
          }
          setMediaStreamTrack(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2;
              if (e2 === this._mediaStreamTrack && !t2) return;
              let i2;
              if (this._mediaStreamTrack && (this.attachedElements.forEach((e3) => {
                zs(this._mediaStreamTrack, e3);
              }), this.debouncedTrackMuteHandler.cancel("new-track"), this._mediaStreamTrack.removeEventListener("ended", this.handleEnded), this._mediaStreamTrack.removeEventListener("mute", this.handleTrackMuteEvent), this._mediaStreamTrack.removeEventListener("unmute", this.handleTrackUnmuteEvent)), this.mediaStream = new MediaStream([e2]), e2 && (e2.addEventListener("ended", this.handleEnded), e2.addEventListener("mute", this.handleTrackMuteEvent), e2.addEventListener("unmute", this.handleTrackUnmuteEvent), this._constraints = e2.getConstraints()), this.processor && e2) {
                const t3 = yield this.processorLock.lock();
                try {
                  if (this.log.debug("restarting processor", this.logContext), "unknown" === this.kind) throw TypeError("cannot set processor on track of unknown kind");
                  this.processorElement && (Gs(e2, this.processorElement), this.processorElement.muted = true), yield this.processor.restart({ track: e2, kind: this.kind, element: this.processorElement }), i2 = this.processor.processedTrack;
                } finally {
                  t3();
                }
              }
              this.sender && "closed" !== (null === (n2 = this.sender.transport) || void 0 === n2 ? void 0 : n2.state) && (yield this.sender.replaceTrack(null != i2 ? i2 : e2)), this.providedByUser || this._mediaStreamTrack === e2 || this._mediaStreamTrack.stop(), this._mediaStreamTrack = e2, e2 && (this._mediaStreamTrack.enabled = !this.isMuted, yield this.resumeUpstream(), this.attachedElements.forEach((t3) => {
                Gs(null != i2 ? i2 : e2, t3);
              }));
            });
          }
          waitForDimensions() {
            return Xn(this, arguments, void 0, function() {
              var e2 = this;
              let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1e3;
              return function* () {
                var n2;
                if (e2.kind === Hs.Kind.Audio) throw new Error("cannot get dimensions for audio tracks");
                "iOS" === (null === (n2 = js()) || void 0 === n2 ? void 0 : n2.os) && (yield io(10));
                const i2 = Date.now();
                for (; Date.now() - i2 < t2; ) {
                  const t3 = e2.dimensions;
                  if (t3) return t3;
                  yield io(50);
                }
                throw new Ds("unable to get track dimensions after timeout");
              }();
            });
          }
          setDeviceId(e2) {
            return Xn(this, void 0, void 0, function* () {
              return this._constraints.deviceId === e2 && this._mediaStreamTrack.getSettings().deviceId === _o(e2) || (this._constraints.deviceId = e2, !!this.isMuted || (yield this.restartTrack(), _o(e2) === this._mediaStreamTrack.getSettings().deviceId));
            });
          }
          getDeviceId() {
            return Xn(this, arguments, void 0, function() {
              var e2 = this;
              let t2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
              return function* () {
                if (e2.source === Hs.Source.ScreenShare) return;
                const { deviceId: n2, groupId: i2 } = e2._mediaStreamTrack.getSettings(), s2 = e2.kind === Hs.Kind.Audio ? "audioinput" : "videoinput";
                return t2 ? cr.getInstance().normalizeDeviceId(s2, n2, i2) : n2;
              }();
            });
          }
          mute() {
            return Xn(this, void 0, void 0, function* () {
              return this.setTrackMuted(true), this;
            });
          }
          unmute() {
            return Xn(this, void 0, void 0, function* () {
              return this.setTrackMuted(false), this;
            });
          }
          replaceTrack(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.sender) throw new Ds("unable to replace an unpublished track");
              let n2, i2;
              return "boolean" == typeof t2 ? n2 = t2 : void 0 !== t2 && (n2 = t2.userProvidedTrack, i2 = t2.stopProcessor), this.providedByUser = null == n2 || n2, this.log.debug("replace MediaStreamTrack", this.logContext), yield this.setMediaStreamTrack(e2), i2 && this.processor && (yield this.stopProcessor()), this;
            });
          }
          restart(t2) {
            return Xn(this, void 0, void 0, function* () {
              this.manuallyStopped = false;
              const n2 = yield this.restartLock.lock();
              try {
                t2 || (t2 = this._constraints);
                const { deviceId: n3, facingMode: i2 } = t2, s2 = function(e2, t3) {
                  var n4 = {};
                  for (var i3 in e2) Object.prototype.hasOwnProperty.call(e2, i3) && t3.indexOf(i3) < 0 && (n4[i3] = e2[i3]);
                  if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
                    var s3 = 0;
                    for (i3 = Object.getOwnPropertySymbols(e2); s3 < i3.length; s3++) t3.indexOf(i3[s3]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, i3[s3]) && (n4[i3[s3]] = e2[i3[s3]]);
                  }
                  return n4;
                }(t2, ["deviceId", "facingMode"]);
                this.log.debug("restarting track with constraints", Object.assign(Object.assign({}, this.logContext), { constraints: t2 }));
                const o2 = { audio: false, video: false };
                this.kind === Hs.Kind.Video ? o2.video = !n3 && !i2 || { deviceId: n3, facingMode: i2 } : o2.audio = !n3 || { deviceId: n3 }, this.attachedElements.forEach((e2) => {
                  zs(this.mediaStreamTrack, e2);
                }), this._mediaStreamTrack.removeEventListener("ended", this.handleEnded), this._mediaStreamTrack.stop();
                const r2 = (yield navigator.mediaDevices.getUserMedia(o2)).getTracks()[0];
                return yield r2.applyConstraints(s2), r2.addEventListener("ended", this.handleEnded), this.log.debug("re-acquired MediaStreamTrack", this.logContext), yield this.setMediaStreamTrack(r2), this._constraints = t2, this.emit(e.TrackEvent.Restarted, this), this.manuallyStopped && (this.log.warn("track was stopped during a restart, stopping restarted track", this.logContext), this.stop()), this;
              } finally {
                n2();
              }
            });
          }
          setTrackMuted(t2) {
            this.log.debug("setting ".concat(this.kind, " track ").concat(t2 ? "muted" : "unmuted"), this.logContext), this.isMuted === t2 && this._mediaStreamTrack.enabled !== t2 || (this.isMuted = t2, this._mediaStreamTrack.enabled = !t2, this.emit(t2 ? e.TrackEvent.Muted : e.TrackEvent.Unmuted, this));
          }
          get needsReAcquisition() {
            return "live" !== this._mediaStreamTrack.readyState || this._mediaStreamTrack.muted || !this._mediaStreamTrack.enabled || this.reacquireTrack;
          }
          handleAppVisibilityChanged() {
            const e2 = Object.create(null, { handleAppVisibilityChanged: { get: () => super.handleAppVisibilityChanged } });
            return Xn(this, void 0, void 0, function* () {
              yield e2.handleAppVisibilityChanged.call(this), go() && (this.log.debug("visibility changed, is in Background: ".concat(this.isInBackground), this.logContext), this.isInBackground || !this.needsReAcquisition || this.isUserProvided || this.isMuted || (this.log.debug("track needs to be reacquired, restarting ".concat(this.source), this.logContext), yield this.restart(), this.reacquireTrack = false));
            });
          }
          stop() {
            var e2;
            this.manuallyStopped = true, super.stop(), this._mediaStreamTrack.removeEventListener("ended", this.handleEnded), this._mediaStreamTrack.removeEventListener("mute", this.handleTrackMuteEvent), this._mediaStreamTrack.removeEventListener("unmute", this.handleTrackUnmuteEvent), null === (e2 = this.processor) || void 0 === e2 || e2.destroy(), this.processor = void 0;
          }
          pauseUpstream() {
            return Xn(this, void 0, void 0, function* () {
              var t2;
              const n2 = yield this.pauseUpstreamLock.lock();
              try {
                if (true === this._isUpstreamPaused) return;
                if (!this.sender) return void this.log.warn("unable to pause upstream for an unpublished track", this.logContext);
                this._isUpstreamPaused = true, this.emit(e.TrackEvent.UpstreamPaused, this);
                const n3 = js();
                if ("Safari" === (null == n3 ? void 0 : n3.name) && Co(n3.version, "12.0") < 0) throw new Os("pauseUpstream is not supported on Safari < 12.");
                "closed" !== (null === (t2 = this.sender.transport) || void 0 === t2 ? void 0 : t2.state) && (yield this.sender.replaceTrack(null));
              } finally {
                n2();
              }
            });
          }
          resumeUpstream() {
            return Xn(this, void 0, void 0, function* () {
              var t2;
              const n2 = yield this.pauseUpstreamLock.lock();
              try {
                if (false === this._isUpstreamPaused) return;
                if (!this.sender) return void this.log.warn("unable to resume upstream for an unpublished track", this.logContext);
                this._isUpstreamPaused = false, this.emit(e.TrackEvent.UpstreamResumed, this), "closed" !== (null === (t2 = this.sender.transport) || void 0 === t2 ? void 0 : t2.state) && (yield this.sender.replaceTrack(this.mediaStreamTrack));
              } finally {
                n2();
              }
            });
          }
          getRTCStatsReport() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              if (!(null === (e2 = this.sender) || void 0 === e2 ? void 0 : e2.getStats)) return;
              return yield this.sender.getStats();
            });
          }
          setProcessor(t2) {
            return Xn(this, arguments, void 0, function(t3) {
              var n2 = this;
              let i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              return function* () {
                var s2;
                const o2 = yield n2.processorLock.lock();
                try {
                  n2.log.debug("setting up processor", n2.logContext);
                  const o3 = document.createElement(n2.kind), r2 = { kind: n2.kind, track: n2._mediaStreamTrack, element: o3, audioContext: n2.audioContext };
                  if (yield t3.init(r2), n2.log.debug("processor initialized", n2.logContext), n2.processor && (yield n2.stopProcessor()), "unknown" === n2.kind) throw TypeError("cannot set processor on track of unknown kind");
                  if (Gs(n2._mediaStreamTrack, o3), o3.muted = true, o3.play().catch((e2) => n2.log.error("failed to play processor element", Object.assign(Object.assign({}, n2.logContext), { error: e2 }))), n2.processor = t3, n2.processorElement = o3, n2.processor.processedTrack) {
                    for (const e2 of n2.attachedElements) e2 !== n2.processorElement && i2 && (zs(n2._mediaStreamTrack, e2), Gs(n2.processor.processedTrack, e2));
                    yield null === (s2 = n2.sender) || void 0 === s2 ? void 0 : s2.replaceTrack(n2.processor.processedTrack);
                  }
                  n2.emit(e.TrackEvent.TrackProcessorUpdate, n2.processor);
                } finally {
                  o2();
                }
              }();
            });
          }
          getProcessor() {
            return this.processor;
          }
          stopProcessor() {
            return Xn(this, arguments, void 0, function() {
              var t2 = this;
              let n2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
              return function* () {
                var i2, s2;
                t2.processor && (t2.log.debug("stopping processor", t2.logContext), null === (i2 = t2.processor.processedTrack) || void 0 === i2 || i2.stop(), yield t2.processor.destroy(), t2.processor = void 0, n2 || (null === (s2 = t2.processorElement) || void 0 === s2 || s2.remove(), t2.processorElement = void 0), yield t2._mediaStreamTrack.applyConstraints(t2._constraints), yield t2.setMediaStreamTrack(t2._mediaStreamTrack, true), t2.emit(e.TrackEvent.TrackProcessorUpdate));
              }();
            });
          }
        }
        class Yr extends Qr {
          get enhancedNoiseCancellation() {
            return this.isKrispNoiseFilterEnabled;
          }
          constructor(t2, n2) {
            let i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = arguments.length > 3 ? arguments[3] : void 0, o2 = arguments.length > 4 ? arguments[4] : void 0;
            super(t2, Hs.Kind.Audio, n2, i2, o2), this.stopOnMute = false, this.isKrispNoiseFilterEnabled = false, this.monitorSender = () => Xn(this, void 0, void 0, function* () {
              if (!this.sender) return void (this._currentBitrate = 0);
              let e2;
              try {
                e2 = yield this.getSenderStats();
              } catch (e3) {
                return void this.log.error("could not get audio sender stats", Object.assign(Object.assign({}, this.logContext), { error: e3 }));
              }
              e2 && this.prevStats && (this._currentBitrate = Jr(e2, this.prevStats)), this.prevStats = e2;
            }), this.handleKrispNoiseFilterEnable = () => {
              this.isKrispNoiseFilterEnabled = true, this.log.debug("Krisp noise filter enabled", this.logContext), this.emit(e.TrackEvent.AudioTrackFeatureUpdate, this, nt.TF_ENHANCED_NOISE_CANCELLATION, true);
            }, this.handleKrispNoiseFilterDisable = () => {
              this.isKrispNoiseFilterEnabled = false, this.log.debug("Krisp noise filter disabled", this.logContext), this.emit(e.TrackEvent.AudioTrackFeatureUpdate, this, nt.TF_ENHANCED_NOISE_CANCELLATION, false);
            }, this.audioContext = s2, this.checkForSilence();
          }
          mute() {
            const e2 = Object.create(null, { mute: { get: () => super.mute } });
            return Xn(this, void 0, void 0, function* () {
              const t2 = yield this.muteLock.lock();
              try {
                return this.isMuted ? (this.log.debug("Track already muted", this.logContext), this) : (this.source === Hs.Source.Microphone && this.stopOnMute && !this.isUserProvided && (this.log.debug("stopping mic track", this.logContext), this._mediaStreamTrack.stop()), yield e2.mute.call(this), this);
              } finally {
                t2();
              }
            });
          }
          unmute() {
            const e2 = Object.create(null, { unmute: { get: () => super.unmute } });
            return Xn(this, void 0, void 0, function* () {
              const t2 = yield this.muteLock.lock();
              try {
                if (!this.isMuted) return this.log.debug("Track already unmuted", this.logContext), this;
                const t3 = this._constraints.deviceId && this._mediaStreamTrack.getSettings().deviceId !== _o(this._constraints.deviceId);
                return this.source !== Hs.Source.Microphone || !this.stopOnMute && "ended" !== this._mediaStreamTrack.readyState && !t3 || this.isUserProvided || (this.log.debug("reacquiring mic track", this.logContext), yield this.restartTrack()), yield e2.unmute.call(this), this;
              } finally {
                t2();
              }
            });
          }
          restartTrack(e2) {
            return Xn(this, void 0, void 0, function* () {
              let t2;
              if (e2) {
                const n2 = Yo({ audio: e2 });
                "boolean" != typeof n2.audio && (t2 = n2.audio);
              }
              yield this.restart(t2);
            });
          }
          restart(e2) {
            const t2 = Object.create(null, { restart: { get: () => super.restart } });
            return Xn(this, void 0, void 0, function* () {
              const n2 = yield t2.restart.call(this, e2);
              return this.checkForSilence(), n2;
            });
          }
          startMonitor() {
            vo() && (this.monitorInterval || (this.monitorInterval = setInterval(() => {
              this.monitorSender();
            }, zr)));
          }
          setProcessor(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2;
              const i2 = yield this.processorLock.lock();
              try {
                if (!fo() && !this.audioContext) throw Error("Audio context needs to be set on LocalAudioTrack in order to enable processors");
                this.processor && (yield this.stopProcessor());
                const i3 = { kind: this.kind, track: this._mediaStreamTrack, audioContext: this.audioContext };
                this.log.debug("setting up audio processor ".concat(t2.name), this.logContext), yield t2.init(i3), this.processor = t2, this.processor.processedTrack && (yield null === (n2 = this.sender) || void 0 === n2 ? void 0 : n2.replaceTrack(this.processor.processedTrack), this.processor.processedTrack.addEventListener("enable-lk-krisp-noise-filter", this.handleKrispNoiseFilterEnable), this.processor.processedTrack.addEventListener("disable-lk-krisp-noise-filter", this.handleKrispNoiseFilterDisable)), this.emit(e.TrackEvent.TrackProcessorUpdate, this.processor);
              } finally {
                i2();
              }
            });
          }
          setAudioContext(e2) {
            this.audioContext = e2;
          }
          getSenderStats() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              if (!(null === (e2 = this.sender) || void 0 === e2 ? void 0 : e2.getStats)) return;
              let t2;
              return (yield this.sender.getStats()).forEach((e3) => {
                "outbound-rtp" === e3.type && (t2 = { type: "audio", streamId: e3.id, packetsSent: e3.packetsSent, packetsLost: e3.packetsLost, bytesSent: e3.bytesSent, timestamp: e3.timestamp, roundTripTime: e3.roundTripTime, jitter: e3.jitter });
              }), t2;
            });
          }
          checkForSilence() {
            return Xn(this, void 0, void 0, function* () {
              const t2 = yield Xo(this);
              return t2 && (this.isMuted || this.log.warn("silence detected on local audio track", this.logContext), this.emit(e.TrackEvent.AudioSilenceDetected)), t2;
            });
          }
        }
        const Xr = Object.values($s), Zr = Object.values(eo), $r = Object.values(to), ea = [$s.h180, $s.h360], ta = [eo.h180, eo.h360], na = (e2) => [{ scaleResolutionDownBy: 2, fps: e2.encoding.maxFramerate }].map((t2) => {
          var n2, i2;
          return new Js(Math.floor(e2.width / t2.scaleResolutionDownBy), Math.floor(e2.height / t2.scaleResolutionDownBy), Math.max(15e4, Math.floor(e2.encoding.maxBitrate / (Math.pow(t2.scaleResolutionDownBy, 2) * ((null !== (n2 = e2.encoding.maxFramerate) && void 0 !== n2 ? n2 : 30) / (null !== (i2 = t2.fps) && void 0 !== i2 ? i2 : 30))))), t2.fps, e2.encoding.priority);
        }), ia = ["q", "h", "f"];
        function sa(e2, t2, n2, i2) {
          var s2, o2;
          let r2 = null == i2 ? void 0 : i2.videoEncoding;
          e2 && (r2 = null == i2 ? void 0 : i2.screenShareEncoding);
          const a2 = null == i2 ? void 0 : i2.simulcast, c2 = null == i2 ? void 0 : i2.scalabilityMode, d2 = null == i2 ? void 0 : i2.videoCodec;
          if (!r2 && !a2 && !c2 || !t2 || !n2) return [{}];
          r2 || (r2 = function(e3, t3, n3, i3) {
            const s3 = function(e4, t4, n4) {
              if (e4) return $r;
              const i4 = t4 > n4 ? t4 / n4 : n4 / t4;
              if (Math.abs(i4 - 16 / 9) < Math.abs(i4 - 4 / 3)) return Xr;
              return Zr;
            }(e3, t3, n3);
            let { encoding: o3 } = s3[0];
            const r3 = Math.max(t3, n3);
            for (let e4 = 0; e4 < s3.length; e4 += 1) {
              const t4 = s3[e4];
              if (o3 = t4.encoding, t4.width >= r3) break;
            }
            if (i3) switch (i3) {
              case "av1":
                o3 = Object.assign({}, o3), o3.maxBitrate = 0.7 * o3.maxBitrate;
                break;
              case "vp9":
                o3 = Object.assign({}, o3), o3.maxBitrate = 0.85 * o3.maxBitrate;
            }
            return o3;
          }(e2, t2, n2, d2), Wn.debug("using video encoding", r2));
          const l2 = r2.maxFramerate, u2 = new Js(t2, n2, r2.maxBitrate, r2.maxFramerate, r2.priority);
          if (c2 && co(d2)) {
            const e3 = new ca(c2), t3 = [];
            if (e3.spatial > 3) throw new Error("unsupported scalabilityMode: ".concat(c2));
            const n3 = js();
            if (po() || fo() || "Chrome" === (null == n3 ? void 0 : n3.name) && Co(null == n3 ? void 0 : n3.version, "113") < 0) {
              const n4 = "h" == e3.suffix ? 2 : 3;
              for (let i3 = 0; i3 < e3.spatial; i3 += 1) t3.push({ rid: ia[2 - i3], maxBitrate: r2.maxBitrate / Math.pow(n4, i3), maxFramerate: u2.encoding.maxFramerate });
              t3[0].scalabilityMode = c2;
            } else t3.push({ maxBitrate: r2.maxBitrate, maxFramerate: u2.encoding.maxFramerate, scalabilityMode: c2 });
            return u2.encoding.priority && (t3[0].priority = u2.encoding.priority, t3[0].networkPriority = u2.encoding.priority), Wn.debug("using svc encoding", { encodings: t3 }), t3;
          }
          if (!a2) return [r2];
          let h2, p2 = [];
          if (p2 = e2 ? null !== (s2 = aa(null == i2 ? void 0 : i2.screenShareSimulcastLayers)) && void 0 !== s2 ? s2 : oa(e2, u2) : null !== (o2 = aa(null == i2 ? void 0 : i2.videoSimulcastLayers)) && void 0 !== o2 ? o2 : oa(e2, u2), p2.length > 0) {
            const e3 = p2[0];
            p2.length > 1 && ([, h2] = p2);
            const i3 = Math.max(t2, n2);
            if (i3 >= 960 && h2) return ra(t2, n2, [e3, h2, u2], l2);
            if (i3 >= 480) return ra(t2, n2, [e3, u2], l2);
          }
          return ra(t2, n2, [u2]);
        }
        function oa(e2, t2) {
          if (e2) return na(t2);
          const { width: n2, height: i2 } = t2, s2 = n2 > i2 ? n2 / i2 : i2 / n2;
          return Math.abs(s2 - 16 / 9) < Math.abs(s2 - 4 / 3) ? ea : ta;
        }
        function ra(e2, t2, n2, i2) {
          const s2 = [];
          if (n2.forEach((n3, o2) => {
            if (o2 >= ia.length) return;
            const r2 = Math.min(e2, t2), a2 = { rid: ia[o2], scaleResolutionDownBy: Math.max(1, r2 / Math.min(n3.width, n3.height)), maxBitrate: n3.encoding.maxBitrate }, c2 = i2 && n3.encoding.maxFramerate ? Math.min(i2, n3.encoding.maxFramerate) : n3.encoding.maxFramerate;
            c2 && (a2.maxFramerate = c2);
            const d2 = ho() || 0 === o2;
            n3.encoding.priority && d2 && (a2.priority = n3.encoding.priority, a2.networkPriority = n3.encoding.priority), s2.push(a2);
          }), fo() && "ios" === yo()) {
            let e3;
            s2.forEach((t4) => {
              e3 ? t4.maxFramerate && t4.maxFramerate > e3 && (e3 = t4.maxFramerate) : e3 = t4.maxFramerate;
            });
            let t3 = true;
            s2.forEach((n3) => {
              var i3;
              n3.maxFramerate != e3 && (t3 && (t3 = false, Wn.info("Simulcast on iOS React-Native requires all encodings to share the same framerate.")), Wn.info('Setting framerate of encoding "'.concat(null !== (i3 = n3.rid) && void 0 !== i3 ? i3 : "", '" to ').concat(e3)), n3.maxFramerate = e3);
            });
          }
          return s2;
        }
        function aa(e2) {
          if (e2) return e2.sort((e3, t2) => {
            const { encoding: n2 } = e3, { encoding: i2 } = t2;
            return n2.maxBitrate > i2.maxBitrate ? 1 : n2.maxBitrate < i2.maxBitrate ? -1 : n2.maxBitrate === i2.maxBitrate && n2.maxFramerate && i2.maxFramerate ? n2.maxFramerate > i2.maxFramerate ? 1 : -1 : 0;
          });
        }
        class ca {
          constructor(e2) {
            const t2 = e2.match(/^L(\d)T(\d)(h|_KEY|_KEY_SHIFT){0,1}$/);
            if (!t2) throw new Error("invalid scalability mode");
            if (this.spatial = parseInt(t2[1]), this.temporal = parseInt(t2[2]), t2.length > 3) switch (t2[3]) {
              case "h":
              case "_KEY":
              case "_KEY_SHIFT":
                this.suffix = t2[3];
            }
          }
          toString() {
            var e2;
            return "L".concat(this.spatial, "T").concat(this.temporal).concat(null !== (e2 = this.suffix) && void 0 !== e2 ? e2 : "");
          }
        }
        class da extends Qr {
          get sender() {
            return this._sender;
          }
          set sender(e2) {
            this._sender = e2, this.degradationPreference && this.setDegradationPreference(this.degradationPreference);
          }
          constructor(e2, t2) {
            let n2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], i2 = arguments.length > 3 ? arguments[3] : void 0;
            super(e2, Hs.Kind.Video, t2, n2, i2), this.simulcastCodecs = /* @__PURE__ */ new Map(), this.degradationPreference = "balanced", this.monitorSender = () => Xn(this, void 0, void 0, function* () {
              if (!this.sender) return void (this._currentBitrate = 0);
              let e3;
              try {
                e3 = yield this.getSenderStats();
              } catch (e4) {
                return void this.log.error("could not get audio sender stats", Object.assign(Object.assign({}, this.logContext), { error: e4 }));
              }
              const t3 = new Map(e3.map((e4) => [e4.rid, e4]));
              if (this.prevStats) {
                let e4 = 0;
                t3.forEach((t4, n3) => {
                  var i3;
                  const s2 = null === (i3 = this.prevStats) || void 0 === i3 ? void 0 : i3.get(n3);
                  e4 += Jr(t4, s2);
                }), this._currentBitrate = e4;
              }
              this.prevStats = t3;
            }), this.senderLock = new s();
          }
          get isSimulcast() {
            return !!(this.sender && this.sender.getParameters().encodings.length > 1);
          }
          startMonitor(e2) {
            var t2;
            if (this.signalClient = e2, !vo()) return;
            const n2 = null === (t2 = this.sender) || void 0 === t2 ? void 0 : t2.getParameters();
            n2 && (this.encodings = n2.encodings), this.monitorInterval || (this.monitorInterval = setInterval(() => {
              this.monitorSender();
            }, zr));
          }
          stop() {
            this._mediaStreamTrack.getConstraints(), this.simulcastCodecs.forEach((e2) => {
              e2.mediaStreamTrack.stop();
            }), super.stop();
          }
          pauseUpstream() {
            const e2 = Object.create(null, { pauseUpstream: { get: () => super.pauseUpstream } });
            return Xn(this, void 0, void 0, function* () {
              var t2, n2, i2, s2, o2;
              yield e2.pauseUpstream.call(this);
              try {
                for (var r2, a2 = true, c2 = $n(this.simulcastCodecs.values()); !(t2 = (r2 = yield c2.next()).done); a2 = true) {
                  s2 = r2.value, a2 = false;
                  const e3 = s2;
                  yield null === (o2 = e3.sender) || void 0 === o2 ? void 0 : o2.replaceTrack(null);
                }
              } catch (e3) {
                n2 = { error: e3 };
              } finally {
                try {
                  a2 || t2 || !(i2 = c2.return) || (yield i2.call(c2));
                } finally {
                  if (n2) throw n2.error;
                }
              }
            });
          }
          resumeUpstream() {
            const e2 = Object.create(null, { resumeUpstream: { get: () => super.resumeUpstream } });
            return Xn(this, void 0, void 0, function* () {
              var t2, n2, i2, s2, o2;
              yield e2.resumeUpstream.call(this);
              try {
                for (var r2, a2 = true, c2 = $n(this.simulcastCodecs.values()); !(t2 = (r2 = yield c2.next()).done); a2 = true) {
                  s2 = r2.value, a2 = false;
                  const e3 = s2;
                  yield null === (o2 = e3.sender) || void 0 === o2 ? void 0 : o2.replaceTrack(e3.mediaStreamTrack);
                }
              } catch (e3) {
                n2 = { error: e3 };
              } finally {
                try {
                  a2 || t2 || !(i2 = c2.return) || (yield i2.call(c2));
                } finally {
                  if (n2) throw n2.error;
                }
              }
            });
          }
          mute() {
            const e2 = Object.create(null, { mute: { get: () => super.mute } });
            return Xn(this, void 0, void 0, function* () {
              const t2 = yield this.muteLock.lock();
              try {
                return this.isMuted ? (this.log.debug("Track already muted", this.logContext), this) : (this.source !== Hs.Source.Camera || this.isUserProvided || (this.log.debug("stopping camera track", this.logContext), this._mediaStreamTrack.stop()), yield e2.mute.call(this), this);
              } finally {
                t2();
              }
            });
          }
          unmute() {
            const e2 = Object.create(null, { unmute: { get: () => super.unmute } });
            return Xn(this, void 0, void 0, function* () {
              const t2 = yield this.muteLock.lock();
              try {
                return this.isMuted ? (this.source !== Hs.Source.Camera || this.isUserProvided || (this.log.debug("reacquiring camera track", this.logContext), yield this.restartTrack()), yield e2.unmute.call(this), this) : (this.log.debug("Track already unmuted", this.logContext), this);
              } finally {
                t2();
              }
            });
          }
          setTrackMuted(e2) {
            super.setTrackMuted(e2);
            for (const t2 of this.simulcastCodecs.values()) t2.mediaStreamTrack.enabled = !e2;
          }
          getSenderStats() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              if (!(null === (e2 = this.sender) || void 0 === e2 ? void 0 : e2.getStats)) return [];
              const t2 = [], n2 = yield this.sender.getStats();
              return n2.forEach((e3) => {
                var i2;
                if ("outbound-rtp" === e3.type) {
                  const s2 = { type: "video", streamId: e3.id, frameHeight: e3.frameHeight, frameWidth: e3.frameWidth, framesPerSecond: e3.framesPerSecond, framesSent: e3.framesSent, firCount: e3.firCount, pliCount: e3.pliCount, nackCount: e3.nackCount, packetsSent: e3.packetsSent, bytesSent: e3.bytesSent, qualityLimitationReason: e3.qualityLimitationReason, qualityLimitationDurations: e3.qualityLimitationDurations, qualityLimitationResolutionChanges: e3.qualityLimitationResolutionChanges, rid: null !== (i2 = e3.rid) && void 0 !== i2 ? i2 : e3.id, retransmittedPacketsSent: e3.retransmittedPacketsSent, targetBitrate: e3.targetBitrate, timestamp: e3.timestamp }, o2 = n2.get(e3.remoteId);
                  o2 && (s2.jitter = o2.jitter, s2.packetsLost = o2.packetsLost, s2.roundTripTime = o2.roundTripTime), t2.push(s2);
                }
              }), t2.sort((e3, t3) => {
                var n3, i2;
                return (null !== (n3 = t3.frameWidth) && void 0 !== n3 ? n3 : 0) - (null !== (i2 = e3.frameWidth) && void 0 !== i2 ? i2 : 0);
              }), t2;
            });
          }
          setPublishingQuality(t2) {
            const n2 = [];
            for (let i2 = e.VideoQuality.LOW; i2 <= e.VideoQuality.HIGH; i2 += 1) n2.push(new bn({ quality: i2, enabled: i2 <= t2 }));
            this.log.debug("setting publishing quality. max quality ".concat(t2), this.logContext), this.setPublishingLayers(n2);
          }
          restartTrack(e2) {
            return Xn(this, void 0, void 0, function* () {
              var t2, n2, i2, s2, o2;
              let r2;
              if (e2) {
                const t3 = Yo({ video: e2 });
                "boolean" != typeof t3.video && (r2 = t3.video);
              }
              yield this.restart(r2);
              try {
                for (var a2, c2 = true, d2 = $n(this.simulcastCodecs.values()); !(t2 = (a2 = yield d2.next()).done); c2 = true) {
                  s2 = a2.value, c2 = false;
                  const e3 = s2;
                  e3.sender && "closed" !== (null === (o2 = e3.sender.transport) || void 0 === o2 ? void 0 : o2.state) && (e3.mediaStreamTrack = this.mediaStreamTrack.clone(), yield e3.sender.replaceTrack(e3.mediaStreamTrack));
                }
              } catch (e3) {
                n2 = { error: e3 };
              } finally {
                try {
                  c2 || t2 || !(i2 = d2.return) || (yield i2.call(d2));
                } finally {
                  if (n2) throw n2.error;
                }
              }
            });
          }
          setProcessor(e2) {
            const t2 = Object.create(null, { setProcessor: { get: () => super.setProcessor } });
            return Xn(this, arguments, void 0, function(e3) {
              var n2 = this;
              let i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              return function* () {
                var s2, o2, r2, a2, c2, d2;
                if (yield t2.setProcessor.call(n2, e3, i2), null === (c2 = n2.processor) || void 0 === c2 ? void 0 : c2.processedTrack) try {
                  for (var l2, u2 = true, h2 = $n(n2.simulcastCodecs.values()); !(s2 = (l2 = yield h2.next()).done); u2 = true) {
                    a2 = l2.value, u2 = false;
                    const e4 = a2;
                    yield null === (d2 = e4.sender) || void 0 === d2 ? void 0 : d2.replaceTrack(n2.processor.processedTrack);
                  }
                } catch (e4) {
                  o2 = { error: e4 };
                } finally {
                  try {
                    u2 || s2 || !(r2 = h2.return) || (yield r2.call(h2));
                  } finally {
                    if (o2) throw o2.error;
                  }
                }
              }();
            });
          }
          setDegradationPreference(e2) {
            return Xn(this, void 0, void 0, function* () {
              if (this.degradationPreference = e2, this.sender) try {
                this.log.debug("setting degradationPreference to ".concat(e2), this.logContext);
                const t2 = this.sender.getParameters();
                t2.degradationPreference = e2, this.sender.setParameters(t2);
              } catch (e3) {
                this.log.warn("failed to set degradationPreference", Object.assign({ error: e3 }, this.logContext));
              }
            });
          }
          addSimulcastTrack(e2, t2) {
            if (this.simulcastCodecs.has(e2)) return void this.log.error("".concat(e2, " already added, skipping adding simulcast codec"), this.logContext);
            const n2 = { codec: e2, mediaStreamTrack: this.mediaStreamTrack.clone(), sender: void 0, encodings: t2 };
            return this.simulcastCodecs.set(e2, n2), n2;
          }
          setSimulcastTrackSender(e2, t2) {
            const n2 = this.simulcastCodecs.get(e2);
            n2 && (n2.sender = t2, setTimeout(() => {
              this.subscribedCodecs && this.setPublishingCodecs(this.subscribedCodecs);
            }, 5e3));
          }
          setPublishingCodecs(e2) {
            return Xn(this, void 0, void 0, function* () {
              var t2, n2, i2, s2, o2, r2, a2;
              if (this.log.debug("setting publishing codecs", Object.assign(Object.assign({}, this.logContext), { codecs: e2, currentCodec: this.codec })), !this.codec && e2.length > 0) return yield this.setPublishingLayers(e2[0].qualities), [];
              this.subscribedCodecs = e2;
              const c2 = [];
              try {
                for (t2 = true, n2 = $n(e2); !(s2 = (i2 = yield n2.next()).done); t2 = true) {
                  a2 = i2.value, t2 = false;
                  const e3 = a2;
                  if (this.codec && this.codec !== e3.codec) {
                    const t3 = this.simulcastCodecs.get(e3.codec);
                    if (this.log.debug("try setPublishingCodec for ".concat(e3.codec), Object.assign(Object.assign({}, this.logContext), { simulcastCodecInfo: t3 })), t3 && t3.sender) t3.encodings && (this.log.debug("try setPublishingLayersForSender ".concat(e3.codec), this.logContext), yield la(t3.sender, t3.encodings, e3.qualities, this.senderLock, this.log, this.logContext));
                    else for (const t4 of e3.qualities) if (t4.enabled) {
                      c2.push(e3.codec);
                      break;
                    }
                  } else yield this.setPublishingLayers(e3.qualities);
                }
              } catch (e3) {
                o2 = { error: e3 };
              } finally {
                try {
                  t2 || s2 || !(r2 = n2.return) || (yield r2.call(n2));
                } finally {
                  if (o2) throw o2.error;
                }
              }
              return c2;
            });
          }
          setPublishingLayers(e2) {
            return Xn(this, void 0, void 0, function* () {
              this.log.debug("setting publishing layers", Object.assign(Object.assign({}, this.logContext), { qualities: e2 })), this.sender && this.encodings && (yield la(this.sender, this.encodings, e2, this.senderLock, this.log, this.logContext));
            });
          }
          handleAppVisibilityChanged() {
            const e2 = Object.create(null, { handleAppVisibilityChanged: { get: () => super.handleAppVisibilityChanged } });
            return Xn(this, void 0, void 0, function* () {
              yield e2.handleAppVisibilityChanged.call(this), go() && this.isInBackground && this.source === Hs.Source.Camera && (this._mediaStreamTrack.enabled = false);
            });
          }
        }
        function la(e2, t2, n2, i2, s2, o2) {
          return Xn(this, void 0, void 0, function* () {
            const r2 = yield i2.lock();
            s2.debug("setPublishingLayersForSender", Object.assign(Object.assign({}, o2), { sender: e2, qualities: n2, senderEncodings: t2 }));
            try {
              const i3 = e2.getParameters(), { encodings: r3 } = i3;
              if (!r3) return;
              if (r3.length !== t2.length) return void s2.warn("cannot set publishing layers, encodings mismatch", Object.assign(Object.assign({}, o2), { encodings: r3, senderEncodings: t2 }));
              let a2 = false;
              const c2 = js();
              if ("Chrome" === (null == c2 ? void 0 : c2.name) && Co(null == c2 ? void 0 : c2.version, "133") > 0 && r3[0].scalabilityMode) {
                const e3 = r3[0], i4 = new ca(e3.scalabilityMode);
                let s3 = Ye.OFF;
                if (n2.forEach((e4) => {
                  e4.enabled && (s3 === Ye.OFF || e4.quality > s3) && (s3 = e4.quality);
                }), s3 === Ye.OFF) e3.active && (e3.active = false, a2 = true);
                else if (!e3.active || i4.spatial !== s3 + 1) {
                  a2 = true, e3.active = true;
                  const n3 = new ca(t2[0].scalabilityMode);
                  i4.spatial = s3 + 1, i4.suffix = n3.suffix, 1 === i4.spatial && (i4.suffix = void 0), e3.scalabilityMode = i4.toString(), e3.scaleResolutionDownBy = Math.pow(2, 2 - s3), t2[0].maxBitrate && (e3.maxBitrate = t2[0].maxBitrate / (e3.scaleResolutionDownBy * e3.scaleResolutionDownBy));
                }
              } else r3.forEach((e3, i4) => {
                var r4;
                let c3 = null !== (r4 = e3.rid) && void 0 !== r4 ? r4 : "";
                "" === c3 && (c3 = "q");
                const d2 = ua(c3), l2 = n2.find((e4) => e4.quality === d2);
                l2 && e3.active !== l2.enabled && (a2 = true, e3.active = l2.enabled, s2.debug("setting layer ".concat(l2.quality, " to ").concat(e3.active ? "enabled" : "disabled"), o2), ho() && (l2.enabled ? (e3.scaleResolutionDownBy = t2[i4].scaleResolutionDownBy, e3.maxBitrate = t2[i4].maxBitrate, e3.maxFrameRate = t2[i4].maxFrameRate) : (e3.scaleResolutionDownBy = 4, e3.maxBitrate = 10, e3.maxFrameRate = 2)));
              });
              a2 && (i3.encodings = r3, s2.debug("setting encodings", Object.assign(Object.assign({}, o2), { encodings: i3.encodings })), yield e2.setParameters(i3));
            } finally {
              r2();
            }
          });
        }
        function ua(t2) {
          switch (t2) {
            case "f":
            default:
              return e.VideoQuality.HIGH;
            case "h":
              return e.VideoQuality.MEDIUM;
            case "q":
              return e.VideoQuality.LOW;
          }
        }
        function ha(t2, n2, i2, s2) {
          if (!i2) return [new pt({ quality: e.VideoQuality.HIGH, width: t2, height: n2, bitrate: 0, ssrc: 0 })];
          if (s2) {
            const s3 = i2[0].scalabilityMode, o2 = new ca(s3), r2 = [], a2 = "h" == o2.suffix ? 1.5 : 2, c2 = "h" == o2.suffix ? 2 : 3;
            for (let s4 = 0; s4 < o2.spatial; s4 += 1) r2.push(new pt({ quality: Math.min(e.VideoQuality.HIGH, o2.spatial - 1) - s4, width: Math.ceil(t2 / Math.pow(a2, s4)), height: Math.ceil(n2 / Math.pow(a2, s4)), bitrate: i2[0].maxBitrate ? Math.ceil(i2[0].maxBitrate / Math.pow(c2, s4)) : 0, ssrc: 0 }));
            return r2;
          }
          return i2.map((e2) => {
            var i3, s3, o2;
            const r2 = null !== (i3 = e2.scaleResolutionDownBy) && void 0 !== i3 ? i3 : 1;
            let a2 = ua(null !== (s3 = e2.rid) && void 0 !== s3 ? s3 : "");
            return new pt({ quality: a2, width: Math.ceil(t2 / r2), height: Math.ceil(n2 / r2), bitrate: null !== (o2 = e2.maxBitrate) && void 0 !== o2 ? o2 : 0, ssrc: 0 });
          });
        }
        const pa = "_lossy", ma = "_reliable", ga = "leave-reconnect";
        var va;
        !function(e2) {
          e2[e2.New = 0] = "New", e2[e2.Connected = 1] = "Connected", e2[e2.Disconnected = 2] = "Disconnected", e2[e2.Reconnecting = 3] = "Reconnecting", e2[e2.Closed = 4] = "Closed";
        }(va || (va = {}));
        class fa extends ni.EventEmitter {
          get isClosed() {
            return this._isClosed;
          }
          get pendingReconnect() {
            return !!this.reconnectTimeout;
          }
          constructor(t2) {
            var n2;
            super(), this.options = t2, this.rtcConfig = {}, this.peerConnectionTimeout = Vr.peerConnectionTimeout, this.fullReconnectOnNext = false, this.subscriberPrimary = false, this.pcState = va.New, this._isClosed = true, this.pendingTrackResolvers = {}, this.reconnectAttempts = 0, this.reconnectStart = 0, this.attemptingReconnect = false, this.joinAttempts = 0, this.maxJoinAttempts = 1, this.shouldFailNext = false, this.log = Wn, this.handleDataChannel = (e2) => Xn(this, [e2], void 0, function(e3) {
              var t3 = this;
              let { channel: n3 } = e3;
              return function* () {
                if (n3) {
                  if (n3.label === ma) t3.reliableDCSub = n3;
                  else {
                    if (n3.label !== pa) return;
                    t3.lossyDCSub = n3;
                  }
                  t3.log.debug("on data channel ".concat(n3.id, ", ").concat(n3.label), t3.logContext), n3.onmessage = t3.handleDataMessage;
                }
              }();
            }), this.handleDataMessage = (t3) => Xn(this, void 0, void 0, function* () {
              var n3, i2;
              const s2 = yield this.dataProcessLock.lock();
              try {
                let s3;
                if (t3.data instanceof ArrayBuffer) s3 = t3.data;
                else {
                  if (!(t3.data instanceof Blob)) return void this.log.error("unsupported data type", Object.assign(Object.assign({}, this.logContext), { data: t3.data }));
                  s3 = yield t3.data.arrayBuffer();
                }
                const o2 = mt.fromBinary(new Uint8Array(s3));
                "speaker" === (null === (n3 = o2.value) || void 0 === n3 ? void 0 : n3.case) ? this.emit(e.EngineEvent.ActiveSpeakersUpdate, o2.value.value.speakers) : ("user" === (null === (i2 = o2.value) || void 0 === i2 ? void 0 : i2.case) && function(e2, t4) {
                  const n4 = e2.participantIdentity ? e2.participantIdentity : t4.participantIdentity;
                  e2.participantIdentity = n4, t4.participantIdentity = n4;
                  const i3 = 0 !== e2.destinationIdentities.length ? e2.destinationIdentities : t4.destinationIdentities;
                  e2.destinationIdentities = i3, t4.destinationIdentities = i3;
                }(o2, o2.value.value), this.emit(e.EngineEvent.DataPacketReceived, o2));
              } finally {
                s2();
              }
            }), this.handleDataError = (e2) => {
              const t3 = 0 === e2.currentTarget.maxRetransmits ? "lossy" : "reliable";
              if (e2 instanceof ErrorEvent && e2.error) {
                const { error: n3 } = e2.error;
                this.log.error("DataChannel error on ".concat(t3, ": ").concat(e2.message), Object.assign(Object.assign({}, this.logContext), { error: n3 }));
              } else this.log.error("Unknown DataChannel error on ".concat(t3), Object.assign(Object.assign({}, this.logContext), { event: e2 }));
            }, this.handleBufferedAmountLow = (e2) => {
              const t3 = 0 === e2.currentTarget.maxRetransmits ? gt.LOSSY : gt.RELIABLE;
              this.updateAndEmitDCBufferStatus(t3);
            }, this.handleDisconnect = (t3, n3) => {
              if (this._isClosed) return;
              this.log.warn("".concat(t3, " disconnected"), this.logContext), 0 === this.reconnectAttempts && (this.reconnectStart = Date.now());
              const i2 = (t4) => {
                this.log.warn("could not recover connection after ".concat(this.reconnectAttempts, " attempts, ").concat(t4, "ms. giving up"), this.logContext), this.emit(e.EngineEvent.Disconnected), this.close();
              }, s2 = Date.now() - this.reconnectStart;
              let o2 = this.getNextRetryDelay({ elapsedMs: s2, retryCount: this.reconnectAttempts });
              null !== o2 ? (t3 === ga && (o2 = 0), this.log.debug("reconnecting in ".concat(o2, "ms"), this.logContext), this.clearReconnectTimeout(), this.token && this.regionUrlProvider && this.regionUrlProvider.updateToken(this.token), this.reconnectTimeout = Ks.setTimeout(() => this.attemptReconnect(n3).finally(() => this.reconnectTimeout = void 0), o2)) : i2(s2);
            }, this.waitForRestarted = () => new Promise((t3, n3) => {
              this.pcState === va.Connected && t3();
              const i2 = () => {
                this.off(e.EngineEvent.Disconnected, s2), t3();
              }, s2 = () => {
                this.off(e.EngineEvent.Restarted, i2), n3();
              };
              this.once(e.EngineEvent.Restarted, i2), this.once(e.EngineEvent.Disconnected, s2);
            }), this.updateAndEmitDCBufferStatus = (t3) => {
              const n3 = this.isBufferStatusLow(t3);
              void 0 !== n3 && n3 !== this.dcBufferStatus.get(t3) && (this.dcBufferStatus.set(t3, n3), this.emit(e.EngineEvent.DCBufferStatusChanged, n3, t3));
            }, this.isBufferStatusLow = (e2) => {
              const t3 = this.dataChannelForKind(e2);
              if (t3) return t3.bufferedAmount <= t3.bufferedAmountLowThreshold;
            }, this.handleBrowserOnLine = () => {
              this.client.currentState === pr.RECONNECTING && (this.clearReconnectTimeout(), this.attemptReconnect(et.RR_SIGNAL_DISCONNECTED));
            }, this.log = Gn(null !== (n2 = t2.loggerName) && void 0 !== n2 ? n2 : e.LoggerNames.Engine), this.loggerOptions = { loggerName: t2.loggerName, loggerContextCb: () => this.logContext }, this.client = new mr(void 0, this.loggerOptions), this.client.signalLatency = this.options.expSignalLatency, this.reconnectPolicy = this.options.reconnectPolicy, this.registerOnLineListener(), this.closingLock = new s(), this.dataProcessLock = new s(), this.dcBufferStatus = /* @__PURE__ */ new Map([[gt.LOSSY, true], [gt.RELIABLE, true]]), this.client.onParticipantUpdate = (t3) => this.emit(e.EngineEvent.ParticipantUpdate, t3), this.client.onConnectionQuality = (t3) => this.emit(e.EngineEvent.ConnectionQualityUpdate, t3), this.client.onRoomUpdate = (t3) => this.emit(e.EngineEvent.RoomUpdate, t3), this.client.onSubscriptionError = (t3) => this.emit(e.EngineEvent.SubscriptionError, t3), this.client.onSubscriptionPermissionUpdate = (t3) => this.emit(e.EngineEvent.SubscriptionPermissionUpdate, t3), this.client.onSpeakersChanged = (t3) => this.emit(e.EngineEvent.SpeakersChanged, t3), this.client.onStreamStateUpdate = (t3) => this.emit(e.EngineEvent.StreamStateChanged, t3), this.client.onRequestResponse = (t3) => this.emit(e.EngineEvent.SignalRequestResponse, t3);
          }
          get logContext() {
            var e2, t2, n2, i2, s2, o2, r2, a2;
            return { room: null === (t2 = null === (e2 = this.latestJoinResponse) || void 0 === e2 ? void 0 : e2.room) || void 0 === t2 ? void 0 : t2.name, roomID: null === (i2 = null === (n2 = this.latestJoinResponse) || void 0 === n2 ? void 0 : n2.room) || void 0 === i2 ? void 0 : i2.sid, participant: null === (o2 = null === (s2 = this.latestJoinResponse) || void 0 === s2 ? void 0 : s2.participant) || void 0 === o2 ? void 0 : o2.identity, pID: null === (a2 = null === (r2 = this.latestJoinResponse) || void 0 === r2 ? void 0 : r2.participant) || void 0 === a2 ? void 0 : a2.sid };
          }
          join(t2, n2, i2, s2) {
            return Xn(this, void 0, void 0, function* () {
              this.url = t2, this.token = n2, this.signalOpts = i2, this.maxJoinAttempts = i2.maxRetries;
              try {
                this.joinAttempts += 1, this.setupSignalClientCallbacks();
                const o2 = yield this.client.join(t2, n2, i2, s2);
                return this._isClosed = false, this.latestJoinResponse = o2, this.subscriberPrimary = o2.subscriberPrimary, this.pcManager || (yield this.configure(o2)), this.subscriberPrimary && !o2.fastPublish || this.negotiate(), this.clientConfiguration = o2.clientConfiguration, setTimeout(() => {
                  this.emit(e.EngineEvent.SignalConnected);
                }, 10), o2;
              } catch (o2) {
                if (o2 instanceof Is && o2.reason === e.ConnectionErrorReason.ServerUnreachable && (this.log.warn("Couldn't connect to server, attempt ".concat(this.joinAttempts, " of ").concat(this.maxJoinAttempts), this.logContext), this.joinAttempts < this.maxJoinAttempts)) return this.join(t2, n2, i2, s2);
                throw o2;
              }
            });
          }
          close() {
            return Xn(this, void 0, void 0, function* () {
              const t2 = yield this.closingLock.lock();
              if (this.isClosed) t2();
              else try {
                this._isClosed = true, this.joinAttempts = 0, this.emit(e.EngineEvent.Closing), this.removeAllListeners(), this.deregisterOnLineListener(), this.clearPendingReconnect(), yield this.cleanupPeerConnections(), yield this.cleanupClient();
              } finally {
                t2();
              }
            });
          }
          cleanupPeerConnections() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              yield null === (e2 = this.pcManager) || void 0 === e2 ? void 0 : e2.close(), this.pcManager = void 0;
              const t2 = (e3) => {
                e3 && (e3.close(), e3.onbufferedamountlow = null, e3.onclose = null, e3.onclosing = null, e3.onerror = null, e3.onmessage = null, e3.onopen = null);
              };
              t2(this.lossyDC), t2(this.lossyDCSub), t2(this.reliableDC), t2(this.reliableDCSub), this.lossyDC = void 0, this.lossyDCSub = void 0, this.reliableDC = void 0, this.reliableDCSub = void 0;
            });
          }
          cleanupClient() {
            return Xn(this, void 0, void 0, function* () {
              yield this.client.close(), this.client.resetCallbacks();
            });
          }
          addTrack(t2) {
            if (this.pendingTrackResolvers[t2.cid]) throw new Ds("a track with the same ID has already been published");
            return new Promise((n2, i2) => {
              const s2 = setTimeout(() => {
                delete this.pendingTrackResolvers[t2.cid], i2(new Is("publication of local track timed out, no response from server", e.ConnectionErrorReason.InternalError));
              }, 1e4);
              this.pendingTrackResolvers[t2.cid] = { resolve: (e2) => {
                clearTimeout(s2), n2(e2);
              }, reject: () => {
                clearTimeout(s2), i2(new Error("Cancelled publication by calling unpublish"));
              } }, this.client.sendAddTrack(t2);
            });
          }
          removeTrack(e2) {
            if (e2.track && this.pendingTrackResolvers[e2.track.id]) {
              const { reject: t2 } = this.pendingTrackResolvers[e2.track.id];
              t2 && t2(), delete this.pendingTrackResolvers[e2.track.id];
            }
            try {
              return this.pcManager.removeTrack(e2), true;
            } catch (e3) {
              this.log.warn("failed to remove track", Object.assign(Object.assign({}, this.logContext), { error: e3 }));
            }
            return false;
          }
          updateMuteStatus(e2, t2) {
            this.client.sendMuteTrack(e2, t2);
          }
          get dataSubscriberReadyState() {
            var e2;
            return null === (e2 = this.reliableDCSub) || void 0 === e2 ? void 0 : e2.readyState;
          }
          getConnectedServerAddress() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              return null === (e2 = this.pcManager) || void 0 === e2 ? void 0 : e2.getConnectedAddress();
            });
          }
          setRegionUrlProvider(e2) {
            this.regionUrlProvider = e2;
          }
          configure(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2, i2;
              if (this.pcManager && this.pcManager.currentState !== qr.NEW) return;
              this.participantSid = null === (n2 = t2.participant) || void 0 === n2 ? void 0 : n2.sid;
              const s2 = this.makeRTCConfiguration(t2);
              var o2;
              this.pcManager = new Kr(s2, t2.subscriberPrimary, this.loggerOptions), this.emit(e.EngineEvent.TransportsCreated, this.pcManager.publisher, this.pcManager.subscriber), this.pcManager.onIceCandidate = (e2, t3) => {
                this.client.sendIceCandidate(e2, t3);
              }, this.pcManager.onPublisherOffer = (e2) => {
                this.client.sendOffer(e2);
              }, this.pcManager.onDataChannel = this.handleDataChannel, this.pcManager.onStateChange = (n3, i3, s3) => Xn(this, void 0, void 0, function* () {
                if (this.log.debug("primary PC state changed ".concat(n3), this.logContext), ["closed", "disconnected", "failed"].includes(i3) && (this.publisherConnectionPromise = void 0), n3 === qr.CONNECTED) {
                  const n4 = this.pcState === va.New;
                  this.pcState = va.Connected, n4 && this.emit(e.EngineEvent.Connected, t2);
                } else n3 === qr.FAILED && this.pcState === va.Connected && (this.pcState = va.Disconnected, this.handleDisconnect("peerconnection failed", "failed" === s3 ? et.RR_SUBSCRIBER_FAILED : et.RR_PUBLISHER_FAILED));
                const o3 = this.client.isDisconnected || this.client.currentState === pr.RECONNECTING, r2 = [qr.FAILED, qr.CLOSING, qr.CLOSED].includes(n3);
                o3 && r2 && !this._isClosed && this.emit(e.EngineEvent.Offline);
              }), this.pcManager.onTrack = (t3) => {
                this.emit(e.EngineEvent.MediaTrackAdded, t3.track, t3.streams[0], t3.receiver);
              }, void 0 !== (o2 = null === (i2 = t2.serverInfo) || void 0 === i2 ? void 0 : i2.protocol) && o2 > 13 || this.createDataChannels();
            });
          }
          setupSignalClientCallbacks() {
            this.client.onAnswer = (e2) => Xn(this, void 0, void 0, function* () {
              this.pcManager && (this.log.debug("received server answer", Object.assign(Object.assign({}, this.logContext), { RTCSdpType: e2.type })), yield this.pcManager.setPublisherAnswer(e2));
            }), this.client.onTrickle = (e2, t2) => {
              this.pcManager && (this.log.debug("got ICE candidate from peer", Object.assign(Object.assign({}, this.logContext), { candidate: e2, target: t2 })), this.pcManager.addIceCandidate(e2, t2));
            }, this.client.onOffer = (e2) => Xn(this, void 0, void 0, function* () {
              if (!this.pcManager) return;
              const t2 = yield this.pcManager.createSubscriberAnswerFromOffer(e2);
              this.client.sendAnswer(t2);
            }), this.client.onLocalTrackPublished = (e2) => {
              var t2;
              if (this.log.debug("received trackPublishedResponse", Object.assign(Object.assign({}, this.logContext), { cid: e2.cid, track: null === (t2 = e2.track) || void 0 === t2 ? void 0 : t2.sid })), !this.pendingTrackResolvers[e2.cid]) return void this.log.error("missing track resolver for ".concat(e2.cid), Object.assign(Object.assign({}, this.logContext), { cid: e2.cid }));
              const { resolve: n2 } = this.pendingTrackResolvers[e2.cid];
              delete this.pendingTrackResolvers[e2.cid], n2(e2.track);
            }, this.client.onLocalTrackUnpublished = (t2) => {
              this.emit(e.EngineEvent.LocalTrackUnpublished, t2);
            }, this.client.onLocalTrackSubscribed = (t2) => {
              this.emit(e.EngineEvent.LocalTrackSubscribed, t2);
            }, this.client.onTokenRefresh = (e2) => {
              this.token = e2;
            }, this.client.onRemoteMuteChanged = (t2, n2) => {
              this.emit(e.EngineEvent.RemoteMute, t2, n2);
            }, this.client.onSubscribedQualityUpdate = (t2) => {
              this.emit(e.EngineEvent.SubscribedQualityUpdate, t2);
            }, this.client.onRoomMoved = (t2) => {
              var n2;
              this.participantSid = null === (n2 = t2.participant) || void 0 === n2 ? void 0 : n2.sid, this.emit(e.EngineEvent.RoomMoved, t2);
            }, this.client.onClose = () => {
              this.handleDisconnect("signal", et.RR_SIGNAL_DISCONNECTED);
            }, this.client.onLeave = (t2) => {
              switch (this.log.debug("client leave request", Object.assign(Object.assign({}, this.logContext), { reason: null == t2 ? void 0 : t2.reason })), t2.regions && this.regionUrlProvider && (this.log.debug("updating regions", this.logContext), this.regionUrlProvider.setServerReportedRegions(t2.regions)), t2.action) {
                case dn.DISCONNECT:
                  this.emit(e.EngineEvent.Disconnected, null == t2 ? void 0 : t2.reason), this.close();
                  break;
                case dn.RECONNECT:
                  this.fullReconnectOnNext = true, this.handleDisconnect(ga);
                  break;
                case dn.RESUME:
                  this.handleDisconnect(ga);
              }
            };
          }
          makeRTCConfiguration(e2) {
            var t2;
            const n2 = Object.assign({}, this.rtcConfig);
            if ((null === (t2 = this.signalOpts) || void 0 === t2 ? void 0 : t2.e2eeEnabled) && (this.log.debug("E2EE - setting up transports with insertable streams", this.logContext), n2.encodedInsertableStreams = true), e2.iceServers && !n2.iceServers) {
              const t3 = [];
              e2.iceServers.forEach((e3) => {
                const n3 = { urls: e3.urls };
                e3.username && (n3.username = e3.username), e3.credential && (n3.credential = e3.credential), t3.push(n3);
              }), n2.iceServers = t3;
            }
            return e2.clientConfiguration && e2.clientConfiguration.forceRelay === Ze.ENABLED && (n2.iceTransportPolicy = "relay"), n2.sdpSemantics = "unified-plan", n2.continualGatheringPolicy = "gather_continually", n2;
          }
          createDataChannels() {
            this.pcManager && (this.lossyDC && (this.lossyDC.onmessage = null, this.lossyDC.onerror = null), this.reliableDC && (this.reliableDC.onmessage = null, this.reliableDC.onerror = null), this.lossyDC = this.pcManager.createPublisherDataChannel(pa, { ordered: false, maxRetransmits: 0 }), this.reliableDC = this.pcManager.createPublisherDataChannel(ma, { ordered: true }), this.lossyDC.onmessage = this.handleDataMessage, this.reliableDC.onmessage = this.handleDataMessage, this.lossyDC.onerror = this.handleDataError, this.reliableDC.onerror = this.handleDataError, this.lossyDC.bufferedAmountLowThreshold = 65535, this.reliableDC.bufferedAmountLowThreshold = 65535, this.lossyDC.onbufferedamountlow = this.handleBufferedAmountLow, this.reliableDC.onbufferedamountlow = this.handleBufferedAmountLow);
          }
          createSender(e2, t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              if (so()) {
                return yield this.createTransceiverRTCRtpSender(e2, t2, n2);
              }
              if (oo()) {
                this.log.warn("using add-track fallback", this.logContext);
                return yield this.createRTCRtpSender(e2.mediaStreamTrack);
              }
              throw new Ms("Required webRTC APIs not supported on this device");
            });
          }
          createSimulcastSender(e2, t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              if (so()) return this.createSimulcastTransceiverSender(e2, t2, n2, i2);
              if (oo()) return this.log.debug("using add-track fallback", this.logContext), this.createRTCRtpSender(e2.mediaStreamTrack);
              throw new Ms("Cannot stream on this device");
            });
          }
          createTransceiverRTCRtpSender(e2, t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.pcManager) throw new Ms("publisher is closed");
              const i2 = [];
              e2.mediaStream && i2.push(e2.mediaStream), Vo(e2) && (e2.codec = t2.videoCodec);
              const s2 = { direction: "sendonly", streams: i2 };
              n2 && (s2.sendEncodings = n2);
              return (yield this.pcManager.addPublisherTransceiver(e2.mediaStreamTrack, s2)).sender;
            });
          }
          createSimulcastTransceiverSender(e2, t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.pcManager) throw new Ms("publisher is closed");
              const s2 = { direction: "sendonly" };
              i2 && (s2.sendEncodings = i2);
              const o2 = yield this.pcManager.addPublisherTransceiver(t2.mediaStreamTrack, s2);
              if (n2.videoCodec) return e2.setSimulcastTrackSender(n2.videoCodec, o2.sender), o2.sender;
            });
          }
          createRTCRtpSender(e2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.pcManager) throw new Ms("publisher is closed");
              return this.pcManager.addPublisherTrack(e2);
            });
          }
          attemptReconnect(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2, i2, s2;
              if (!this._isClosed) if (this.attemptingReconnect) Wn.warn("already attempting reconnect, returning early", this.logContext);
              else {
                (null === (n2 = this.clientConfiguration) || void 0 === n2 ? void 0 : n2.resumeConnection) !== Ze.DISABLED && (null !== (s2 = null === (i2 = this.pcManager) || void 0 === i2 ? void 0 : i2.currentState) && void 0 !== s2 ? s2 : qr.NEW) !== qr.NEW || (this.fullReconnectOnNext = true);
                try {
                  this.attemptingReconnect = true, this.fullReconnectOnNext ? yield this.restartConnection() : yield this.resumeConnection(t2), this.clearPendingReconnect(), this.fullReconnectOnNext = false;
                } catch (t3) {
                  this.reconnectAttempts += 1;
                  let n3 = true;
                  t3 instanceof Ms ? (this.log.debug("received unrecoverable error", Object.assign(Object.assign({}, this.logContext), { error: t3 })), n3 = false) : t3 instanceof ka || (this.fullReconnectOnNext = true), n3 ? this.handleDisconnect("reconnect", et.RR_UNKNOWN) : (this.log.info("could not recover connection after ".concat(this.reconnectAttempts, " attempts, ").concat(Date.now() - this.reconnectStart, "ms. giving up"), this.logContext), this.emit(e.EngineEvent.Disconnected), yield this.close());
                } finally {
                  this.attemptingReconnect = false;
                }
              }
            });
          }
          getNextRetryDelay(e2) {
            try {
              return this.reconnectPolicy.nextRetryDelayInMs(e2);
            } catch (e3) {
              this.log.warn("encountered error in reconnect policy", Object.assign(Object.assign({}, this.logContext), { error: e3 }));
            }
            return null;
          }
          restartConnection(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2, i2, s2;
              try {
                if (!this.url || !this.token) throw new Ms("could not reconnect, url or token not saved");
                let i3;
                this.log.info("reconnecting, attempt: ".concat(this.reconnectAttempts), this.logContext), this.emit(e.EngineEvent.Restarting), this.client.isDisconnected || (yield this.client.sendLeave()), yield this.cleanupPeerConnections(), yield this.cleanupClient();
                try {
                  if (!this.signalOpts) throw this.log.warn("attempted connection restart, without signal options present", this.logContext), new ka();
                  i3 = yield this.join(null != t2 ? t2 : this.url, this.token, this.signalOpts);
                } catch (t3) {
                  if (t3 instanceof Is && t3.reason === e.ConnectionErrorReason.NotAllowed) throw new Ms("could not reconnect, token might be expired");
                  throw new ka();
                }
                if (this.shouldFailNext) throw this.shouldFailNext = false, new Error("simulated failure");
                if (this.client.setReconnected(), this.emit(e.EngineEvent.SignalRestarted, i3), yield this.waitForPCReconnected(), this.client.currentState !== pr.CONNECTED) throw new ka("Signal connection got severed during reconnect");
                null === (n2 = this.regionUrlProvider) || void 0 === n2 || n2.resetAttempts(), this.emit(e.EngineEvent.Restarted);
              } catch (e2) {
                const t3 = yield null === (i2 = this.regionUrlProvider) || void 0 === i2 ? void 0 : i2.getNextBestRegionUrl();
                if (t3) return void (yield this.restartConnection(t3));
                throw null === (s2 = this.regionUrlProvider) || void 0 === s2 || s2.resetAttempts(), e2;
              }
            });
          }
          resumeConnection(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2;
              if (!this.url || !this.token) throw new Ms("could not reconnect, url or token not saved");
              if (!this.pcManager) throw new Ms("publisher and subscriber connections unset");
              let i2;
              this.log.info("resuming signal connection, attempt ".concat(this.reconnectAttempts), this.logContext), this.emit(e.EngineEvent.Resuming);
              try {
                this.setupSignalClientCallbacks(), i2 = yield this.client.reconnect(this.url, this.token, this.participantSid, t2);
              } catch (t3) {
                let n3 = "";
                if (t3 instanceof Error && (n3 = t3.message, this.log.error(t3.message, Object.assign(Object.assign({}, this.logContext), { error: t3 }))), t3 instanceof Is && t3.reason === e.ConnectionErrorReason.NotAllowed) throw new Ms("could not reconnect, token might be expired");
                if (t3 instanceof Is && t3.reason === e.ConnectionErrorReason.LeaveRequest) throw t3;
                throw new ka(n3);
              }
              if (this.emit(e.EngineEvent.SignalResumed), i2) {
                const e2 = this.makeRTCConfiguration(i2);
                this.pcManager.updateConfiguration(e2);
              } else this.log.warn("Did not receive reconnect response", this.logContext);
              if (this.shouldFailNext) throw this.shouldFailNext = false, new Error("simulated failure");
              if (yield this.pcManager.triggerIceRestart(), yield this.waitForPCReconnected(), this.client.currentState !== pr.CONNECTED) throw new ka("Signal connection got severed during reconnect");
              this.client.setReconnected(), "open" === (null === (n2 = this.reliableDC) || void 0 === n2 ? void 0 : n2.readyState) && null === this.reliableDC.id && this.createDataChannels(), this.emit(e.EngineEvent.Resumed);
            });
          }
          waitForPCInitialConnection(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.pcManager) throw new Ms("PC manager is closed");
              yield this.pcManager.ensurePCTransportConnection(t2, e2);
            });
          }
          waitForPCReconnected() {
            return Xn(this, void 0, void 0, function* () {
              this.pcState = va.Reconnecting, this.log.debug("waiting for peer connection to reconnect", this.logContext);
              try {
                if (yield io(2e3), !this.pcManager) throw new Ms("PC manager is closed");
                yield this.pcManager.ensurePCTransportConnection(void 0, this.peerConnectionTimeout), this.pcState = va.Connected;
              } catch (t2) {
                throw this.pcState = va.Disconnected, new Is("could not establish PC connection, ".concat(t2.message), e.ConnectionErrorReason.InternalError);
              }
            });
          }
          publishRpcResponse(e2, t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              const s2 = new mt({ destinationIdentities: [e2], kind: gt.RELIABLE, value: { case: "rpcResponse", value: new wt({ requestId: t2, value: i2 ? { case: "error", value: i2.toProto() } : { case: "payload", value: null != n2 ? n2 : "" } }) } });
              yield this.sendDataPacket(s2, gt.RELIABLE);
            });
          }
          publishRpcAck(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              const n2 = new mt({ destinationIdentities: [e2], kind: gt.RELIABLE, value: { case: "rpcAck", value: new Et({ requestId: t2 }) } });
              yield this.sendDataPacket(n2, gt.RELIABLE);
            });
          }
          sendDataPacket(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              const n2 = e2.toBinary();
              yield this.ensurePublisherConnected(t2);
              const i2 = this.dataChannelForKind(t2);
              i2 && i2.send(n2), this.updateAndEmitDCBufferStatus(t2);
            });
          }
          waitForBufferStatusLow(t2) {
            return new Promise((n2, i2) => Xn(this, void 0, void 0, function* () {
              if (this.isBufferStatusLow(t2)) n2();
              else {
                const s2 = () => i2("Engine closed");
                for (this.once(e.EngineEvent.Closing, s2); !this.dcBufferStatus.get(t2); ) yield io(10);
                this.off(e.EngineEvent.Closing, s2), n2();
              }
            }));
          }
          ensureDataTransportConnected(t2) {
            return Xn(this, arguments, void 0, function(t3) {
              var n2 = this;
              let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.subscriberPrimary;
              return function* () {
                var s2;
                if (!n2.pcManager) throw new Ms("PC manager is closed");
                const o2 = i2 ? n2.pcManager.subscriber : n2.pcManager.publisher, r2 = i2 ? "Subscriber" : "Publisher";
                if (!o2) throw new Is("".concat(r2, " connection not set"), e.ConnectionErrorReason.InternalError);
                let a2 = false;
                i2 || n2.dataChannelForKind(t3, i2) || (n2.createDataChannels(), a2 = true), a2 || i2 || n2.pcManager.publisher.isICEConnected || "checking" === n2.pcManager.publisher.getICEConnectionState() || (a2 = true), a2 && n2.negotiate();
                const c2 = n2.dataChannelForKind(t3, i2);
                if ("open" === (null == c2 ? void 0 : c2.readyState)) return;
                const d2 = (/* @__PURE__ */ new Date()).getTime() + n2.peerConnectionTimeout;
                for (; (/* @__PURE__ */ new Date()).getTime() < d2; ) {
                  if (o2.isICEConnected && "open" === (null === (s2 = n2.dataChannelForKind(t3, i2)) || void 0 === s2 ? void 0 : s2.readyState)) return;
                  yield io(50);
                }
                throw new Is("could not establish ".concat(r2, " connection, state: ").concat(o2.getICEConnectionState()), e.ConnectionErrorReason.InternalError);
              }();
            });
          }
          ensurePublisherConnected(e2) {
            return Xn(this, void 0, void 0, function* () {
              this.publisherConnectionPromise || (this.publisherConnectionPromise = this.ensureDataTransportConnected(e2, false)), yield this.publisherConnectionPromise;
            });
          }
          verifyTransport() {
            return !!this.pcManager && (this.pcManager.currentState === qr.CONNECTED && !(!this.client.ws || this.client.ws.readyState === WebSocket.CLOSED));
          }
          negotiate() {
            return Xn(this, void 0, void 0, function* () {
              return new Promise((t2, n2) => Xn(this, void 0, void 0, function* () {
                if (!this.pcManager) return void n2(new Ns("PC manager is closed"));
                this.pcManager.requirePublisher(), 0 != this.pcManager.publisher.getTransceivers().length || this.lossyDC || this.reliableDC || this.createDataChannels();
                const i2 = new AbortController(), s2 = () => {
                  i2.abort(), this.log.debug("engine disconnected while negotiation was ongoing", this.logContext), t2();
                };
                this.isClosed && n2("cannot negotiate on closed engine"), this.on(e.EngineEvent.Closing, s2), this.pcManager.publisher.once(Mr, (t3) => {
                  const n3 = /* @__PURE__ */ new Map();
                  t3.forEach((e2) => {
                    const t4 = e2.codec.toLowerCase();
                    var i3;
                    i3 = t4, Ys.includes(i3) && n3.set(e2.payload, t4);
                  }), this.emit(e.EngineEvent.RTPVideoMapUpdate, n3);
                });
                try {
                  yield this.pcManager.negotiate(i2), t2();
                } catch (e2) {
                  e2 instanceof Ns && (this.fullReconnectOnNext = true), this.handleDisconnect("negotiation", et.RR_UNKNOWN), n2(e2);
                } finally {
                  this.off(e.EngineEvent.Closing, s2);
                }
              }));
            });
          }
          dataChannelForKind(e2, t2) {
            if (t2) {
              if (e2 === gt.LOSSY) return this.lossyDCSub;
              if (e2 === gt.RELIABLE) return this.reliableDCSub;
            } else {
              if (e2 === gt.LOSSY) return this.lossyDC;
              if (e2 === gt.RELIABLE) return this.reliableDC;
            }
          }
          sendSyncState(e2, t2) {
            var n2, i2;
            if (!this.pcManager) return void this.log.warn("sync state cannot be sent without peer connection setup", this.logContext);
            const s2 = this.pcManager.subscriber.getLocalDescription(), o2 = this.pcManager.subscriber.getRemoteDescription(), r2 = null === (i2 = null === (n2 = this.signalOpts) || void 0 === n2 ? void 0 : n2.autoSubscribe) || void 0 === i2 || i2, a2 = new Array(), c2 = new Array();
            e2.forEach((e3) => {
              e3.isDesired !== r2 && a2.push(e3.trackSid), e3.isEnabled || c2.push(e3.trackSid);
            }), this.client.sendSyncState(new Pn({ answer: s2 ? vr({ sdp: s2.sdp, type: s2.type }) : void 0, offer: o2 ? vr({ sdp: o2.sdp, type: o2.type }) : void 0, subscription: new sn({ trackSids: a2, subscribe: !r2, participantTracks: [] }), publishTracks: ir(t2), dataChannels: this.dataChannelsInfo(), trackSidsDisabled: c2 }));
          }
          failNext() {
            this.shouldFailNext = true;
          }
          dataChannelsInfo() {
            const e2 = [], t2 = (t3, n2) => {
              void 0 !== (null == t3 ? void 0 : t3.id) && null !== t3.id && e2.push(new Rn({ label: t3.label, id: t3.id, target: n2 }));
            };
            return t2(this.dataChannelForKind(gt.LOSSY), qt.PUBLISHER), t2(this.dataChannelForKind(gt.RELIABLE), qt.PUBLISHER), t2(this.dataChannelForKind(gt.LOSSY, true), qt.SUBSCRIBER), t2(this.dataChannelForKind(gt.RELIABLE, true), qt.SUBSCRIBER), e2;
          }
          clearReconnectTimeout() {
            this.reconnectTimeout && Ks.clearTimeout(this.reconnectTimeout);
          }
          clearPendingReconnect() {
            this.clearReconnectTimeout(), this.reconnectAttempts = 0;
          }
          registerOnLineListener() {
            vo() && window.addEventListener("online", this.handleBrowserOnLine);
          }
          deregisterOnLineListener() {
            vo() && window.removeEventListener("online", this.handleBrowserOnLine);
          }
        }
        class ka extends Error {
        }
        class ba {
          constructor(e2, t2) {
            this.lastUpdateAt = 0, this.settingsCacheTime = 3e3, this.attemptedRegions = [], this.serverUrl = new URL(e2), this.token = t2;
          }
          updateToken(e2) {
            this.token = e2;
          }
          isCloud() {
            return ko(this.serverUrl);
          }
          getServerUrl() {
            return this.serverUrl;
          }
          getNextBestRegionUrl(e2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.isCloud()) throw Error("region availability is only supported for LiveKit Cloud domains");
              (!this.regionSettings || Date.now() - this.lastUpdateAt > this.settingsCacheTime) && (this.regionSettings = yield this.fetchRegionSettings(e2));
              const t2 = this.regionSettings.regions.filter((e3) => !this.attemptedRegions.find((t3) => t3.url === e3.url));
              if (t2.length > 0) {
                const e3 = t2[0];
                return this.attemptedRegions.push(e3), Wn.debug("next region: ".concat(e3.region)), e3.url;
              }
              return null;
            });
          }
          resetAttempts() {
            this.attemptedRegions = [];
          }
          fetchRegionSettings(t2) {
            return Xn(this, void 0, void 0, function* () {
              const n2 = yield fetch("".concat((i2 = this.serverUrl, "".concat(i2.protocol.replace("ws", "http"), "//").concat(i2.host, "/settings")), "/regions"), { headers: { authorization: "Bearer ".concat(this.token) }, signal: t2 });
              var i2;
              if (n2.ok) {
                const e2 = yield n2.json();
                return this.lastUpdateAt = Date.now(), e2;
              }
              throw new Is("Could not fetch region settings: ".concat(n2.statusText), 401 === n2.status ? e.ConnectionErrorReason.NotAllowed : e.ConnectionErrorReason.InternalError, n2.status);
            });
          }
          setServerReportedRegions(e2) {
            this.regionSettings = e2, this.lastUpdateAt = Date.now();
          }
        }
        class ya {
          get info() {
            return this._info;
          }
          constructor(e2, t2, n2) {
            this.reader = t2, this.totalByteSize = n2, this._info = e2, this.bytesReceived = 0;
          }
        }
        class Ta extends ya {
          handleChunkReceived(e2) {
            var t2;
            this.bytesReceived += e2.content.byteLength;
            const n2 = this.totalByteSize ? this.bytesReceived / this.totalByteSize : void 0;
            null === (t2 = this.onProgress) || void 0 === t2 || t2.call(this, n2);
          }
          [Symbol.asyncIterator]() {
            const e2 = this.reader.getReader();
            return { next: () => Xn(this, void 0, void 0, function* () {
              try {
                const { done: t2, value: n2 } = yield e2.read();
                return t2 ? { done: true, value: void 0 } : (this.handleChunkReceived(n2), { done: false, value: n2.content });
              } catch (e3) {
                return { done: true, value: void 0 };
              }
            }), return() {
              return Xn(this, void 0, void 0, function* () {
                return e2.releaseLock(), { done: true, value: void 0 };
              });
            } };
          }
          readAll() {
            return Xn(this, void 0, void 0, function* () {
              var e2, t2, n2, i2;
              let s2 = /* @__PURE__ */ new Set();
              try {
                for (var o2, r2 = true, a2 = $n(this); !(e2 = (o2 = yield a2.next()).done); r2 = true) {
                  i2 = o2.value, r2 = false;
                  const e3 = i2;
                  s2.add(e3);
                }
              } catch (e3) {
                t2 = { error: e3 };
              } finally {
                try {
                  r2 || e2 || !(n2 = a2.return) || (yield n2.call(a2));
                } finally {
                  if (t2) throw t2.error;
                }
              }
              return Array.from(s2);
            });
          }
        }
        class Ca extends ya {
          constructor(e2, t2, n2) {
            super(e2, t2, n2), this.receivedChunks = /* @__PURE__ */ new Map();
          }
          handleChunkReceived(e2) {
            var t2;
            const n2 = Uo(e2.chunkIndex), i2 = this.receivedChunks.get(n2);
            if (i2 && i2.version > e2.version) return;
            this.receivedChunks.set(n2, e2), this.bytesReceived += e2.content.byteLength;
            const s2 = this.totalByteSize ? this.bytesReceived / this.totalByteSize : void 0;
            null === (t2 = this.onProgress) || void 0 === t2 || t2.call(this, s2);
          }
          [Symbol.asyncIterator]() {
            const e2 = this.reader.getReader(), t2 = new TextDecoder();
            return { next: () => Xn(this, void 0, void 0, function* () {
              try {
                const { done: n2, value: i2 } = yield e2.read();
                return n2 ? { done: true, value: void 0 } : (this.handleChunkReceived(i2), { done: false, value: t2.decode(i2.content) });
              } catch (e3) {
                return { done: true, value: void 0 };
              }
            }), return() {
              return Xn(this, void 0, void 0, function* () {
                return e2.releaseLock(), { done: true, value: void 0 };
              });
            } };
          }
          readAll() {
            return Xn(this, void 0, void 0, function* () {
              var e2, t2, n2, i2;
              let s2 = "";
              try {
                for (var o2, r2 = true, a2 = $n(this); !(e2 = (o2 = yield a2.next()).done); r2 = true) {
                  i2 = o2.value, r2 = false;
                  s2 += i2;
                }
              } catch (e3) {
                t2 = { error: e3 };
              } finally {
                try {
                  r2 || e2 || !(n2 = a2.return) || (yield n2.call(a2));
                } finally {
                  if (t2) throw t2.error;
                }
              }
              return s2;
            });
          }
        }
        class Sa {
          constructor(e2, t2, n2) {
            this.writableStream = e2, this.defaultWriter = e2.getWriter(), this.onClose = n2, this.info = t2;
          }
          write(e2) {
            return this.defaultWriter.write(e2);
          }
          close() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              yield this.defaultWriter.close(), this.defaultWriter.releaseLock(), null === (e2 = this.onClose) || void 0 === e2 || e2.call(this);
            });
          }
        }
        class Ea extends Sa {
        }
        class wa extends Sa {
        }
        class Pa extends Hs {
          constructor(e2, t2, n2, i2, s2) {
            super(e2, n2, s2), this.sid = t2, this.receiver = i2;
          }
          get isLocal() {
            return false;
          }
          setMuted(t2) {
            this.isMuted !== t2 && (this.isMuted = t2, this._mediaStreamTrack.enabled = !t2, this.emit(t2 ? e.TrackEvent.Muted : e.TrackEvent.Unmuted, this));
          }
          setMediaStream(t2) {
            this.mediaStream = t2;
            const n2 = (i2) => {
              i2.track === this._mediaStreamTrack && (t2.removeEventListener("removetrack", n2), this.receiver && "playoutDelayHint" in this.receiver && (this.receiver.playoutDelayHint = void 0), this.receiver = void 0, this._currentBitrate = 0, this.emit(e.TrackEvent.Ended, this));
            };
            t2.addEventListener("removetrack", n2);
          }
          start() {
            this.startMonitor(), super.enable();
          }
          stop() {
            this.stopMonitor(), super.disable();
          }
          getRTCStatsReport() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              if (!(null === (e2 = this.receiver) || void 0 === e2 ? void 0 : e2.getStats)) return;
              return yield this.receiver.getStats();
            });
          }
          setPlayoutDelay(e2) {
            this.receiver ? "playoutDelayHint" in this.receiver ? this.receiver.playoutDelayHint = e2 : this.log.warn("Playout delay not supported in this browser") : this.log.warn("Cannot set playout delay, track already ended");
          }
          getPlayoutDelay() {
            if (this.receiver) {
              if ("playoutDelayHint" in this.receiver) return this.receiver.playoutDelayHint;
              this.log.warn("Playout delay not supported in this browser");
            } else this.log.warn("Cannot get playout delay, track already ended");
            return 0;
          }
          startMonitor() {
            this.monitorInterval || (this.monitorInterval = setInterval(() => this.monitorReceiver(), zr)), "undefined" != typeof RTCRtpReceiver && "getSynchronizationSources" in RTCRtpReceiver && this.registerTimeSyncUpdate();
          }
          registerTimeSyncUpdate() {
            const t2 = () => {
              var n2;
              this.timeSyncHandle = requestAnimationFrame(() => t2());
              const i2 = null === (n2 = this.receiver) || void 0 === n2 ? void 0 : n2.getSynchronizationSources()[0];
              if (i2) {
                const { timestamp: t3, rtpTimestamp: n3 } = i2;
                n3 && this.rtpTimestamp !== n3 && (this.emit(e.TrackEvent.TimeSyncUpdate, { timestamp: t3, rtpTimestamp: n3 }), this.rtpTimestamp = n3);
              }
            };
            t2();
          }
        }
        class Ra extends Pa {
          constructor(e2, t2, n2, i2, s2, o2) {
            super(e2, t2, Hs.Kind.Audio, n2, o2), this.monitorReceiver = () => Xn(this, void 0, void 0, function* () {
              if (!this.receiver) return void (this._currentBitrate = 0);
              const e3 = yield this.getReceiverStats();
              e3 && this.prevStats && this.receiver && (this._currentBitrate = Jr(e3, this.prevStats)), this.prevStats = e3;
            }), this.audioContext = i2, this.webAudioPluginNodes = [], s2 && (this.sinkId = s2.deviceId);
          }
          setVolume(e2) {
            var t2;
            for (const n2 of this.attachedElements) this.audioContext ? null === (t2 = this.gainNode) || void 0 === t2 || t2.gain.setTargetAtTime(e2, 0, 0.1) : n2.volume = e2;
            fo() && this._mediaStreamTrack._setVolume(e2), this.elementVolume = e2;
          }
          getVolume() {
            if (this.elementVolume) return this.elementVolume;
            if (fo()) return 1;
            let e2 = 0;
            return this.attachedElements.forEach((t2) => {
              t2.volume > e2 && (e2 = t2.volume);
            }), e2;
          }
          setSinkId(e2) {
            return Xn(this, void 0, void 0, function* () {
              this.sinkId = e2, yield Promise.all(this.attachedElements.map((t2) => {
                if (lo(t2)) return t2.setSinkId(e2);
              }));
            });
          }
          attach(e2) {
            const t2 = 0 === this.attachedElements.length;
            return e2 ? super.attach(e2) : e2 = super.attach(), this.sinkId && lo(e2) && e2.setSinkId(this.sinkId).catch((e3) => {
              this.log.error("Failed to set sink id on remote audio track", e3, this.logContext);
            }), this.audioContext && t2 && (this.log.debug("using audio context mapping", this.logContext), this.connectWebAudio(this.audioContext, e2), e2.volume = 0, e2.muted = true), this.elementVolume && this.setVolume(this.elementVolume), e2;
          }
          detach(e2) {
            let t2;
            return e2 ? (t2 = super.detach(e2), this.audioContext && (this.attachedElements.length > 0 ? this.connectWebAudio(this.audioContext, this.attachedElements[0]) : this.disconnectWebAudio())) : (t2 = super.detach(), this.disconnectWebAudio()), t2;
          }
          setAudioContext(e2) {
            this.audioContext = e2, e2 && this.attachedElements.length > 0 ? this.connectWebAudio(e2, this.attachedElements[0]) : e2 || this.disconnectWebAudio();
          }
          setWebAudioPlugins(e2) {
            this.webAudioPluginNodes = e2, this.attachedElements.length > 0 && this.audioContext && this.connectWebAudio(this.audioContext, this.attachedElements[0]);
          }
          connectWebAudio(t2, n2) {
            this.disconnectWebAudio(), this.sourceNode = t2.createMediaStreamSource(n2.srcObject);
            let i2 = this.sourceNode;
            this.webAudioPluginNodes.forEach((e2) => {
              i2.connect(e2), i2 = e2;
            }), this.gainNode = t2.createGain(), i2.connect(this.gainNode), this.gainNode.connect(t2.destination), this.elementVolume && this.gainNode.gain.setTargetAtTime(this.elementVolume, 0, 0.1), "running" !== t2.state && t2.resume().then(() => {
              "running" !== t2.state && this.emit(e.TrackEvent.AudioPlaybackFailed, new Error("Audio Context couldn't be started automatically"));
            }).catch((t3) => {
              this.emit(e.TrackEvent.AudioPlaybackFailed, t3);
            });
          }
          disconnectWebAudio() {
            var e2, t2;
            null === (e2 = this.gainNode) || void 0 === e2 || e2.disconnect(), null === (t2 = this.sourceNode) || void 0 === t2 || t2.disconnect(), this.gainNode = void 0, this.sourceNode = void 0;
          }
          getReceiverStats() {
            return Xn(this, void 0, void 0, function* () {
              if (!this.receiver || !this.receiver.getStats) return;
              let e2;
              return (yield this.receiver.getStats()).forEach((t2) => {
                "inbound-rtp" === t2.type && (e2 = { type: "audio", streamId: t2.id, timestamp: t2.timestamp, jitter: t2.jitter, bytesReceived: t2.bytesReceived, concealedSamples: t2.concealedSamples, concealmentEvents: t2.concealmentEvents, silentConcealedSamples: t2.silentConcealedSamples, silentConcealmentEvents: t2.silentConcealmentEvents, totalAudioEnergy: t2.totalAudioEnergy, totalSamplesDuration: t2.totalSamplesDuration });
              }), e2;
            });
          }
        }
        class Ia extends Pa {
          constructor(e2, t2, n2, i2, s2) {
            super(e2, t2, Hs.Kind.Video, n2, s2), this.elementInfos = [], this.monitorReceiver = () => Xn(this, void 0, void 0, function* () {
              if (!this.receiver) return void (this._currentBitrate = 0);
              const e3 = yield this.getReceiverStats();
              e3 && this.prevStats && this.receiver && (this._currentBitrate = Jr(e3, this.prevStats)), this.prevStats = e3;
            }), this.debouncedHandleResize = Or(() => {
              this.updateDimensions();
            }, 100), this.adaptiveStreamSettings = i2;
          }
          get isAdaptiveStream() {
            return void 0 !== this.adaptiveStreamSettings;
          }
          get mediaStreamTrack() {
            return this._mediaStreamTrack;
          }
          setMuted(e2) {
            super.setMuted(e2), this.attachedElements.forEach((t2) => {
              e2 ? zs(this._mediaStreamTrack, t2) : Gs(this._mediaStreamTrack, t2);
            });
          }
          attach(e2) {
            if (e2 ? super.attach(e2) : e2 = super.attach(), this.adaptiveStreamSettings && void 0 === this.elementInfos.find((t2) => t2.element === e2)) {
              const t2 = new Oa(e2);
              this.observeElementInfo(t2);
            }
            return e2;
          }
          observeElementInfo(e2) {
            this.adaptiveStreamSettings && void 0 === this.elementInfos.find((t2) => t2 === e2) ? (e2.handleResize = () => {
              this.debouncedHandleResize();
            }, e2.handleVisibilityChanged = () => {
              this.updateVisibility();
            }, this.elementInfos.push(e2), e2.observe(), this.debouncedHandleResize(), this.updateVisibility()) : this.log.warn("visibility resize observer not triggered", this.logContext);
          }
          stopObservingElementInfo(e2) {
            if (!this.isAdaptiveStream) return void this.log.warn("stopObservingElementInfo ignored", this.logContext);
            const t2 = this.elementInfos.filter((t3) => t3 === e2);
            for (const e3 of t2) e3.stopObserving();
            this.elementInfos = this.elementInfos.filter((t3) => t3 !== e2), this.updateVisibility(), this.debouncedHandleResize();
          }
          detach(e2) {
            let t2 = [];
            if (e2) return this.stopObservingElement(e2), super.detach(e2);
            t2 = super.detach();
            for (const e3 of t2) this.stopObservingElement(e3);
            return t2;
          }
          getDecoderImplementation() {
            var e2;
            return null === (e2 = this.prevStats) || void 0 === e2 ? void 0 : e2.decoderImplementation;
          }
          getReceiverStats() {
            return Xn(this, void 0, void 0, function* () {
              if (!this.receiver || !this.receiver.getStats) return;
              const e2 = yield this.receiver.getStats();
              let t2, n2 = "", i2 = /* @__PURE__ */ new Map();
              return e2.forEach((e3) => {
                "inbound-rtp" === e3.type ? (n2 = e3.codecId, t2 = { type: "video", streamId: e3.id, framesDecoded: e3.framesDecoded, framesDropped: e3.framesDropped, framesReceived: e3.framesReceived, packetsReceived: e3.packetsReceived, packetsLost: e3.packetsLost, frameWidth: e3.frameWidth, frameHeight: e3.frameHeight, pliCount: e3.pliCount, firCount: e3.firCount, nackCount: e3.nackCount, jitter: e3.jitter, timestamp: e3.timestamp, bytesReceived: e3.bytesReceived, decoderImplementation: e3.decoderImplementation }) : "codec" === e3.type && i2.set(e3.id, e3);
              }), t2 && "" !== n2 && i2.get(n2) && (t2.mimeType = i2.get(n2).mimeType), t2;
            });
          }
          stopObservingElement(e2) {
            const t2 = this.elementInfos.filter((t3) => t3.element === e2);
            for (const e3 of t2) this.stopObservingElementInfo(e3);
          }
          handleAppVisibilityChanged() {
            const e2 = Object.create(null, { handleAppVisibilityChanged: { get: () => super.handleAppVisibilityChanged } });
            return Xn(this, void 0, void 0, function* () {
              yield e2.handleAppVisibilityChanged.call(this), this.isAdaptiveStream && this.updateVisibility();
            });
          }
          updateVisibility() {
            var t2, n2;
            const i2 = this.elementInfos.reduce((e2, t3) => Math.max(e2, t3.visibilityChangedAt || 0), 0), s2 = !(null !== (n2 = null === (t2 = this.adaptiveStreamSettings) || void 0 === t2 ? void 0 : t2.pauseVideoInBackground) && void 0 !== n2 && !n2) && this.isInBackground, o2 = this.elementInfos.some((e2) => e2.pictureInPicture), r2 = this.elementInfos.some((e2) => e2.visible) && !s2 || o2;
            this.lastVisible !== r2 && (!r2 && Date.now() - i2 < 100 ? Ks.setTimeout(() => {
              this.updateVisibility();
            }, 100) : (this.lastVisible = r2, this.emit(e.TrackEvent.VisibilityChanged, r2, this)));
          }
          updateDimensions() {
            var t2, n2;
            let i2 = 0, s2 = 0;
            const o2 = this.getPixelDensity();
            for (const e2 of this.elementInfos) {
              const t3 = e2.width() * o2, n3 = e2.height() * o2;
              t3 + n3 > i2 + s2 && (i2 = t3, s2 = n3);
            }
            (null === (t2 = this.lastDimensions) || void 0 === t2 ? void 0 : t2.width) === i2 && (null === (n2 = this.lastDimensions) || void 0 === n2 ? void 0 : n2.height) === s2 || (this.lastDimensions = { width: i2, height: s2 }, this.emit(e.TrackEvent.VideoDimensionsChanged, this.lastDimensions, this));
          }
          getPixelDensity() {
            var e2;
            const t2 = null === (e2 = this.adaptiveStreamSettings) || void 0 === e2 ? void 0 : e2.pixelDensity;
            if ("screen" === t2) return To();
            if (!t2) {
              return To() > 2 ? 2 : 1;
            }
            return t2;
          }
        }
        class Oa {
          get visible() {
            return this.isPiP || this.isIntersecting;
          }
          get pictureInPicture() {
            return this.isPiP;
          }
          constructor(e2, t2) {
            this.onVisibilityChanged = (e3) => {
              var t3;
              const { target: n2, isIntersecting: i2 } = e3;
              n2 === this.element && (this.isIntersecting = i2, this.isPiP = Da(this.element), this.visibilityChangedAt = Date.now(), null === (t3 = this.handleVisibilityChanged) || void 0 === t3 || t3.call(this));
            }, this.onEnterPiP = () => {
              var e3, t3, n2;
              null === (t3 = null === (e3 = window.documentPictureInPicture) || void 0 === e3 ? void 0 : e3.window) || void 0 === t3 || t3.addEventListener("pagehide", this.onLeavePiP), this.isPiP = Da(this.element), null === (n2 = this.handleVisibilityChanged) || void 0 === n2 || n2.call(this);
            }, this.onLeavePiP = () => {
              var e3;
              this.isPiP = Da(this.element), null === (e3 = this.handleVisibilityChanged) || void 0 === e3 || e3.call(this);
            }, this.element = e2, this.isIntersecting = null != t2 ? t2 : xa(e2), this.isPiP = vo() && Da(e2), this.visibilityChangedAt = 0;
          }
          width() {
            return this.element.clientWidth;
          }
          height() {
            return this.element.clientHeight;
          }
          observe() {
            var e2, t2, n2;
            this.isIntersecting = xa(this.element), this.isPiP = Da(this.element), this.element.handleResize = () => {
              var e3;
              null === (e3 = this.handleResize) || void 0 === e3 || e3.call(this);
            }, this.element.handleVisibilityChanged = this.onVisibilityChanged, Io().observe(this.element), Po().observe(this.element), this.element.addEventListener("enterpictureinpicture", this.onEnterPiP), this.element.addEventListener("leavepictureinpicture", this.onLeavePiP), null === (e2 = window.documentPictureInPicture) || void 0 === e2 || e2.addEventListener("enter", this.onEnterPiP), null === (n2 = null === (t2 = window.documentPictureInPicture) || void 0 === t2 ? void 0 : t2.window) || void 0 === n2 || n2.addEventListener("pagehide", this.onLeavePiP);
          }
          stopObserving() {
            var e2, t2, n2, i2, s2;
            null === (e2 = Io()) || void 0 === e2 || e2.unobserve(this.element), null === (t2 = Po()) || void 0 === t2 || t2.unobserve(this.element), this.element.removeEventListener("enterpictureinpicture", this.onEnterPiP), this.element.removeEventListener("leavepictureinpicture", this.onLeavePiP), null === (n2 = window.documentPictureInPicture) || void 0 === n2 || n2.removeEventListener("enter", this.onEnterPiP), null === (s2 = null === (i2 = window.documentPictureInPicture) || void 0 === i2 ? void 0 : i2.window) || void 0 === s2 || s2.removeEventListener("pagehide", this.onLeavePiP);
          }
        }
        function Da(e2) {
          var t2, n2;
          return document.pictureInPictureElement === e2 || !!(null === (t2 = window.documentPictureInPicture) || void 0 === t2 ? void 0 : t2.window) && xa(e2, null === (n2 = window.documentPictureInPicture) || void 0 === n2 ? void 0 : n2.window);
        }
        function xa(e2, t2) {
          const n2 = t2 || window;
          let i2 = e2.offsetTop, s2 = e2.offsetLeft;
          const o2 = e2.offsetWidth, r2 = e2.offsetHeight, { hidden: a2 } = e2, { display: c2 } = getComputedStyle(e2);
          for (; e2.offsetParent; ) i2 += (e2 = e2.offsetParent).offsetTop, s2 += e2.offsetLeft;
          return i2 < n2.pageYOffset + n2.innerHeight && s2 < n2.pageXOffset + n2.innerWidth && i2 + r2 > n2.pageYOffset && s2 + o2 > n2.pageXOffset && !a2 && "none" !== c2;
        }
        class Ma extends ni.EventEmitter {
          constructor(t2, n2, i2, s2) {
            var o2;
            super(), this.metadataMuted = false, this.encryption = lt.NONE, this.log = Wn, this.handleMuted = () => {
              this.emit(e.TrackEvent.Muted);
            }, this.handleUnmuted = () => {
              this.emit(e.TrackEvent.Unmuted);
            }, this.log = Gn(null !== (o2 = null == s2 ? void 0 : s2.loggerName) && void 0 !== o2 ? o2 : e.LoggerNames.Publication), this.loggerContextCb = this.loggerContextCb, this.setMaxListeners(100), this.kind = t2, this.trackSid = n2, this.trackName = i2, this.source = Hs.Source.Unknown;
          }
          setTrack(t2) {
            this.track && (this.track.off(e.TrackEvent.Muted, this.handleMuted), this.track.off(e.TrackEvent.Unmuted, this.handleUnmuted)), this.track = t2, t2 && (t2.on(e.TrackEvent.Muted, this.handleMuted), t2.on(e.TrackEvent.Unmuted, this.handleUnmuted));
          }
          get logContext() {
            var e2;
            return Object.assign(Object.assign({}, null === (e2 = this.loggerContextCb) || void 0 === e2 ? void 0 : e2.call(this)), sr(this));
          }
          get isMuted() {
            return this.metadataMuted;
          }
          get isEnabled() {
            return true;
          }
          get isSubscribed() {
            return void 0 !== this.track;
          }
          get isEncrypted() {
            return this.encryption !== lt.NONE;
          }
          get audioTrack() {
            if (Bo(this.track)) return this.track;
          }
          get videoTrack() {
            if (Vo(this.track)) return this.track;
          }
          updateInfo(e2) {
            this.trackSid = e2.sid, this.trackName = e2.name, this.source = Hs.sourceFromProto(e2.source), this.mimeType = e2.mimeType, this.kind === Hs.Kind.Video && e2.width > 0 && (this.dimensions = { width: e2.width, height: e2.height }, this.simulcasted = e2.simulcast), this.encryption = e2.encryption, this.trackInfo = e2, this.log.debug("update publication info", Object.assign(Object.assign({}, this.logContext), { info: e2 }));
          }
        }
        !function(e2) {
          var t2, n2;
          (t2 = e2.SubscriptionStatus || (e2.SubscriptionStatus = {})).Desired = "desired", t2.Subscribed = "subscribed", t2.Unsubscribed = "unsubscribed", (n2 = e2.PermissionStatus || (e2.PermissionStatus = {})).Allowed = "allowed", n2.NotAllowed = "not_allowed";
        }(Ma || (Ma = {}));
        class Na extends Ma {
          get isUpstreamPaused() {
            var e2;
            return null === (e2 = this.track) || void 0 === e2 ? void 0 : e2.isUpstreamPaused;
          }
          constructor(t2, n2, i2, s2) {
            super(t2, n2.sid, n2.name, s2), this.track = void 0, this.handleTrackEnded = () => {
              this.emit(e.TrackEvent.Ended);
            }, this.updateInfo(n2), this.setTrack(i2);
          }
          setTrack(t2) {
            this.track && this.track.off(e.TrackEvent.Ended, this.handleTrackEnded), super.setTrack(t2), t2 && t2.on(e.TrackEvent.Ended, this.handleTrackEnded);
          }
          get isMuted() {
            return this.track ? this.track.isMuted : super.isMuted;
          }
          get audioTrack() {
            return super.audioTrack;
          }
          get videoTrack() {
            return super.videoTrack;
          }
          get isLocal() {
            return true;
          }
          mute() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              return null === (e2 = this.track) || void 0 === e2 ? void 0 : e2.mute();
            });
          }
          unmute() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              return null === (e2 = this.track) || void 0 === e2 ? void 0 : e2.unmute();
            });
          }
          pauseUpstream() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              yield null === (e2 = this.track) || void 0 === e2 ? void 0 : e2.pauseUpstream();
            });
          }
          resumeUpstream() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              yield null === (e2 = this.track) || void 0 === e2 ? void 0 : e2.resumeUpstream();
            });
          }
          getTrackFeatures() {
            var e2;
            if (Bo(this.track)) {
              const t2 = this.track.getSourceTrackSettings(), n2 = /* @__PURE__ */ new Set();
              return t2.autoGainControl && n2.add(nt.TF_AUTO_GAIN_CONTROL), t2.echoCancellation && n2.add(nt.TF_ECHO_CANCELLATION), t2.noiseSuppression && n2.add(nt.TF_NOISE_SUPPRESSION), t2.channelCount && t2.channelCount > 1 && n2.add(nt.TF_STEREO), (null === (e2 = this.options) || void 0 === e2 ? void 0 : e2.dtx) || n2.add(nt.TF_NO_DTX), this.track.enhancedNoiseCancellation && n2.add(nt.TF_ENHANCED_NOISE_CANCELLATION), Array.from(n2.values());
            }
            return [];
          }
        }
        function _a(e2, t2) {
          return Xn(this, void 0, void 0, function* () {
            null != e2 || (e2 = {});
            let n2 = false;
            const { audioProcessor: i2, videoProcessor: s2, optionsWithoutProcessor: o2 } = or(e2);
            let r2 = o2.audio, a2 = o2.video;
            if (i2 && "object" == typeof o2.audio && (o2.audio.processor = i2), s2 && "object" == typeof o2.video && (o2.video.processor = s2), e2.audio && "object" == typeof o2.audio && "string" == typeof o2.audio.deviceId) {
              const e3 = o2.audio.deviceId;
              o2.audio.deviceId = { exact: e3 }, n2 = true, r2 = Object.assign(Object.assign({}, o2.audio), { deviceId: { ideal: e3 } });
            }
            if (o2.video && "object" == typeof o2.video && "string" == typeof o2.video.deviceId) {
              const e3 = o2.video.deviceId;
              o2.video.deviceId = { exact: e3 }, n2 = true, a2 = Object.assign(Object.assign({}, o2.video), { deviceId: { ideal: e3 } });
            }
            (true === o2.audio || "object" == typeof o2.audio && !o2.audio.deviceId) && (o2.audio = { deviceId: "default" }), true === o2.video ? o2.video = { deviceId: "default" } : "object" != typeof o2.video || o2.video.deviceId || (o2.video.deviceId = "default");
            const c2 = Jo(o2, jr, Fr), d2 = Yo(c2), l2 = navigator.mediaDevices.getUserMedia(d2);
            o2.audio && (cr.userMediaPromiseMap.set("audioinput", l2), l2.catch(() => cr.userMediaPromiseMap.delete("audioinput"))), o2.video && (cr.userMediaPromiseMap.set("videoinput", l2), l2.catch(() => cr.userMediaPromiseMap.delete("videoinput")));
            try {
              const e3 = yield l2;
              return yield Promise.all(e3.getTracks().map((n3) => Xn(this, void 0, void 0, function* () {
                const o3 = "audio" === n3.kind;
                let r3, a3 = o3 ? c2.audio : c2.video;
                "boolean" != typeof a3 && a3 || (a3 = {});
                const l3 = o3 ? d2.audio : d2.video;
                "boolean" != typeof l3 && (r3 = l3);
                const u2 = n3.getSettings().deviceId;
                (null == r3 ? void 0 : r3.deviceId) && _o(r3.deviceId) !== u2 ? r3.deviceId = u2 : r3 || (r3 = { deviceId: u2 });
                const h2 = function(e4, t3, n4) {
                  switch (e4.kind) {
                    case "audio":
                      return new Yr(e4, t3, false, void 0, n4);
                    case "video":
                      return new da(e4, t3, false, n4);
                    default:
                      throw new Ds("unsupported track type: ".concat(e4.kind));
                  }
                }(n3, r3, t2);
                return h2.kind === Hs.Kind.Video ? h2.source = Hs.Source.Camera : h2.kind === Hs.Kind.Audio && (h2.source = Hs.Source.Microphone), h2.mediaStream = e3, Bo(h2) && i2 ? yield h2.setProcessor(i2) : Vo(h2) && s2 && (yield h2.setProcessor(s2)), h2;
              })));
            } catch (i3) {
              if (!n2) throw i3;
              return _a(Object.assign(Object.assign({}, e2), { audio: r2, video: a2 }), t2);
            }
          });
        }
        function Aa(e2) {
          return Xn(this, void 0, void 0, function* () {
            return (yield _a({ audio: false, video: null == e2 || e2 }))[0];
          });
        }
        function La(e2) {
          return Xn(this, void 0, void 0, function* () {
            return (yield _a({ audio: null == e2 || e2, video: false }))[0];
          });
        }
        e.ConnectionQuality = void 0, function(e2) {
          e2.Excellent = "excellent", e2.Good = "good", e2.Poor = "poor", e2.Lost = "lost", e2.Unknown = "unknown";
        }(e.ConnectionQuality || (e.ConnectionQuality = {}));
        class Ua extends ni.EventEmitter {
          get logContext() {
            var e2, t2;
            return Object.assign({}, null === (t2 = null === (e2 = this.loggerOptions) || void 0 === e2 ? void 0 : e2.loggerContextCb) || void 0 === t2 ? void 0 : t2.call(e2));
          }
          get isEncrypted() {
            return this.trackPublications.size > 0 && Array.from(this.trackPublications.values()).every((e2) => e2.isEncrypted);
          }
          get isAgent() {
            var e2;
            return (null === (e2 = this.permissions) || void 0 === e2 ? void 0 : e2.agent) || this.kind === ct.AGENT;
          }
          get isActive() {
            var e2;
            return (null === (e2 = this.participantInfo) || void 0 === e2 ? void 0 : e2.state) === at.ACTIVE;
          }
          get kind() {
            return this._kind;
          }
          get attributes() {
            return Object.freeze(Object.assign({}, this._attributes));
          }
          constructor(t2, n2, i2, s2, o2, r2) {
            let a2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : ct.STANDARD;
            var c2;
            super(), this.audioLevel = 0, this.isSpeaking = false, this._connectionQuality = e.ConnectionQuality.Unknown, this.log = Wn, this.log = Gn(null !== (c2 = null == r2 ? void 0 : r2.loggerName) && void 0 !== c2 ? c2 : e.LoggerNames.Participant), this.loggerOptions = r2, this.setMaxListeners(100), this.sid = t2, this.identity = n2, this.name = i2, this.metadata = s2, this.audioTrackPublications = /* @__PURE__ */ new Map(), this.videoTrackPublications = /* @__PURE__ */ new Map(), this.trackPublications = /* @__PURE__ */ new Map(), this._kind = a2, this._attributes = null != o2 ? o2 : {};
          }
          getTrackPublications() {
            return Array.from(this.trackPublications.values());
          }
          getTrackPublication(e2) {
            for (const [, t2] of this.trackPublications) if (t2.source === e2) return t2;
          }
          getTrackPublicationByName(e2) {
            for (const [, t2] of this.trackPublications) if (t2.trackName === e2) return t2;
          }
          waitUntilActive() {
            return this.isActive ? Promise.resolve() : (this.activeFuture || (this.activeFuture = new No(), this.once(e.ParticipantEvent.Active, () => {
              var e2, t2;
              null === (t2 = null === (e2 = this.activeFuture) || void 0 === e2 ? void 0 : e2.resolve) || void 0 === t2 || t2.call(e2), this.activeFuture = void 0;
            })), this.activeFuture.promise);
          }
          get connectionQuality() {
            return this._connectionQuality;
          }
          get isCameraEnabled() {
            var e2;
            const t2 = this.getTrackPublication(Hs.Source.Camera);
            return !(null === (e2 = null == t2 ? void 0 : t2.isMuted) || void 0 === e2 || e2);
          }
          get isMicrophoneEnabled() {
            var e2;
            const t2 = this.getTrackPublication(Hs.Source.Microphone);
            return !(null === (e2 = null == t2 ? void 0 : t2.isMuted) || void 0 === e2 || e2);
          }
          get isScreenShareEnabled() {
            return !!this.getTrackPublication(Hs.Source.ScreenShare);
          }
          get isLocal() {
            return false;
          }
          get joinedAt() {
            return this.participantInfo ? new Date(1e3 * Number.parseInt(this.participantInfo.joinedAt.toString())) : /* @__PURE__ */ new Date();
          }
          updateInfo(t2) {
            var n2;
            return !(this.participantInfo && this.participantInfo.sid === t2.sid && this.participantInfo.version > t2.version) && (this.identity = t2.identity, this.sid = t2.sid, this._setName(t2.name), this._setMetadata(t2.metadata), this._setAttributes(t2.attributes), t2.state === at.ACTIVE && (null === (n2 = this.participantInfo) || void 0 === n2 ? void 0 : n2.state) !== at.ACTIVE && this.emit(e.ParticipantEvent.Active), t2.permission && this.setPermissions(t2.permission), this.participantInfo = t2, true);
          }
          _setMetadata(t2) {
            const n2 = this.metadata !== t2, i2 = this.metadata;
            this.metadata = t2, n2 && this.emit(e.ParticipantEvent.ParticipantMetadataChanged, i2);
          }
          _setName(t2) {
            const n2 = this.name !== t2;
            this.name = t2, n2 && this.emit(e.ParticipantEvent.ParticipantNameChanged, t2);
          }
          _setAttributes(t2) {
            const n2 = function(e2, t3) {
              var n3;
              void 0 === e2 && (e2 = {}), void 0 === t3 && (t3 = {});
              const i2 = [...Object.keys(t3), ...Object.keys(e2)], s2 = {};
              for (const o2 of i2) e2[o2] !== t3[o2] && (s2[o2] = null !== (n3 = t3[o2]) && void 0 !== n3 ? n3 : "");
              return s2;
            }(this.attributes, t2);
            this._attributes = t2, Object.keys(n2).length > 0 && this.emit(e.ParticipantEvent.AttributesChanged, n2);
          }
          setPermissions(t2) {
            var n2, i2, s2, o2, r2, a2;
            const c2 = this.permissions, d2 = t2.canPublish !== (null === (n2 = this.permissions) || void 0 === n2 ? void 0 : n2.canPublish) || t2.canSubscribe !== (null === (i2 = this.permissions) || void 0 === i2 ? void 0 : i2.canSubscribe) || t2.canPublishData !== (null === (s2 = this.permissions) || void 0 === s2 ? void 0 : s2.canPublishData) || t2.hidden !== (null === (o2 = this.permissions) || void 0 === o2 ? void 0 : o2.hidden) || t2.recorder !== (null === (r2 = this.permissions) || void 0 === r2 ? void 0 : r2.recorder) || t2.canPublishSources.length !== this.permissions.canPublishSources.length || t2.canPublishSources.some((e2, t3) => {
              var n3;
              return e2 !== (null === (n3 = this.permissions) || void 0 === n3 ? void 0 : n3.canPublishSources[t3]);
            }) || t2.canSubscribeMetrics !== (null === (a2 = this.permissions) || void 0 === a2 ? void 0 : a2.canSubscribeMetrics);
            return this.permissions = t2, d2 && this.emit(e.ParticipantEvent.ParticipantPermissionsChanged, c2), d2;
          }
          setIsSpeaking(t2) {
            t2 !== this.isSpeaking && (this.isSpeaking = t2, t2 && (this.lastSpokeAt = /* @__PURE__ */ new Date()), this.emit(e.ParticipantEvent.IsSpeakingChanged, t2));
          }
          setConnectionQuality(t2) {
            const n2 = this._connectionQuality;
            this._connectionQuality = function(t3) {
              switch (t3) {
                case Xe.EXCELLENT:
                  return e.ConnectionQuality.Excellent;
                case Xe.GOOD:
                  return e.ConnectionQuality.Good;
                case Xe.POOR:
                  return e.ConnectionQuality.Poor;
                case Xe.LOST:
                  return e.ConnectionQuality.Lost;
                default:
                  return e.ConnectionQuality.Unknown;
              }
            }(t2), n2 !== this._connectionQuality && this.emit(e.ParticipantEvent.ConnectionQualityChanged, this._connectionQuality);
          }
          setDisconnected() {
            var e2, t2;
            this.activeFuture && (null === (t2 = (e2 = this.activeFuture).reject) || void 0 === t2 || t2.call(e2, new Error("Participant disconnected")), this.activeFuture = void 0);
          }
          setAudioContext(e2) {
            this.audioContext = e2, this.audioTrackPublications.forEach((t2) => Bo(t2.track) && t2.track.setAudioContext(e2));
          }
          addTrackPublication(t2) {
            t2.on(e.TrackEvent.Muted, () => {
              this.emit(e.ParticipantEvent.TrackMuted, t2);
            }), t2.on(e.TrackEvent.Unmuted, () => {
              this.emit(e.ParticipantEvent.TrackUnmuted, t2);
            });
            const n2 = t2;
            switch (n2.track && (n2.track.sid = t2.trackSid), this.trackPublications.set(t2.trackSid, t2), t2.kind) {
              case Hs.Kind.Audio:
                this.audioTrackPublications.set(t2.trackSid, t2);
                break;
              case Hs.Kind.Video:
                this.videoTrackPublications.set(t2.trackSid, t2);
            }
          }
        }
        class ja extends Ua {
          constructor(e2, t2, n2, i2, s2) {
            super(e2, t2, void 0, void 0, void 0, { loggerName: i2.loggerName, loggerContextCb: () => this.engine.logContext }), this.pendingPublishing = /* @__PURE__ */ new Set(), this.pendingPublishPromises = /* @__PURE__ */ new Map(), this.participantTrackPermissions = [], this.allParticipantsAllowedToSubscribe = true, this.encryptionType = lt.NONE, this.enabledPublishVideoCodecs = [], this.pendingAcks = /* @__PURE__ */ new Map(), this.pendingResponses = /* @__PURE__ */ new Map(), this.handleReconnecting = () => {
              this.reconnectFuture || (this.reconnectFuture = new No());
            }, this.handleReconnected = () => {
              var e3, t3;
              null === (t3 = null === (e3 = this.reconnectFuture) || void 0 === e3 ? void 0 : e3.resolve) || void 0 === t3 || t3.call(e3), this.reconnectFuture = void 0, this.updateTrackSubscriptionPermissions();
            }, this.handleDisconnected = () => {
              var e3, t3;
              this.reconnectFuture && (this.reconnectFuture.promise.catch((e4) => this.log.warn(e4.message, this.logContext)), null === (t3 = null === (e3 = this.reconnectFuture) || void 0 === e3 ? void 0 : e3.reject) || void 0 === t3 || t3.call(e3, "Got disconnected during reconnection attempt"), this.reconnectFuture = void 0);
            }, this.handleSignalRequestResponse = (e3) => {
              const { requestId: t3, reason: n3, message: i3 } = e3, s3 = this.pendingSignalRequests.get(t3);
              s3 && (n3 !== An.OK && s3.reject(new As(i3, n3)), this.pendingSignalRequests.delete(t3));
            }, this.handleDataPacket = (e3) => {
              switch (e3.value.case) {
                case "rpcResponse":
                  let t3 = e3.value.value, n3 = null, i3 = null;
                  "payload" === t3.value.case ? n3 = t3.value.value : "error" === t3.value.case && (i3 = Wr.fromProto(t3.value.value)), this.handleIncomingRpcResponse(t3.requestId, n3, i3);
                  break;
                case "rpcAck":
                  let s3 = e3.value.value;
                  this.handleIncomingRpcAck(s3.requestId);
              }
            }, this.updateTrackSubscriptionPermissions = () => {
              this.log.debug("updating track subscription permissions", Object.assign(Object.assign({}, this.logContext), { allParticipantsAllowed: this.allParticipantsAllowedToSubscribe, participantTrackPermissions: this.participantTrackPermissions })), this.engine.client.sendUpdateSubscriptionPermissions(this.allParticipantsAllowedToSubscribe, this.participantTrackPermissions.map((e3) => function(e4) {
                var t3, n3, i3;
                if (!e4.participantSid && !e4.participantIdentity) throw new Error("Invalid track permission, must provide at least one of participantIdentity and participantSid");
                return new Cn({ participantIdentity: null !== (t3 = e4.participantIdentity) && void 0 !== t3 ? t3 : "", participantSid: null !== (n3 = e4.participantSid) && void 0 !== n3 ? n3 : "", allTracks: null !== (i3 = e4.allowAll) && void 0 !== i3 && i3, trackSids: e4.allowedTrackSids || [] });
              }(e3)));
            }, this.onTrackUnmuted = (e3) => {
              this.onTrackMuted(e3, e3.isUpstreamPaused);
            }, this.onTrackMuted = (e3, t3) => {
              void 0 === t3 && (t3 = true), e3.sid ? this.engine.updateMuteStatus(e3.sid, t3) : this.log.error("could not update mute status for unpublished track", Object.assign(Object.assign({}, this.logContext), sr(e3)));
            }, this.onTrackUpstreamPaused = (e3) => {
              this.log.debug("upstream paused", Object.assign(Object.assign({}, this.logContext), sr(e3))), this.onTrackMuted(e3, true);
            }, this.onTrackUpstreamResumed = (e3) => {
              this.log.debug("upstream resumed", Object.assign(Object.assign({}, this.logContext), sr(e3))), this.onTrackMuted(e3, e3.isMuted);
            }, this.onTrackFeatureUpdate = (e3) => {
              const t3 = this.audioTrackPublications.get(e3.sid);
              t3 ? this.engine.client.sendUpdateLocalAudioTrack(t3.trackSid, t3.getTrackFeatures()) : this.log.warn("Could not update local audio track settings, missing publication for track ".concat(e3.sid), this.logContext);
            }, this.handleSubscribedQualityUpdate = (e3) => Xn(this, void 0, void 0, function* () {
              var t3, n3, i3, s3, o2, r2;
              if (!(null === (o2 = this.roomOptions) || void 0 === o2 ? void 0 : o2.dynacast)) return;
              const a2 = this.videoTrackPublications.get(e3.trackSid);
              if (a2) if (e3.subscribedCodecs.length > 0) {
                if (!a2.videoTrack) return;
                const o3 = yield a2.videoTrack.setPublishingCodecs(e3.subscribedCodecs);
                try {
                  for (var c2, d2 = true, l2 = $n(o3); !(t3 = (c2 = yield l2.next()).done); d2 = true) {
                    s3 = c2.value, d2 = false;
                    const e4 = s3;
                    Xs(e4) && (this.log.debug("publish ".concat(e4, " for ").concat(a2.videoTrack.sid), Object.assign(Object.assign({}, this.logContext), sr(a2))), yield this.publishAdditionalCodecForTrack(a2.videoTrack, e4, a2.options));
                  }
                } catch (e4) {
                  n3 = { error: e4 };
                } finally {
                  try {
                    d2 || t3 || !(i3 = l2.return) || (yield i3.call(l2));
                  } finally {
                    if (n3) throw n3.error;
                  }
                }
              } else e3.subscribedQualities.length > 0 && (yield null === (r2 = a2.videoTrack) || void 0 === r2 ? void 0 : r2.setPublishingLayers(e3.subscribedQualities));
              else this.log.warn("received subscribed quality update for unknown track", Object.assign(Object.assign({}, this.logContext), { trackSid: e3.trackSid }));
            }), this.handleLocalTrackUnpublished = (e3) => {
              const t3 = this.trackPublications.get(e3.trackSid);
              t3 ? this.unpublishTrack(t3.track) : this.log.warn("received unpublished event for unknown track", Object.assign(Object.assign({}, this.logContext), { trackSid: e3.trackSid }));
            }, this.handleTrackEnded = (e3) => Xn(this, void 0, void 0, function* () {
              if (e3.source === Hs.Source.ScreenShare || e3.source === Hs.Source.ScreenShareAudio) this.log.debug("unpublishing local track due to TrackEnded", Object.assign(Object.assign({}, this.logContext), sr(e3))), this.unpublishTrack(e3);
              else if (e3.isUserProvided) yield e3.mute();
              else if (Ko(e3) || qo(e3)) try {
                if (vo()) try {
                  const t3 = yield null === navigator || void 0 === navigator ? void 0 : navigator.permissions.query({ name: e3.source === Hs.Source.Camera ? "camera" : "microphone" });
                  if (t3 && "denied" === t3.state) throw this.log.warn("user has revoked access to ".concat(e3.source), Object.assign(Object.assign({}, this.logContext), sr(e3))), t3.onchange = () => {
                    "denied" !== t3.state && (e3.isMuted || e3.restartTrack(), t3.onchange = null);
                  }, new Error("GetUserMedia Permission denied");
                } catch (e4) {
                }
                e3.isMuted || (this.log.debug("track ended, attempting to use a different device", Object.assign(Object.assign({}, this.logContext), sr(e3))), Ko(e3) ? yield e3.restartTrack({ deviceId: "default" }) : yield e3.restartTrack());
              } catch (t3) {
                this.log.warn("could not restart track, muting instead", Object.assign(Object.assign({}, this.logContext), sr(e3))), yield e3.mute();
              }
            }), this.audioTrackPublications = /* @__PURE__ */ new Map(), this.videoTrackPublications = /* @__PURE__ */ new Map(), this.trackPublications = /* @__PURE__ */ new Map(), this.engine = n2, this.roomOptions = i2, this.setupEngine(n2), this.activeDeviceMap = /* @__PURE__ */ new Map([["audioinput", "default"], ["videoinput", "default"], ["audiooutput", "default"]]), this.pendingSignalRequests = /* @__PURE__ */ new Map(), this.rpcHandlers = s2;
          }
          get lastCameraError() {
            return this.cameraError;
          }
          get lastMicrophoneError() {
            return this.microphoneError;
          }
          get isE2EEEnabled() {
            return this.encryptionType !== lt.NONE;
          }
          getTrackPublication(e2) {
            const t2 = super.getTrackPublication(e2);
            if (t2) return t2;
          }
          getTrackPublicationByName(e2) {
            const t2 = super.getTrackPublicationByName(e2);
            if (t2) return t2;
          }
          setupEngine(t2) {
            this.engine = t2, this.engine.on(e.EngineEvent.RemoteMute, (e2, t3) => {
              const n2 = this.trackPublications.get(e2);
              n2 && n2.track && (t3 ? n2.mute() : n2.unmute());
            }), this.engine.on(e.EngineEvent.Connected, this.handleReconnected).on(e.EngineEvent.SignalRestarted, this.handleReconnected).on(e.EngineEvent.SignalResumed, this.handleReconnected).on(e.EngineEvent.Restarting, this.handleReconnecting).on(e.EngineEvent.Resuming, this.handleReconnecting).on(e.EngineEvent.LocalTrackUnpublished, this.handleLocalTrackUnpublished).on(e.EngineEvent.SubscribedQualityUpdate, this.handleSubscribedQualityUpdate).on(e.EngineEvent.Disconnected, this.handleDisconnected).on(e.EngineEvent.SignalRequestResponse, this.handleSignalRequestResponse).on(e.EngineEvent.DataPacketReceived, this.handleDataPacket);
          }
          setMetadata(e2) {
            return Xn(this, void 0, void 0, function* () {
              yield this.requestMetadataUpdate({ metadata: e2 });
            });
          }
          setName(e2) {
            return Xn(this, void 0, void 0, function* () {
              yield this.requestMetadataUpdate({ name: e2 });
            });
          }
          setAttributes(e2) {
            return Xn(this, void 0, void 0, function* () {
              yield this.requestMetadataUpdate({ attributes: e2 });
            });
          }
          requestMetadataUpdate(e2) {
            return Xn(this, arguments, void 0, function(e3) {
              var t2 = this;
              let { metadata: n2, name: i2, attributes: s2 } = e3;
              return function* () {
                return new Promise((e4, o2) => Xn(t2, void 0, void 0, function* () {
                  var t3, r2;
                  try {
                    let a2 = false;
                    const c2 = yield this.engine.client.sendUpdateLocalMetadata(null !== (t3 = null != n2 ? n2 : this.metadata) && void 0 !== t3 ? t3 : "", null !== (r2 = null != i2 ? i2 : this.name) && void 0 !== r2 ? r2 : "", s2), d2 = performance.now();
                    for (this.pendingSignalRequests.set(c2, { resolve: e4, reject: (e5) => {
                      o2(e5), a2 = true;
                    }, values: { name: i2, metadata: n2, attributes: s2 } }); performance.now() - d2 < 5e3 && !a2; ) {
                      if ((!i2 || this.name === i2) && (!n2 || this.metadata === n2) && (!s2 || Object.entries(s2).every((e5) => {
                        let [t4, n3] = e5;
                        return this.attributes[t4] === n3 || "" === n3 && !this.attributes[t4];
                      }))) return this.pendingSignalRequests.delete(c2), void e4();
                      yield io(50);
                    }
                    o2(new As("Request to update local metadata timed out", "TimeoutError"));
                  } catch (e5) {
                    e5 instanceof Error && o2(e5);
                  }
                }));
              }();
            });
          }
          setCameraEnabled(e2, t2, n2) {
            return this.setTrackEnabled(Hs.Source.Camera, e2, t2, n2);
          }
          setMicrophoneEnabled(e2, t2, n2) {
            return this.setTrackEnabled(Hs.Source.Microphone, e2, t2, n2);
          }
          setScreenShareEnabled(e2, t2, n2) {
            return this.setTrackEnabled(Hs.Source.ScreenShare, e2, t2, n2);
          }
          setPermissions(t2) {
            const n2 = this.permissions, i2 = super.setPermissions(t2);
            return i2 && n2 && this.emit(e.ParticipantEvent.ParticipantPermissionsChanged, n2), i2;
          }
          setE2EEEnabled(e2) {
            return Xn(this, void 0, void 0, function* () {
              this.encryptionType = e2 ? lt.GCM : lt.NONE, yield this.republishAllTracks(void 0, false);
            });
          }
          setTrackEnabled(t2, n2, i2, s2) {
            return Xn(this, void 0, void 0, function* () {
              var o2, r2;
              this.log.debug("setTrackEnabled", Object.assign(Object.assign({}, this.logContext), { source: t2, enabled: n2 })), this.republishPromise && (yield this.republishPromise);
              let a2 = this.getTrackPublication(t2);
              if (n2) if (a2) yield a2.unmute();
              else {
                let n3;
                if (this.pendingPublishing.has(t2)) {
                  const e2 = yield this.waitForPendingPublicationOfSource(t2);
                  return e2 || this.log.info("waiting for pending publication promise timed out", Object.assign(Object.assign({}, this.logContext), { source: t2 })), yield null == e2 ? void 0 : e2.unmute(), e2;
                }
                this.pendingPublishing.add(t2);
                try {
                  switch (t2) {
                    case Hs.Source.Camera:
                      n3 = yield this.createTracks({ video: null === (o2 = i2) || void 0 === o2 || o2 });
                      break;
                    case Hs.Source.Microphone:
                      n3 = yield this.createTracks({ audio: null === (r2 = i2) || void 0 === r2 || r2 });
                      break;
                    case Hs.Source.ScreenShare:
                      n3 = yield this.createScreenTracks(Object.assign({}, i2));
                      break;
                    default:
                      throw new Ds(t2);
                  }
                } catch (i3) {
                  throw null == n3 || n3.forEach((e2) => {
                    e2.stop();
                  }), i3 instanceof Error && this.emit(e.ParticipantEvent.MediaDevicesError, i3), this.pendingPublishing.delete(t2), i3;
                }
                try {
                  const e2 = [];
                  for (const t4 of n3) this.log.info("publishing track", Object.assign(Object.assign({}, this.logContext), sr(t4))), e2.push(this.publishTrack(t4, s2));
                  const t3 = yield Promise.all(e2);
                  [a2] = t3;
                } catch (e2) {
                  throw null == n3 || n3.forEach((e3) => {
                    e3.stop();
                  }), e2;
                } finally {
                  this.pendingPublishing.delete(t2);
                }
              }
              else if (!(null == a2 ? void 0 : a2.track) && this.pendingPublishing.has(t2) && (a2 = yield this.waitForPendingPublicationOfSource(t2), a2 || this.log.info("waiting for pending publication promise timed out", Object.assign(Object.assign({}, this.logContext), { source: t2 }))), a2 && a2.track) if (t2 === Hs.Source.ScreenShare) {
                a2 = yield this.unpublishTrack(a2.track);
                const e2 = this.getTrackPublication(Hs.Source.ScreenShareAudio);
                e2 && e2.track && this.unpublishTrack(e2.track);
              } else yield a2.mute();
              return a2;
            });
          }
          enableCameraAndMicrophone() {
            return Xn(this, void 0, void 0, function* () {
              if (!this.pendingPublishing.has(Hs.Source.Camera) && !this.pendingPublishing.has(Hs.Source.Microphone)) {
                this.pendingPublishing.add(Hs.Source.Camera), this.pendingPublishing.add(Hs.Source.Microphone);
                try {
                  const e2 = yield this.createTracks({ audio: true, video: true });
                  yield Promise.all(e2.map((e3) => this.publishTrack(e3)));
                } finally {
                  this.pendingPublishing.delete(Hs.Source.Camera), this.pendingPublishing.delete(Hs.Source.Microphone);
                }
              }
            });
          }
          createTracks(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2, i2;
              null != t2 || (t2 = {});
              const s2 = Jo(t2, null === (n2 = this.roomOptions) || void 0 === n2 ? void 0 : n2.audioCaptureDefaults, null === (i2 = this.roomOptions) || void 0 === i2 ? void 0 : i2.videoCaptureDefaults);
              try {
                const t3 = yield _a(s2, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
                return t3.map((t4) => (Bo(t4) && (this.microphoneError = void 0, t4.setAudioContext(this.audioContext), t4.source = Hs.Source.Microphone, this.emit(e.ParticipantEvent.AudioStreamAcquired)), Vo(t4) && (this.cameraError = void 0, t4.source = Hs.Source.Camera), t4));
              } catch (e2) {
                throw e2 instanceof Error && (t2.audio && (this.microphoneError = e2), t2.video && (this.cameraError = e2)), e2;
              }
            });
          }
          createScreenTracks(t2) {
            return Xn(this, void 0, void 0, function* () {
              if (void 0 === t2 && (t2 = {}), void 0 === navigator.mediaDevices.getDisplayMedia) throw new Os("getDisplayMedia not supported");
              void 0 !== t2.resolution || mo() || (t2.resolution = to.h1080fps30.resolution);
              const n2 = tr(t2), i2 = yield navigator.mediaDevices.getDisplayMedia(n2), s2 = i2.getVideoTracks();
              if (0 === s2.length) throw new Ds("no video track found");
              const o2 = new da(s2[0], void 0, false, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
              o2.source = Hs.Source.ScreenShare, t2.contentHint && (o2.mediaStreamTrack.contentHint = t2.contentHint);
              const r2 = [o2];
              if (i2.getAudioTracks().length > 0) {
                this.emit(e.ParticipantEvent.AudioStreamAcquired);
                const t3 = new Yr(i2.getAudioTracks()[0], void 0, false, this.audioContext, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
                t3.source = Hs.Source.ScreenShareAudio, r2.push(t3);
              }
              return r2;
            });
          }
          publishTrack(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              return this.publishOrRepublishTrack(e2, t2);
            });
          }
          publishOrRepublishTrack(t2, n2) {
            return Xn(this, arguments, void 0, function(t3, n3) {
              var i2 = this;
              let s2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
              return function* () {
                var o2, r2, a2, c2;
                let d2, l2;
                if (Ko(t3) && t3.setAudioContext(i2.audioContext), yield null === (o2 = i2.reconnectFuture) || void 0 === o2 ? void 0 : o2.promise, i2.republishPromise && !s2 && (yield i2.republishPromise), Fo(t3) && i2.pendingPublishPromises.has(t3) && (yield i2.pendingPublishPromises.get(t3)), t3 instanceof MediaStreamTrack) d2 = t3.getConstraints();
                else {
                  let e2;
                  switch (d2 = t3.constraints, t3.source) {
                    case Hs.Source.Microphone:
                      e2 = "audioinput";
                      break;
                    case Hs.Source.Camera:
                      e2 = "videoinput";
                  }
                  e2 && i2.activeDeviceMap.has(e2) && (d2 = Object.assign(Object.assign({}, d2), { deviceId: i2.activeDeviceMap.get(e2) }));
                }
                if (t3 instanceof MediaStreamTrack) switch (t3.kind) {
                  case "audio":
                    t3 = new Yr(t3, d2, true, i2.audioContext, { loggerName: i2.roomOptions.loggerName, loggerContextCb: () => i2.logContext });
                    break;
                  case "video":
                    t3 = new da(t3, d2, true, { loggerName: i2.roomOptions.loggerName, loggerContextCb: () => i2.logContext });
                    break;
                  default:
                    throw new Ds("unsupported MediaStreamTrack kind ".concat(t3.kind));
                }
                else t3.updateLoggerOptions({ loggerName: i2.roomOptions.loggerName, loggerContextCb: () => i2.logContext });
                if (i2.trackPublications.forEach((e2) => {
                  e2.track && e2.track === t3 && (l2 = e2);
                }), l2) return i2.log.warn("track has already been published, skipping", Object.assign(Object.assign({}, i2.logContext), sr(l2))), l2;
                const u2 = "channelCount" in t3.mediaStreamTrack.getSettings() && 2 === t3.mediaStreamTrack.getSettings().channelCount || 2 === t3.mediaStreamTrack.getConstraints().channelCount, h2 = null !== (r2 = null == n3 ? void 0 : n3.forceStereo) && void 0 !== r2 ? r2 : u2;
                h2 && (n3 || (n3 = {}), void 0 === n3.dtx && i2.log.info("Opus DTX will be disabled for stereo tracks by default. Enable them explicitly to make it work.", Object.assign(Object.assign({}, i2.logContext), sr(t3))), void 0 === n3.red && i2.log.info("Opus RED will be disabled for stereo tracks by default. Enable them explicitly to make it work."), null !== (a2 = n3.dtx) && void 0 !== a2 || (n3.dtx = false), null !== (c2 = n3.red) && void 0 !== c2 || (n3.red = false));
                const p2 = Object.assign(Object.assign({}, i2.roomOptions.publishDefaults), n3);
                !function() {
                  const e2 = js(), t4 = "17.2";
                  if (e2) return "Safari" !== e2.name && "iOS" !== e2.os || !!("iOS" === e2.os && e2.osVersion && Co(t4, e2.osVersion) >= 0) || "Safari" === e2.name && Co(t4, e2.version) >= 0;
                }() && i2.roomOptions.e2ee && (i2.log.info("End-to-end encryption is set up, simulcast publishing will be disabled on Safari versions and iOS browsers running iOS < v17.2", Object.assign({}, i2.logContext)), p2.simulcast = false), p2.source && (t3.source = p2.source);
                const m2 = new Promise((n4, s3) => Xn(i2, void 0, void 0, function* () {
                  try {
                    if (this.engine.client.currentState !== pr.CONNECTED) {
                      this.log.debug("deferring track publication until signal is connected", Object.assign(Object.assign({}, this.logContext), { track: sr(t3) }));
                      const i3 = () => Xn(this, void 0, void 0, function* () {
                        try {
                          const e2 = yield this.publish(t3, p2, h2);
                          n4(e2);
                        } catch (e2) {
                          s3(e2);
                        }
                      });
                      setTimeout(() => {
                        this.engine.off(e.EngineEvent.SignalConnected, i3), s3(new _s("publishing rejected as engine not connected within timeout", 408));
                      }, 15e3), this.engine.once(e.EngineEvent.SignalConnected, i3), this.engine.on(e.EngineEvent.Closing, () => {
                        this.engine.off(e.EngineEvent.SignalConnected, i3), s3(new _s("publishing rejected as engine closed", 499));
                      });
                    } else try {
                      const e2 = yield this.publish(t3, p2, h2);
                      n4(e2);
                    } catch (e2) {
                      s3(e2);
                    }
                  } catch (e2) {
                    s3(e2);
                  }
                }));
                i2.pendingPublishPromises.set(t3, m2);
                try {
                  return yield m2;
                } catch (e2) {
                  throw e2;
                } finally {
                  i2.pendingPublishPromises.delete(t3);
                }
              }();
            });
          }
          hasPermissionsToPublish(e2) {
            if (!this.permissions) return this.log.warn("no permissions present for publishing track", Object.assign(Object.assign({}, this.logContext), sr(e2))), false;
            const { canPublish: t2, canPublishSources: n2 } = this.permissions;
            return !(!t2 || 0 !== n2.length && !n2.map((e3) => function(e4) {
              switch (e4) {
                case Qe.CAMERA:
                  return Hs.Source.Camera;
                case Qe.MICROPHONE:
                  return Hs.Source.Microphone;
                case Qe.SCREEN_SHARE:
                  return Hs.Source.ScreenShare;
                case Qe.SCREEN_SHARE_AUDIO:
                  return Hs.Source.ScreenShareAudio;
                default:
                  return Hs.Source.Unknown;
              }
            }(e3)).includes(e2.source)) || (this.log.warn("insufficient permissions to publish", Object.assign(Object.assign({}, this.logContext), sr(e2))), false);
          }
          publish(t2, n2, i2) {
            return Xn(this, void 0, void 0, function* () {
              var s2, o2, r2, a2, c2, d2, l2, u2, h2, p2;
              if (!this.hasPermissionsToPublish(t2)) throw new _s("failed to publish track, insufficient permissions", 403);
              Array.from(this.trackPublications.values()).find((e2) => Fo(t2) && e2.source === t2.source) && t2.source !== Hs.Source.Unknown && this.log.info("publishing a second track with the same source: ".concat(t2.source), Object.assign(Object.assign({}, this.logContext), sr(t2))), n2.stopMicTrackOnMute && Bo(t2) && (t2.stopOnMute = true), t2.source === Hs.Source.ScreenShare && ho() && (n2.simulcast = false), "av1" !== n2.videoCodec || ro() || (n2.videoCodec = void 0), "vp9" !== n2.videoCodec || ao() || (n2.videoCodec = void 0), void 0 === n2.videoCodec && (n2.videoCodec = Lr), this.enabledPublishVideoCodecs.length > 0 && (this.enabledPublishVideoCodecs.some((e2) => n2.videoCodec === nr(e2.mime)) || (n2.videoCodec = nr(this.enabledPublishVideoCodecs[0].mime)));
              const m2 = n2.videoCodec;
              t2.on(e.TrackEvent.Muted, this.onTrackMuted), t2.on(e.TrackEvent.Unmuted, this.onTrackUnmuted), t2.on(e.TrackEvent.Ended, this.handleTrackEnded), t2.on(e.TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused), t2.on(e.TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed), t2.on(e.TrackEvent.AudioTrackFeatureUpdate, this.onTrackFeatureUpdate);
              const g2 = new Jt({ cid: t2.mediaStreamTrack.id, name: n2.name, type: Hs.kindToProto(t2.kind), muted: t2.isMuted, source: Hs.sourceToProto(t2.source), disableDtx: !(null === (s2 = n2.dtx) || void 0 === s2 || s2), encryption: this.encryptionType, stereo: i2, disableRed: this.isE2EEEnabled || !(null === (o2 = n2.red) || void 0 === o2 || o2), stream: null == n2 ? void 0 : n2.stream, backupCodecPolicy: null == n2 ? void 0 : n2.backupCodecPolicy });
              let v2;
              if (t2.kind === Hs.Kind.Video) {
                let e2 = { width: 0, height: 0 };
                try {
                  e2 = yield t2.waitForDimensions();
                } catch (n3) {
                  const i3 = null !== (a2 = null === (r2 = this.roomOptions.videoCaptureDefaults) || void 0 === r2 ? void 0 : r2.resolution) && void 0 !== a2 ? a2 : $s.h720.resolution;
                  e2 = { width: i3.width, height: i3.height }, this.log.error("could not determine track dimensions, using defaults", Object.assign(Object.assign(Object.assign({}, this.logContext), sr(t2)), { dims: e2 }));
                }
                g2.width = e2.width, g2.height = e2.height, qo(t2) && (co(m2) && (t2.source === Hs.Source.ScreenShare && (n2.scalabilityMode = "L1T3", "contentHint" in t2.mediaStreamTrack && (t2.mediaStreamTrack.contentHint = "motion", this.log.info("forcing contentHint to motion for screenshare with SVC codecs", Object.assign(Object.assign({}, this.logContext), sr(t2))))), n2.scalabilityMode = null !== (c2 = n2.scalabilityMode) && void 0 !== c2 ? c2 : "L3T3_KEY"), g2.simulcastCodecs = [new zt({ codec: m2, cid: t2.mediaStreamTrack.id })], true === n2.backupCodec && (n2.backupCodec = { codec: Lr }), n2.backupCodec && m2 !== n2.backupCodec.codec && g2.encryption === lt.NONE && (this.roomOptions.dynacast || (this.roomOptions.dynacast = true), g2.simulcastCodecs.push(new zt({ codec: n2.backupCodec.codec, cid: "" })))), v2 = sa(t2.source === Hs.Source.ScreenShare, g2.width, g2.height, n2), g2.layers = ha(g2.width, g2.height, v2, co(n2.videoCodec));
              } else t2.kind === Hs.Kind.Audio && (v2 = [{ maxBitrate: null === (d2 = n2.audioPreset) || void 0 === d2 ? void 0 : d2.maxBitrate, priority: null !== (u2 = null === (l2 = n2.audioPreset) || void 0 === l2 ? void 0 : l2.priority) && void 0 !== u2 ? u2 : "high", networkPriority: null !== (p2 = null === (h2 = n2.audioPreset) || void 0 === h2 ? void 0 : h2.priority) && void 0 !== p2 ? p2 : "high" }]);
              if (!this.engine || this.engine.isClosed) throw new Ms("cannot publish track when not connected");
              const f2 = () => Xn(this, void 0, void 0, function* () {
                var e2, i3, s3;
                if (!this.engine.pcManager) throw new Ms("pcManager is not ready");
                if (t2.sender = yield this.engine.createSender(t2, n2, v2), qo(t2) && (null !== (e2 = n2.degradationPreference) && void 0 !== e2 || (n2.degradationPreference = function(e3) {
                  return e3.source === Hs.Source.ScreenShare || e3.constraints.height && _o(e3.constraints.height) >= 1080 ? "maintain-resolution" : "balanced";
                }(t2)), t2.setDegradationPreference(n2.degradationPreference)), v2) if (ho() && t2.kind === Hs.Kind.Audio) {
                  let e3;
                  for (const n3 of this.engine.pcManager.publisher.getTransceivers()) if (n3.sender === t2.sender) {
                    e3 = n3;
                    break;
                  }
                  e3 && this.engine.pcManager.publisher.setTrackCodecBitrate({ transceiver: e3, codec: "opus", maxbr: (null === (i3 = v2[0]) || void 0 === i3 ? void 0 : i3.maxBitrate) ? v2[0].maxBitrate / 1e3 : 0 });
                } else t2.codec && co(t2.codec) && (null === (s3 = v2[0]) || void 0 === s3 ? void 0 : s3.maxBitrate) && this.engine.pcManager.publisher.setTrackCodecBitrate({ cid: g2.cid, codec: t2.codec, maxbr: v2[0].maxBitrate / 1e3 });
                yield this.engine.negotiate();
              });
              let k2;
              if (this.enabledPublishVideoCodecs.length > 0) {
                k2 = (yield Promise.all([this.engine.addTrack(g2), f2()]))[0];
              } else {
                let e2;
                if (k2 = yield this.engine.addTrack(g2), k2.codecs.forEach((t3) => {
                  void 0 === e2 && (e2 = t3.mimeType);
                }), e2 && t2.kind === Hs.Kind.Video) {
                  const i3 = nr(e2);
                  i3 !== m2 && (this.log.debug("falling back to server selected codec", Object.assign(Object.assign(Object.assign({}, this.logContext), sr(t2)), { codec: i3 })), n2.videoCodec = i3, v2 = sa(t2.source === Hs.Source.ScreenShare, g2.width, g2.height, n2));
                }
                yield f2();
              }
              const b2 = new Na(t2.kind, k2, t2, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
              return b2.options = n2, t2.sid = k2.sid, this.log.debug("publishing ".concat(t2.kind, " with encodings"), Object.assign(Object.assign({}, this.logContext), { encodings: v2, trackInfo: k2 })), qo(t2) ? t2.startMonitor(this.engine.client) : Ko(t2) && t2.startMonitor(), this.addTrackPublication(b2), this.emit(e.ParticipantEvent.LocalTrackPublished, b2), b2;
            });
          }
          get isLocal() {
            return true;
          }
          publishAdditionalCodecForTrack(e2, t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              var i2;
              if (this.encryptionType !== lt.NONE) return;
              let s2;
              if (this.trackPublications.forEach((t3) => {
                t3.track && t3.track === e2 && (s2 = t3);
              }), !s2) throw new Ds("track is not published");
              if (!qo(e2)) throw new Ds("track is not a video track");
              const o2 = Object.assign(Object.assign({}, null === (i2 = this.roomOptions) || void 0 === i2 ? void 0 : i2.publishDefaults), n2), r2 = function(e3, t3, n3) {
                var i3, s3, o3, r3;
                if (!n3.backupCodec || true === n3.backupCodec || n3.backupCodec.codec === n3.videoCodec) return;
                t3 !== n3.backupCodec.codec && Wn.warn("requested a different codec than specified as backup", { serverRequested: t3, backup: n3.backupCodec.codec }), n3.videoCodec = t3, n3.videoEncoding = n3.backupCodec.encoding;
                const a3 = e3.mediaStreamTrack.getSettings(), c3 = null !== (i3 = a3.width) && void 0 !== i3 ? i3 : null === (s3 = e3.dimensions) || void 0 === s3 ? void 0 : s3.width, d3 = null !== (o3 = a3.height) && void 0 !== o3 ? o3 : null === (r3 = e3.dimensions) || void 0 === r3 ? void 0 : r3.height;
                return e3.source === Hs.Source.ScreenShare && n3.simulcast && (n3.simulcast = false), sa(e3.source === Hs.Source.ScreenShare, c3, d3, n3);
              }(e2, t2, o2);
              if (!r2) return void this.log.info("backup codec has been disabled, ignoring request to add additional codec for track", Object.assign(Object.assign({}, this.logContext), sr(e2)));
              const a2 = e2.addSimulcastTrack(t2, r2);
              if (!a2) return;
              const c2 = new Jt({ cid: a2.mediaStreamTrack.id, type: Hs.kindToProto(e2.kind), muted: e2.isMuted, source: Hs.sourceToProto(e2.source), sid: e2.sid, simulcastCodecs: [{ codec: o2.videoCodec, cid: a2.mediaStreamTrack.id }] });
              if (c2.layers = ha(c2.width, c2.height, r2), !this.engine || this.engine.isClosed) throw new Ms("cannot publish track when not connected");
              const d2 = (yield Promise.all([this.engine.addTrack(c2), (() => Xn(this, void 0, void 0, function* () {
                yield this.engine.createSimulcastSender(e2, a2, o2, r2), yield this.engine.negotiate();
              }))()]))[0];
              this.log.debug("published ".concat(t2, " for track ").concat(e2.sid), Object.assign(Object.assign({}, this.logContext), { encodings: r2, trackInfo: d2 }));
            });
          }
          unpublishTrack(t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              var i2, s2;
              if (Fo(t2)) {
                const e2 = this.pendingPublishPromises.get(t2);
                e2 && (this.log.info("awaiting publish promise before attempting to unpublish", Object.assign(Object.assign({}, this.logContext), sr(t2))), yield e2);
              }
              const o2 = this.getPublicationForTrack(t2), r2 = o2 ? sr(o2) : void 0;
              if (this.log.debug("unpublishing track", Object.assign(Object.assign({}, this.logContext), r2)), !o2 || !o2.track) return void this.log.warn("track was not unpublished because no publication was found", Object.assign(Object.assign({}, this.logContext), r2));
              (t2 = o2.track).off(e.TrackEvent.Muted, this.onTrackMuted), t2.off(e.TrackEvent.Unmuted, this.onTrackUnmuted), t2.off(e.TrackEvent.Ended, this.handleTrackEnded), t2.off(e.TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused), t2.off(e.TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed), t2.off(e.TrackEvent.AudioTrackFeatureUpdate, this.onTrackFeatureUpdate), void 0 === n2 && (n2 = null === (s2 = null === (i2 = this.roomOptions) || void 0 === i2 ? void 0 : i2.stopLocalTrackOnUnpublish) || void 0 === s2 || s2), n2 ? t2.stop() : t2.stopMonitor();
              let a2 = false;
              const c2 = t2.sender;
              if (t2.sender = void 0, this.engine.pcManager && this.engine.pcManager.currentState < qr.FAILED && c2) try {
                for (const e2 of this.engine.pcManager.publisher.getTransceivers()) e2.sender === c2 && (e2.direction = "inactive", a2 = true);
                if (this.engine.removeTrack(c2) && (a2 = true), qo(t2)) {
                  for (const [, e2] of t2.simulcastCodecs) e2.sender && (this.engine.removeTrack(e2.sender) && (a2 = true), e2.sender = void 0);
                  t2.simulcastCodecs.clear();
                }
              } catch (e2) {
                this.log.warn("failed to unpublish track", Object.assign(Object.assign(Object.assign({}, this.logContext), r2), { error: e2 }));
              }
              switch (this.trackPublications.delete(o2.trackSid), o2.kind) {
                case Hs.Kind.Audio:
                  this.audioTrackPublications.delete(o2.trackSid);
                  break;
                case Hs.Kind.Video:
                  this.videoTrackPublications.delete(o2.trackSid);
              }
              return this.emit(e.ParticipantEvent.LocalTrackUnpublished, o2), o2.setTrack(void 0), a2 && (yield this.engine.negotiate()), o2;
            });
          }
          unpublishTracks(e2) {
            return Xn(this, void 0, void 0, function* () {
              return (yield Promise.all(e2.map((e3) => this.unpublishTrack(e3)))).filter((e3) => !!e3);
            });
          }
          republishAllTracks(e2) {
            return Xn(this, arguments, void 0, function(e3) {
              var t2 = this;
              let n2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              return function* () {
                t2.republishPromise && (yield t2.republishPromise), t2.republishPromise = new Promise((i2, s2) => Xn(t2, void 0, void 0, function* () {
                  try {
                    const t3 = [];
                    this.trackPublications.forEach((n3) => {
                      n3.track && (e3 && (n3.options = Object.assign(Object.assign({}, n3.options), e3)), t3.push(n3));
                    }), yield Promise.all(t3.map((e4) => Xn(this, void 0, void 0, function* () {
                      const t4 = e4.track;
                      yield this.unpublishTrack(t4, false), !n2 || t4.isMuted || t4.source === Hs.Source.ScreenShare || t4.source === Hs.Source.ScreenShareAudio || !Ko(t4) && !qo(t4) || t4.isUserProvided || (this.log.debug("restarting existing track", Object.assign(Object.assign({}, this.logContext), { track: e4.trackSid })), yield t4.restartTrack()), yield this.publishOrRepublishTrack(t4, e4.options, true);
                    }))), i2();
                  } catch (e4) {
                    s2(e4);
                  } finally {
                    this.republishPromise = void 0;
                  }
                })), yield t2.republishPromise;
              }();
            });
          }
          publishData(e2) {
            return Xn(this, arguments, void 0, function(e3) {
              var t2 = this;
              let n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
              return function* () {
                const i2 = n2.reliable ? gt.RELIABLE : gt.LOSSY, s2 = n2.destinationIdentities, o2 = n2.topic, r2 = new mt({ kind: i2, value: { case: "user", value: new kt({ participantIdentity: t2.identity, payload: e3, destinationIdentities: s2, topic: o2 }) } });
                yield t2.engine.sendDataPacket(r2, i2);
              }();
            });
          }
          publishDtmf(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              const n2 = new mt({ kind: gt.RELIABLE, value: { case: "sipDtmf", value: new bt({ code: e2, digit: t2 }) } });
              yield this.engine.sendDataPacket(n2, gt.RELIABLE);
            });
          }
          sendChatMessage(t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              const i2 = { id: crypto.randomUUID(), message: t2, timestamp: Date.now(), attachedFiles: null == n2 ? void 0 : n2.attachments }, s2 = new mt({ value: { case: "chatMessage", value: new Ct(Object.assign(Object.assign({}, i2), { timestamp: x.parse(i2.timestamp) })) } });
              return yield this.engine.sendDataPacket(s2, gt.RELIABLE), this.emit(e.ParticipantEvent.ChatMessage, i2), i2;
            });
          }
          editChatMessage(t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              const i2 = Object.assign(Object.assign({}, n2), { message: t2, editTimestamp: Date.now() }), s2 = new mt({ value: { case: "chatMessage", value: new Ct(Object.assign(Object.assign({}, i2), { timestamp: x.parse(i2.timestamp), editTimestamp: x.parse(i2.editTimestamp) })) } });
              return yield this.engine.sendDataPacket(s2, gt.RELIABLE), this.emit(e.ParticipantEvent.ChatMessage, i2), i2;
            });
          }
          sendText(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2;
              const i2 = crypto.randomUUID(), s2 = new TextEncoder().encode(e2).byteLength, o2 = null === (n2 = null == t2 ? void 0 : t2.attachments) || void 0 === n2 ? void 0 : n2.map(() => crypto.randomUUID()), r2 = new Array(o2 ? o2.length + 1 : 1).fill(0), a2 = (e3, n3) => {
                var i3;
                r2[n3] = e3;
                const s3 = r2.reduce((e4, t3) => e4 + t3, 0);
                null === (i3 = null == t2 ? void 0 : t2.onProgress) || void 0 === i3 || i3.call(t2, s3);
              }, c2 = yield this.streamText({ streamId: i2, totalSize: s2, destinationIdentities: null == t2 ? void 0 : t2.destinationIdentities, topic: null == t2 ? void 0 : t2.topic, attachedStreamIds: o2, attributes: null == t2 ? void 0 : t2.attributes });
              return yield c2.write(e2), a2(1, 0), yield c2.close(), (null == t2 ? void 0 : t2.attachments) && o2 && (yield Promise.all(t2.attachments.map((e3, n3) => Xn(this, void 0, void 0, function* () {
                return this._sendFile(o2[n3], e3, { topic: t2.topic, mimeType: e3.type, onProgress: (e4) => {
                  a2(e4, n3 + 1);
                } });
              })))), c2.info;
            });
          }
          streamText(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2, i2;
              const s2 = null !== (n2 = null == t2 ? void 0 : t2.streamId) && void 0 !== n2 ? n2 : crypto.randomUUID(), o2 = { id: s2, mimeType: "text/plain", timestamp: Date.now(), topic: null !== (i2 = null == t2 ? void 0 : t2.topic) && void 0 !== i2 ? i2 : "", size: null == t2 ? void 0 : t2.totalSize, attributes: null == t2 ? void 0 : t2.attributes }, r2 = new Ft({ streamId: s2, mimeType: o2.mimeType, topic: o2.topic, timestamp: jo(o2.timestamp), totalLength: jo(null == t2 ? void 0 : t2.totalSize), attributes: o2.attributes, contentHeader: { case: "textHeader", value: new Ut({ version: null == t2 ? void 0 : t2.version, attachedStreamIds: null == t2 ? void 0 : t2.attachedStreamIds, replyToStreamId: null == t2 ? void 0 : t2.replyToStreamId, operationType: "update" === (null == t2 ? void 0 : t2.type) ? Lt.UPDATE : Lt.CREATE }) } }), a2 = null == t2 ? void 0 : t2.destinationIdentities, c2 = new mt({ destinationIdentities: a2, value: { case: "streamHeader", value: r2 } });
              yield this.engine.sendDataPacket(c2, gt.RELIABLE);
              let d2 = 0;
              const l2 = this, u2 = new WritableStream({ write(e2) {
                return Xn(this, void 0, void 0, function* () {
                  for (const t3 of function(e3, t4) {
                    const n3 = [];
                    let i3 = new TextEncoder().encode(e3);
                    for (; i3.length > t4; ) {
                      let e4 = t4;
                      for (; e4 > 0; ) {
                        const t5 = i3[e4];
                        if (void 0 !== t5 && 128 != (192 & t5)) break;
                        e4--;
                      }
                      n3.push(i3.slice(0, e4)), i3 = i3.slice(e4);
                    }
                    return i3.length > 0 && n3.push(i3), n3;
                  }(e2, 15e3)) {
                    yield l2.engine.waitForBufferStatusLow(gt.RELIABLE);
                    const e3 = new Bt({ content: t3, streamId: s2, chunkIndex: jo(d2) }), n3 = new mt({ destinationIdentities: a2, value: { case: "streamChunk", value: e3 } });
                    yield l2.engine.sendDataPacket(n3, gt.RELIABLE), d2 += 1;
                  }
                });
              }, close() {
                return Xn(this, void 0, void 0, function* () {
                  const e2 = new Vt({ streamId: s2 }), t3 = new mt({ destinationIdentities: a2, value: { case: "streamTrailer", value: e2 } });
                  yield l2.engine.sendDataPacket(t3, gt.RELIABLE);
                });
              }, abort(e2) {
                console.log("Sink error:", e2);
              } });
              let h2 = () => Xn(this, void 0, void 0, function* () {
                yield p2.close();
              });
              l2.engine.once(e.EngineEvent.Closing, h2);
              const p2 = new Ea(u2, o2, () => this.engine.off(e.EngineEvent.Closing, h2));
              return p2;
            });
          }
          sendFile(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              const n2 = crypto.randomUUID();
              return yield this._sendFile(n2, e2, t2), { id: n2 };
            });
          }
          _sendFile(e2, t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              var i2;
              const s2 = yield this.streamBytes({ streamId: e2, totalSize: t2.size, name: t2.name, mimeType: null !== (i2 = null == n2 ? void 0 : n2.mimeType) && void 0 !== i2 ? i2 : t2.type, topic: null == n2 ? void 0 : n2.topic, destinationIdentities: null == n2 ? void 0 : n2.destinationIdentities }), o2 = t2.stream().getReader();
              for (; ; ) {
                const { done: e3, value: t3 } = yield o2.read();
                if (e3) break;
                yield s2.write(t3);
              }
              return yield s2.close(), s2.info;
            });
          }
          streamBytes(e2) {
            return Xn(this, void 0, void 0, function* () {
              var t2, n2, i2, o2, r2;
              const a2 = null !== (t2 = null == e2 ? void 0 : e2.streamId) && void 0 !== t2 ? t2 : crypto.randomUUID(), c2 = null == e2 ? void 0 : e2.destinationIdentities, d2 = { id: a2, mimeType: null !== (n2 = null == e2 ? void 0 : e2.mimeType) && void 0 !== n2 ? n2 : "application/octet-stream", topic: null !== (i2 = null == e2 ? void 0 : e2.topic) && void 0 !== i2 ? i2 : "", timestamp: Date.now(), attributes: null == e2 ? void 0 : e2.attributes, size: null == e2 ? void 0 : e2.totalSize, name: null !== (o2 = null == e2 ? void 0 : e2.name) && void 0 !== o2 ? o2 : "unknown" }, l2 = new Ft({ totalLength: jo(null !== (r2 = d2.size) && void 0 !== r2 ? r2 : 0), mimeType: d2.mimeType, streamId: a2, topic: d2.topic, timestamp: jo(Date.now()), attributes: d2.attributes, contentHeader: { case: "byteHeader", value: new jt({ name: d2.name }) } }), u2 = new mt({ destinationIdentities: c2, value: { case: "streamHeader", value: l2 } });
              yield this.engine.sendDataPacket(u2, gt.RELIABLE);
              let h2 = 0;
              const p2 = new s(), m2 = this.engine, g2 = this.log, v2 = new WritableStream({ write(e3) {
                return Xn(this, void 0, void 0, function* () {
                  const t3 = yield p2.lock();
                  let n3 = 0;
                  try {
                    for (; n3 < e3.byteLength; ) {
                      const t4 = e3.slice(n3, n3 + 15e3);
                      yield m2.waitForBufferStatusLow(gt.RELIABLE);
                      const i3 = new mt({ destinationIdentities: c2, value: { case: "streamChunk", value: new Bt({ content: t4, streamId: a2, chunkIndex: jo(h2) }) } });
                      yield m2.sendDataPacket(i3, gt.RELIABLE), h2 += 1, n3 += t4.byteLength;
                    }
                  } finally {
                    t3();
                  }
                });
              }, close() {
                return Xn(this, void 0, void 0, function* () {
                  const e3 = new Vt({ streamId: a2 }), t3 = new mt({ destinationIdentities: c2, value: { case: "streamTrailer", value: e3 } });
                  yield m2.sendDataPacket(t3, gt.RELIABLE);
                });
              }, abort(e3) {
                g2.error("Sink error:", e3);
              } });
              return new wa(v2, d2);
            });
          }
          performRpc(e2) {
            return Xn(this, arguments, void 0, function(e3) {
              var t2 = this;
              let { destinationIdentity: n2, method: i2, payload: s2, responseTimeout: o2 = 1e4 } = e3;
              return function* () {
                return new Promise((e4, r2) => Xn(t2, void 0, void 0, function* () {
                  var t3, a2, c2, d2;
                  if (Hr(s2) > 15360) return void r2(Wr.builtIn("REQUEST_PAYLOAD_TOO_LARGE"));
                  if ((null === (a2 = null === (t3 = this.engine.latestJoinResponse) || void 0 === t3 ? void 0 : t3.serverInfo) || void 0 === a2 ? void 0 : a2.version) && Co(null === (d2 = null === (c2 = this.engine.latestJoinResponse) || void 0 === c2 ? void 0 : c2.serverInfo) || void 0 === d2 ? void 0 : d2.version, "1.8.0") < 0) return void r2(Wr.builtIn("UNSUPPORTED_SERVER"));
                  const l2 = crypto.randomUUID();
                  yield this.publishRpcRequest(n2, l2, i2, s2, o2 - 2e3);
                  const u2 = setTimeout(() => {
                    this.pendingAcks.delete(l2), r2(Wr.builtIn("CONNECTION_TIMEOUT")), this.pendingResponses.delete(l2), clearTimeout(h2);
                  }, 2e3);
                  this.pendingAcks.set(l2, { resolve: () => {
                    clearTimeout(u2);
                  }, participantIdentity: n2 });
                  const h2 = setTimeout(() => {
                    this.pendingResponses.delete(l2), r2(Wr.builtIn("RESPONSE_TIMEOUT"));
                  }, o2);
                  this.pendingResponses.set(l2, { resolve: (t4, n3) => {
                    clearTimeout(h2), this.pendingAcks.has(l2) && (console.warn("RPC response received before ack", l2), this.pendingAcks.delete(l2), clearTimeout(u2)), n3 ? r2(n3) : e4(null != t4 ? t4 : "");
                  }, participantIdentity: n2 });
                }));
              }();
            });
          }
          registerRpcMethod(e2, t2) {
            this.rpcHandlers.has(e2) && this.log.warn("you're overriding the RPC handler for method ".concat(e2, ", in the future this will throw an error")), this.rpcHandlers.set(e2, t2);
          }
          unregisterRpcMethod(e2) {
            this.rpcHandlers.delete(e2);
          }
          setTrackSubscriptionPermissions(e2) {
            let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
            this.participantTrackPermissions = t2, this.allParticipantsAllowedToSubscribe = e2, this.engine.client.isDisconnected || this.updateTrackSubscriptionPermissions();
          }
          handleIncomingRpcAck(e2) {
            const t2 = this.pendingAcks.get(e2);
            t2 ? (t2.resolve(), this.pendingAcks.delete(e2)) : console.error("Ack received for unexpected RPC request", e2);
          }
          handleIncomingRpcResponse(e2, t2, n2) {
            const i2 = this.pendingResponses.get(e2);
            i2 ? (i2.resolve(t2, n2), this.pendingResponses.delete(e2)) : console.error("Response received for unexpected RPC request", e2);
          }
          publishRpcRequest(e2, t2, n2, i2, s2) {
            return Xn(this, void 0, void 0, function* () {
              const o2 = new mt({ destinationIdentities: [e2], kind: gt.RELIABLE, value: { case: "rpcRequest", value: new St({ id: t2, method: n2, payload: i2, responseTimeoutMs: s2, version: 1 }) } });
              yield this.engine.sendDataPacket(o2, gt.RELIABLE);
            });
          }
          handleParticipantDisconnected(e2) {
            for (const [t2, { participantIdentity: n2 }] of this.pendingAcks) n2 === e2 && this.pendingAcks.delete(t2);
            for (const [t2, { participantIdentity: n2, resolve: i2 }] of this.pendingResponses) n2 === e2 && (i2(null, Wr.builtIn("RECIPIENT_DISCONNECTED")), this.pendingResponses.delete(t2));
          }
          setEnabledPublishCodecs(e2) {
            this.enabledPublishVideoCodecs = e2.filter((e3) => "video" === e3.mime.split("/")[0].toLowerCase());
          }
          updateInfo(e2) {
            return !!super.updateInfo(e2) && (e2.tracks.forEach((e3) => {
              var t2, n2;
              const i2 = this.trackPublications.get(e3.sid);
              if (i2) {
                const s2 = i2.isMuted || null !== (n2 = null === (t2 = i2.track) || void 0 === t2 ? void 0 : t2.isUpstreamPaused) && void 0 !== n2 && n2;
                s2 !== e3.muted && (this.log.debug("updating server mute state after reconcile", Object.assign(Object.assign(Object.assign({}, this.logContext), sr(i2)), { mutedOnServer: s2 })), this.engine.client.sendMuteTrack(e3.sid, s2));
              }
            }), true);
          }
          getPublicationForTrack(e2) {
            let t2;
            return this.trackPublications.forEach((n2) => {
              const i2 = n2.track;
              i2 && (e2 instanceof MediaStreamTrack ? (Ko(i2) || qo(i2)) && i2.mediaStreamTrack === e2 && (t2 = n2) : e2 === i2 && (t2 = n2));
            }), t2;
          }
          waitForPendingPublicationOfSource(e2) {
            return Xn(this, void 0, void 0, function* () {
              const t2 = Date.now();
              for (; Date.now() < t2 + 1e4; ) {
                const t3 = Array.from(this.pendingPublishPromises.entries()).find((t4) => {
                  let [n2] = t4;
                  return n2.source === e2;
                });
                if (t3) return t3[1];
                yield io(20);
              }
            });
          }
        }
        class Fa extends Ma {
          constructor(t2, n2, i2, s2) {
            super(t2, n2.sid, n2.name, s2), this.track = void 0, this.allowed = true, this.disabled = false, this.currentVideoQuality = e.VideoQuality.HIGH, this.handleEnded = (t3) => {
              this.setTrack(void 0), this.emit(e.TrackEvent.Ended, t3);
            }, this.handleVisibilityChange = (e2) => {
              this.log.debug("adaptivestream video visibility ".concat(this.trackSid, ", visible=").concat(e2), this.logContext), this.disabled = !e2, this.emitTrackUpdate();
            }, this.handleVideoDimensionsChange = (e2) => {
              this.log.debug("adaptivestream video dimensions ".concat(e2.width, "x").concat(e2.height), this.logContext), this.videoDimensions = e2, this.emitTrackUpdate();
            }, this.subscribed = i2, this.updateInfo(n2);
          }
          setSubscribed(t2) {
            const n2 = this.subscriptionStatus, i2 = this.permissionStatus;
            this.subscribed = t2, t2 && (this.allowed = true);
            const s2 = new sn({ trackSids: [this.trackSid], subscribe: this.subscribed, participantTracks: [new Rt({ participantSid: "", trackSids: [this.trackSid] })] });
            this.emit(e.TrackEvent.UpdateSubscription, s2), this.emitSubscriptionUpdateIfChanged(n2), this.emitPermissionUpdateIfChanged(i2);
          }
          get subscriptionStatus() {
            return false === this.subscribed ? Ma.SubscriptionStatus.Unsubscribed : super.isSubscribed ? Ma.SubscriptionStatus.Subscribed : Ma.SubscriptionStatus.Desired;
          }
          get permissionStatus() {
            return this.allowed ? Ma.PermissionStatus.Allowed : Ma.PermissionStatus.NotAllowed;
          }
          get isSubscribed() {
            return false !== this.subscribed && super.isSubscribed;
          }
          get isDesired() {
            return false !== this.subscribed;
          }
          get isEnabled() {
            return !this.disabled;
          }
          get isLocal() {
            return false;
          }
          setEnabled(e2) {
            this.isManualOperationAllowed() && this.disabled !== !e2 && (this.disabled = !e2, this.emitTrackUpdate());
          }
          setVideoQuality(e2) {
            this.isManualOperationAllowed() && this.currentVideoQuality !== e2 && (this.currentVideoQuality = e2, this.videoDimensions = void 0, this.emitTrackUpdate());
          }
          setVideoDimensions(e2) {
            var t2, n2;
            this.isManualOperationAllowed() && ((null === (t2 = this.videoDimensions) || void 0 === t2 ? void 0 : t2.width) === e2.width && (null === (n2 = this.videoDimensions) || void 0 === n2 ? void 0 : n2.height) === e2.height || (Go(this.track) && (this.videoDimensions = e2), this.currentVideoQuality = void 0, this.emitTrackUpdate()));
          }
          setVideoFPS(e2) {
            this.isManualOperationAllowed() && Go(this.track) && this.fps !== e2 && (this.fps = e2, this.emitTrackUpdate());
          }
          get videoQuality() {
            return this.currentVideoQuality;
          }
          setTrack(t2) {
            const n2 = this.subscriptionStatus, i2 = this.permissionStatus, s2 = this.track;
            s2 !== t2 && (s2 && (s2.off(e.TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange), s2.off(e.TrackEvent.VisibilityChanged, this.handleVisibilityChange), s2.off(e.TrackEvent.Ended, this.handleEnded), s2.detach(), s2.stopMonitor(), this.emit(e.TrackEvent.Unsubscribed, s2)), super.setTrack(t2), t2 && (t2.sid = this.trackSid, t2.on(e.TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange), t2.on(e.TrackEvent.VisibilityChanged, this.handleVisibilityChange), t2.on(e.TrackEvent.Ended, this.handleEnded), this.emit(e.TrackEvent.Subscribed, t2)), this.emitPermissionUpdateIfChanged(i2), this.emitSubscriptionUpdateIfChanged(n2));
          }
          setAllowed(e2) {
            const t2 = this.subscriptionStatus, n2 = this.permissionStatus;
            this.allowed = e2, this.emitPermissionUpdateIfChanged(n2), this.emitSubscriptionUpdateIfChanged(t2);
          }
          setSubscriptionError(t2) {
            this.emit(e.TrackEvent.SubscriptionFailed, t2);
          }
          updateInfo(t2) {
            super.updateInfo(t2);
            const n2 = this.metadataMuted;
            this.metadataMuted = t2.muted, this.track ? this.track.setMuted(t2.muted) : n2 !== t2.muted && this.emit(t2.muted ? e.TrackEvent.Muted : e.TrackEvent.Unmuted);
          }
          emitSubscriptionUpdateIfChanged(t2) {
            const n2 = this.subscriptionStatus;
            t2 !== n2 && this.emit(e.TrackEvent.SubscriptionStatusChanged, n2, t2);
          }
          emitPermissionUpdateIfChanged(t2) {
            this.permissionStatus !== t2 && this.emit(e.TrackEvent.SubscriptionPermissionChanged, this.permissionStatus, t2);
          }
          isManualOperationAllowed() {
            return this.kind === Hs.Kind.Video && this.isAdaptiveStream ? (this.log.warn("adaptive stream is enabled, cannot change video track settings", this.logContext), false) : !!this.isDesired || (this.log.warn("cannot update track settings when not subscribed", this.logContext), false);
          }
          get isAdaptiveStream() {
            return Go(this.track) && this.track.isAdaptiveStream;
          }
          emitTrackUpdate() {
            const t2 = new on({ trackSids: [this.trackSid], disabled: this.disabled, fps: this.fps });
            this.videoDimensions ? (t2.width = Math.ceil(this.videoDimensions.width), t2.height = Math.ceil(this.videoDimensions.height)) : void 0 !== this.currentVideoQuality ? t2.quality = this.currentVideoQuality : t2.quality = e.VideoQuality.HIGH, this.emit(e.TrackEvent.UpdateSettings, t2);
          }
        }
        class Ba extends Ua {
          static fromParticipantInfo(e2, t2, n2) {
            return new Ba(e2, t2.sid, t2.identity, t2.name, t2.metadata, t2.attributes, n2, t2.kind);
          }
          get logContext() {
            return Object.assign(Object.assign({}, super.logContext), { rpID: this.sid, remoteParticipant: this.identity });
          }
          constructor(e2, t2, n2, i2, s2, o2, r2) {
            super(t2, n2 || "", i2, s2, o2, r2, arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : ct.STANDARD), this.signalClient = e2, this.trackPublications = /* @__PURE__ */ new Map(), this.audioTrackPublications = /* @__PURE__ */ new Map(), this.videoTrackPublications = /* @__PURE__ */ new Map(), this.volumeMap = /* @__PURE__ */ new Map();
          }
          addTrackPublication(t2) {
            super.addTrackPublication(t2), t2.on(e.TrackEvent.UpdateSettings, (e2) => {
              this.log.debug("send update settings", Object.assign(Object.assign({}, this.logContext), sr(t2))), this.signalClient.sendUpdateTrackSettings(e2);
            }), t2.on(e.TrackEvent.UpdateSubscription, (e2) => {
              e2.participantTracks.forEach((e3) => {
                e3.participantSid = this.sid;
              }), this.signalClient.sendUpdateSubscription(e2);
            }), t2.on(e.TrackEvent.SubscriptionPermissionChanged, (n2) => {
              this.emit(e.ParticipantEvent.TrackSubscriptionPermissionChanged, t2, n2);
            }), t2.on(e.TrackEvent.SubscriptionStatusChanged, (n2) => {
              this.emit(e.ParticipantEvent.TrackSubscriptionStatusChanged, t2, n2);
            }), t2.on(e.TrackEvent.Subscribed, (n2) => {
              this.emit(e.ParticipantEvent.TrackSubscribed, n2, t2);
            }), t2.on(e.TrackEvent.Unsubscribed, (n2) => {
              this.emit(e.ParticipantEvent.TrackUnsubscribed, n2, t2);
            }), t2.on(e.TrackEvent.SubscriptionFailed, (n2) => {
              this.emit(e.ParticipantEvent.TrackSubscriptionFailed, t2.trackSid, n2);
            });
          }
          getTrackPublication(e2) {
            const t2 = super.getTrackPublication(e2);
            if (t2) return t2;
          }
          getTrackPublicationByName(e2) {
            const t2 = super.getTrackPublicationByName(e2);
            if (t2) return t2;
          }
          setVolume(e2) {
            let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Hs.Source.Microphone;
            this.volumeMap.set(t2, e2);
            const n2 = this.getTrackPublication(t2);
            n2 && n2.track && n2.track.setVolume(e2);
          }
          getVolume() {
            let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hs.Source.Microphone;
            const t2 = this.getTrackPublication(e2);
            return t2 && t2.track ? t2.track.getVolume() : this.volumeMap.get(e2);
          }
          addSubscribedMediaTrack(t2, n2, i2, s2, o2, r2) {
            let a2 = this.getTrackPublicationBySid(n2);
            if (a2 || n2.startsWith("TR") || this.trackPublications.forEach((e2) => {
              a2 || t2.kind !== e2.kind.toString() || (a2 = e2);
            }), !a2) return 0 === r2 ? (this.log.error("could not find published track", Object.assign(Object.assign({}, this.logContext), { trackSid: n2 })), void this.emit(e.ParticipantEvent.TrackSubscriptionFailed, n2)) : (void 0 === r2 && (r2 = 20), void setTimeout(() => {
              this.addSubscribedMediaTrack(t2, n2, i2, s2, o2, r2 - 1);
            }, 150));
            if ("ended" === t2.readyState) return this.log.error("unable to subscribe because MediaStreamTrack is ended. Do not call MediaStreamTrack.stop()", Object.assign(Object.assign({}, this.logContext), sr(a2))), void this.emit(e.ParticipantEvent.TrackSubscriptionFailed, n2);
            let c2;
            return c2 = "video" === t2.kind ? new Ia(t2, n2, s2, o2) : new Ra(t2, n2, s2, this.audioContext, this.audioOutput), c2.source = a2.source, c2.isMuted = a2.isMuted, c2.setMediaStream(i2), c2.start(), a2.setTrack(c2), this.volumeMap.has(a2.source) && Wo(c2) && Bo(c2) && c2.setVolume(this.volumeMap.get(a2.source)), a2;
          }
          get hasMetadata() {
            return !!this.participantInfo;
          }
          getTrackPublicationBySid(e2) {
            return this.trackPublications.get(e2);
          }
          updateInfo(t2) {
            if (!super.updateInfo(t2)) return false;
            const n2 = /* @__PURE__ */ new Map(), i2 = /* @__PURE__ */ new Map();
            return t2.tracks.forEach((e2) => {
              var t3, s2;
              let o2 = this.getTrackPublicationBySid(e2.sid);
              if (o2) o2.updateInfo(e2);
              else {
                const n3 = Hs.kindFromProto(e2.type);
                if (!n3) return;
                o2 = new Fa(n3, e2, null === (t3 = this.signalClient.connectOptions) || void 0 === t3 ? void 0 : t3.autoSubscribe, { loggerContextCb: () => this.logContext, loggerName: null === (s2 = this.loggerOptions) || void 0 === s2 ? void 0 : s2.loggerName }), o2.updateInfo(e2), i2.set(e2.sid, o2);
                const r2 = Array.from(this.trackPublications.values()).find((e3) => e3.source === (null == o2 ? void 0 : o2.source));
                r2 && o2.source !== Hs.Source.Unknown && this.log.debug("received a second track publication for ".concat(this.identity, " with the same source: ").concat(o2.source), Object.assign(Object.assign({}, this.logContext), { oldTrack: sr(r2), newTrack: sr(o2) })), this.addTrackPublication(o2);
              }
              n2.set(e2.sid, o2);
            }), this.trackPublications.forEach((e2) => {
              n2.has(e2.trackSid) || (this.log.trace("detected removed track on remote participant, unpublishing", Object.assign(Object.assign({}, this.logContext), sr(e2))), this.unpublishTrack(e2.trackSid, true));
            }), i2.forEach((t3) => {
              this.emit(e.ParticipantEvent.TrackPublished, t3);
            }), true;
          }
          unpublishTrack(t2, n2) {
            const i2 = this.trackPublications.get(t2);
            if (!i2) return;
            const { track: s2 } = i2;
            switch (s2 && (s2.stop(), i2.setTrack(void 0)), this.trackPublications.delete(t2), i2.kind) {
              case Hs.Kind.Audio:
                this.audioTrackPublications.delete(t2);
                break;
              case Hs.Kind.Video:
                this.videoTrackPublications.delete(t2);
            }
            n2 && this.emit(e.ParticipantEvent.TrackUnpublished, i2);
          }
          setAudioOutput(e2) {
            return Xn(this, void 0, void 0, function* () {
              this.audioOutput = e2;
              const t2 = [];
              this.audioTrackPublications.forEach((n2) => {
                var i2;
                Bo(n2.track) && Wo(n2.track) && t2.push(n2.track.setSinkId(null !== (i2 = e2.deviceId) && void 0 !== i2 ? i2 : "default"));
              }), yield Promise.all(t2);
            });
          }
          emit(e2) {
            for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), i2 = 1; i2 < t2; i2++) n2[i2 - 1] = arguments[i2];
            return this.log.trace("participant event", Object.assign(Object.assign({}, this.logContext), { event: e2, args: n2 })), super.emit(e2, ...n2);
          }
        }
        var Va;
        e.ConnectionState = void 0, (Va = e.ConnectionState || (e.ConnectionState = {})).Disconnected = "disconnected", Va.Connecting = "connecting", Va.Connected = "connected", Va.Reconnecting = "reconnecting", Va.SignalReconnecting = "signalReconnecting";
        class qa extends ni.EventEmitter {
          constructor(t2) {
            var n2, i2, o2, r2;
            if (super(), n2 = this, this.state = e.ConnectionState.Disconnected, this.activeSpeakers = [], this.isE2EEEnabled = false, this.audioEnabled = true, this.isVideoPlaybackBlocked = false, this.log = Wn, this.bufferedEvents = [], this.isResuming = false, this.byteStreamControllers = /* @__PURE__ */ new Map(), this.textStreamControllers = /* @__PURE__ */ new Map(), this.byteStreamHandlers = /* @__PURE__ */ new Map(), this.textStreamHandlers = /* @__PURE__ */ new Map(), this.rpcHandlers = /* @__PURE__ */ new Map(), this.connect = (t3, n3, i3) => Xn(this, void 0, void 0, function* () {
              var s2;
              if (!uo()) throw fo() ? Error("WebRTC isn't detected, have you called registerGlobals?") : Error("LiveKit doesn't seem to be supported on this browser. Try to update your browser and make sure no browser extensions are disabling webRTC.");
              const o3 = yield this.disconnectLock.lock();
              if (this.state === e.ConnectionState.Connected) return this.log.info("already connected to room ".concat(this.name), this.logContext), o3(), Promise.resolve();
              if (this.connectFuture) return o3(), this.connectFuture.promise;
              this.setAndEmitConnectionState(e.ConnectionState.Connecting), (null === (s2 = this.regionUrlProvider) || void 0 === s2 ? void 0 : s2.getServerUrl().toString()) !== t3 && (this.regionUrl = void 0, this.regionUrlProvider = void 0), ko(new URL(t3)) && (void 0 === this.regionUrlProvider ? this.regionUrlProvider = new ba(t3, n3) : this.regionUrlProvider.updateToken(n3), this.regionUrlProvider.fetchRegionSettings().then((e2) => {
                var t4;
                null === (t4 = this.regionUrlProvider) || void 0 === t4 || t4.setServerReportedRegions(e2);
              }).catch((e2) => {
                this.log.warn("could not fetch region settings", Object.assign(Object.assign({}, this.logContext), { error: e2 }));
              }));
              const r3 = (s3, a3, c2) => Xn(this, void 0, void 0, function* () {
                var d2, l2;
                this.abortController && this.abortController.abort();
                const u2 = new AbortController();
                this.abortController = u2, null == o3 || o3();
                try {
                  yield this.attemptConnection(null != c2 ? c2 : t3, n3, i3, u2), this.abortController = void 0, s3();
                } catch (t4) {
                  if (this.regionUrlProvider && t4 instanceof Is && t4.reason !== e.ConnectionErrorReason.Cancelled && t4.reason !== e.ConnectionErrorReason.NotAllowed) {
                    let n4 = null;
                    try {
                      n4 = yield this.regionUrlProvider.getNextBestRegionUrl(null === (d2 = this.abortController) || void 0 === d2 ? void 0 : d2.signal);
                    } catch (t5) {
                      if (t5 instanceof Is && (401 === t5.status || t5.reason === e.ConnectionErrorReason.Cancelled)) return this.handleDisconnect(this.options.stopLocalTrackOnUnpublish), void a3(t5);
                    }
                    n4 && !(null === (l2 = this.abortController) || void 0 === l2 ? void 0 : l2.signal.aborted) ? (this.log.info("Initial connection failed with ConnectionError: ".concat(t4.message, ". Retrying with another region: ").concat(n4), this.logContext), this.recreateEngine(), yield r3(s3, a3, n4)) : (this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, Lo(t4)), a3(t4));
                  } else {
                    let e2 = $e.UNKNOWN_REASON;
                    t4 instanceof Is && (e2 = Lo(t4)), this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, e2), a3(t4);
                  }
                }
              }), a2 = this.regionUrl;
              return this.regionUrl = void 0, this.connectFuture = new No((e2, t4) => {
                r3(e2, t4, a2);
              }, () => {
                this.clearConnectionFutures();
              }), this.connectFuture.promise;
            }), this.connectSignal = (e2, t3, n3, i3, s2, o3) => Xn(this, void 0, void 0, function* () {
              var r3, a2, c2;
              const d2 = yield n3.join(e2, t3, { autoSubscribe: i3.autoSubscribe, adaptiveStream: "object" == typeof s2.adaptiveStream || s2.adaptiveStream, maxRetries: i3.maxRetries, e2eeEnabled: !!this.e2eeManager, websocketTimeout: i3.websocketTimeout }, o3.signal);
              let l2 = d2.serverInfo;
              if (l2 || (l2 = { version: d2.serverVersion, region: d2.serverRegion }), this.serverInfo = l2, this.log.debug("connected to Livekit Server ".concat(Object.entries(l2).map((e3) => {
                let [t4, n4] = e3;
                return "".concat(t4, ": ").concat(n4);
              }).join(", ")), { room: null === (r3 = d2.room) || void 0 === r3 ? void 0 : r3.name, roomSid: null === (a2 = d2.room) || void 0 === a2 ? void 0 : a2.sid, identity: null === (c2 = d2.participant) || void 0 === c2 ? void 0 : c2.identity }), !l2.version) throw new xs("unknown server version");
              return "0.15.1" === l2.version && this.options.dynacast && (this.log.debug("disabling dynacast due to server version", this.logContext), s2.dynacast = false), d2;
            }), this.applyJoinResponse = (e2) => {
              const t3 = e2.participant;
              if (this.localParticipant.sid = t3.sid, this.localParticipant.identity = t3.identity, this.localParticipant.setEnabledPublishCodecs(e2.enabledPublishCodecs), this.options.e2ee && this.e2eeManager) try {
                this.e2eeManager.setSifTrailer(e2.sifTrailer);
              } catch (e3) {
                this.log.error(e3 instanceof Error ? e3.message : "Could not set SifTrailer", Object.assign(Object.assign({}, this.logContext), { error: e3 }));
              }
              this.handleParticipantUpdates([t3, ...e2.otherParticipants]), e2.room && this.handleRoomUpdate(e2.room);
            }, this.attemptConnection = (t3, n3, i3, s2) => Xn(this, void 0, void 0, function* () {
              var o3, r3;
              this.state === e.ConnectionState.Reconnecting || this.isResuming || (null === (o3 = this.engine) || void 0 === o3 ? void 0 : o3.pendingReconnect) ? (this.log.info("Reconnection attempt replaced by new connection attempt", this.logContext), this.recreateEngine()) : this.maybeCreateEngine(), (null === (r3 = this.regionUrlProvider) || void 0 === r3 ? void 0 : r3.isCloud()) && this.engine.setRegionUrlProvider(this.regionUrlProvider), this.acquireAudioContext(), this.connOptions = Object.assign(Object.assign({}, Vr), i3), this.connOptions.rtcConfig && (this.engine.rtcConfig = this.connOptions.rtcConfig), this.connOptions.peerConnectionTimeout && (this.engine.peerConnectionTimeout = this.connOptions.peerConnectionTimeout);
              try {
                const i4 = yield this.connectSignal(t3, n3, this.engine, this.connOptions, this.options, s2);
                this.applyJoinResponse(i4), this.setupLocalParticipantEvents(), this.emit(e.RoomEvent.SignalConnected);
              } catch (t4) {
                yield this.engine.close(), this.recreateEngine();
                const n4 = new Is("could not establish signal connection", e.ConnectionErrorReason.ServerUnreachable);
                throw t4 instanceof Error && (n4.message = "".concat(n4.message, ": ").concat(t4.message)), t4 instanceof Is && (n4.reason = t4.reason, n4.status = t4.status), this.log.debug("error trying to establish signal connection", Object.assign(Object.assign({}, this.logContext), { error: t4 })), n4;
              }
              if (s2.signal.aborted) throw yield this.engine.close(), this.recreateEngine(), new Is("Connection attempt aborted", e.ConnectionErrorReason.Cancelled);
              try {
                yield this.engine.waitForPCInitialConnection(this.connOptions.peerConnectionTimeout, s2);
              } catch (e2) {
                throw yield this.engine.close(), this.recreateEngine(), e2;
              }
              vo() && this.options.disconnectOnPageLeave && (window.addEventListener("pagehide", this.onPageLeave), window.addEventListener("beforeunload", this.onPageLeave)), vo() && document.addEventListener("freeze", this.onPageLeave), this.setAndEmitConnectionState(e.ConnectionState.Connected), this.emit(e.RoomEvent.Connected), this.registerConnectionReconcile();
            }), this.disconnect = function() {
              for (var t3 = arguments.length, i3 = new Array(t3), s2 = 0; s2 < t3; s2++) i3[s2] = arguments[s2];
              return Xn(n2, [...i3], void 0, function() {
                var t4 = this;
                let n3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                return function* () {
                  var i4, s3, o3, r3;
                  const a2 = yield t4.disconnectLock.lock();
                  try {
                    if (t4.state === e.ConnectionState.Disconnected) return void t4.log.debug("already disconnected", t4.logContext);
                    t4.log.info("disconnect from room", Object.assign({}, t4.logContext)), (t4.state === e.ConnectionState.Connecting || t4.state === e.ConnectionState.Reconnecting || t4.isResuming) && (t4.log.warn("abort connection attempt", t4.logContext), null === (i4 = t4.abortController) || void 0 === i4 || i4.abort(), null === (o3 = null === (s3 = t4.connectFuture) || void 0 === s3 ? void 0 : s3.reject) || void 0 === o3 || o3.call(s3, new Is("Client initiated disconnect", e.ConnectionErrorReason.Cancelled)), t4.connectFuture = void 0), (null === (r3 = t4.engine) || void 0 === r3 ? void 0 : r3.client.isDisconnected) || (yield t4.engine.client.sendLeave()), t4.engine && (yield t4.engine.close()), t4.handleDisconnect(n3, $e.CLIENT_INITIATED), t4.engine = void 0;
                  } finally {
                    a2();
                  }
                }();
              });
            }, this.onPageLeave = () => Xn(this, void 0, void 0, function* () {
              this.log.info("Page leave detected, disconnecting", this.logContext), yield this.disconnect();
            }), this.startAudio = () => Xn(this, void 0, void 0, function* () {
              const t3 = [], n3 = js();
              if (n3 && "iOS" === n3.os) {
                const n4 = "livekit-dummy-audio-el";
                let i3 = document.getElementById(n4);
                if (!i3) {
                  i3 = document.createElement("audio"), i3.id = n4, i3.autoplay = true, i3.hidden = true;
                  const t4 = Mo();
                  t4.enabled = true;
                  const s2 = new MediaStream([t4]);
                  i3.srcObject = s2, document.addEventListener("visibilitychange", () => {
                    i3 && (i3.srcObject = document.hidden ? null : s2, document.hidden || (this.log.debug("page visible again, triggering startAudio to resume playback and update playback status", this.logContext), this.startAudio()));
                  }), document.body.append(i3), this.once(e.RoomEvent.Disconnected, () => {
                    null == i3 || i3.remove(), i3 = null;
                  });
                }
                t3.push(i3);
              }
              this.remoteParticipants.forEach((e2) => {
                e2.audioTrackPublications.forEach((e3) => {
                  e3.track && e3.track.attachedElements.forEach((e4) => {
                    t3.push(e4);
                  });
                });
              });
              try {
                yield Promise.all([this.acquireAudioContext(), ...t3.map((e2) => (e2.muted = false, e2.play()))]), this.handleAudioPlaybackStarted();
              } catch (e2) {
                throw this.handleAudioPlaybackFailed(e2), e2;
              }
            }), this.startVideo = () => Xn(this, void 0, void 0, function* () {
              const e2 = [];
              for (const t3 of this.remoteParticipants.values()) t3.videoTrackPublications.forEach((t4) => {
                var n3;
                null === (n3 = t4.track) || void 0 === n3 || n3.attachedElements.forEach((t5) => {
                  e2.includes(t5) || e2.push(t5);
                });
              });
              yield Promise.all(e2.map((e3) => e3.play())).then(() => {
                this.handleVideoPlaybackStarted();
              }).catch((e3) => {
                "NotAllowedError" === e3.name ? this.handleVideoPlaybackFailed() : this.log.warn("Resuming video playback failed, make sure you call `startVideo` directly in a user gesture handler", this.logContext);
              });
            }), this.handleRestarting = () => {
              this.clearConnectionReconcile(), this.isResuming = false;
              for (const e2 of this.remoteParticipants.values()) this.handleParticipantDisconnected(e2.identity, e2);
              this.setAndEmitConnectionState(e.ConnectionState.Reconnecting) && this.emit(e.RoomEvent.Reconnecting);
            }, this.handleSignalRestarted = (t3) => Xn(this, void 0, void 0, function* () {
              this.log.debug("signal reconnected to server, region ".concat(t3.serverRegion), Object.assign(Object.assign({}, this.logContext), { region: t3.serverRegion })), this.bufferedEvents = [], this.applyJoinResponse(t3);
              try {
                yield this.localParticipant.republishAllTracks(void 0, true);
              } catch (e2) {
                this.log.error("error trying to re-publish tracks after reconnection", Object.assign(Object.assign({}, this.logContext), { error: e2 }));
              }
              try {
                yield this.engine.waitForRestarted(), this.log.debug("fully reconnected to server", Object.assign(Object.assign({}, this.logContext), { region: t3.serverRegion }));
              } catch (e2) {
                return;
              }
              this.setAndEmitConnectionState(e.ConnectionState.Connected), this.emit(e.RoomEvent.Reconnected), this.registerConnectionReconcile(), this.emitBufferedEvents();
            }), this.handleParticipantUpdates = (e2) => {
              e2.forEach((e3) => {
                var t3;
                if (e3.identity === this.localParticipant.identity) return void this.localParticipant.updateInfo(e3);
                "" === e3.identity && (e3.identity = null !== (t3 = this.sidToIdentity.get(e3.sid)) && void 0 !== t3 ? t3 : "");
                let n3 = this.remoteParticipants.get(e3.identity);
                e3.state === at.DISCONNECTED ? this.handleParticipantDisconnected(e3.identity, n3) : n3 = this.getOrCreateParticipant(e3.identity, e3);
              });
            }, this.handleActiveSpeakersUpdate = (t3) => {
              const n3 = [], i3 = {};
              t3.forEach((e2) => {
                if (i3[e2.sid] = true, e2.sid === this.localParticipant.sid) this.localParticipant.audioLevel = e2.level, this.localParticipant.setIsSpeaking(true), n3.push(this.localParticipant);
                else {
                  const t4 = this.getRemoteParticipantBySid(e2.sid);
                  t4 && (t4.audioLevel = e2.level, t4.setIsSpeaking(true), n3.push(t4));
                }
              }), i3[this.localParticipant.sid] || (this.localParticipant.audioLevel = 0, this.localParticipant.setIsSpeaking(false)), this.remoteParticipants.forEach((e2) => {
                i3[e2.sid] || (e2.audioLevel = 0, e2.setIsSpeaking(false));
              }), this.activeSpeakers = n3, this.emitWhenConnected(e.RoomEvent.ActiveSpeakersChanged, n3);
            }, this.handleSpeakersChanged = (t3) => {
              const n3 = /* @__PURE__ */ new Map();
              this.activeSpeakers.forEach((e2) => {
                const t4 = this.remoteParticipants.get(e2.identity);
                t4 && t4.sid !== e2.sid || n3.set(e2.sid, e2);
              }), t3.forEach((e2) => {
                let t4 = this.getRemoteParticipantBySid(e2.sid);
                e2.sid === this.localParticipant.sid && (t4 = this.localParticipant), t4 && (t4.audioLevel = e2.level, t4.setIsSpeaking(e2.active), e2.active ? n3.set(e2.sid, t4) : n3.delete(e2.sid));
              });
              const i3 = Array.from(n3.values());
              i3.sort((e2, t4) => t4.audioLevel - e2.audioLevel), this.activeSpeakers = i3, this.emitWhenConnected(e.RoomEvent.ActiveSpeakersChanged, i3);
            }, this.handleStreamStateUpdate = (t3) => {
              t3.streamStates.forEach((t4) => {
                const n3 = this.getRemoteParticipantBySid(t4.participantSid);
                if (!n3) return;
                const i3 = n3.getTrackPublicationBySid(t4.trackSid);
                if (!i3 || !i3.track) return;
                const s2 = Hs.streamStateFromProto(t4.state);
                s2 !== i3.track.streamState && (i3.track.streamState = s2, n3.emit(e.ParticipantEvent.TrackStreamStateChanged, i3, i3.track.streamState), this.emitWhenConnected(e.RoomEvent.TrackStreamStateChanged, i3, i3.track.streamState, n3));
              });
            }, this.handleSubscriptionPermissionUpdate = (e2) => {
              const t3 = this.getRemoteParticipantBySid(e2.participantSid);
              if (!t3) return;
              const n3 = t3.getTrackPublicationBySid(e2.trackSid);
              n3 && n3.setAllowed(e2.allowed);
            }, this.handleSubscriptionError = (e2) => {
              const t3 = Array.from(this.remoteParticipants.values()).find((t4) => t4.trackPublications.has(e2.trackSid));
              if (!t3) return;
              const n3 = t3.getTrackPublicationBySid(e2.trackSid);
              n3 && n3.setSubscriptionError(e2.err);
            }, this.handleDataPacket = (e2) => {
              const t3 = this.remoteParticipants.get(e2.participantIdentity);
              if ("user" === e2.value.case) this.handleUserPacket(t3, e2.value.value, e2.kind);
              else if ("transcription" === e2.value.case) this.handleTranscription(t3, e2.value.value);
              else if ("sipDtmf" === e2.value.case) this.handleSipDtmf(t3, e2.value.value);
              else if ("chatMessage" === e2.value.case) this.handleChatMessage(t3, e2.value.value);
              else if ("metrics" === e2.value.case) this.handleMetrics(e2.value.value, t3);
              else if ("streamHeader" === e2.value.case) this.handleStreamHeader(e2.value.value, e2.participantIdentity);
              else if ("streamChunk" === e2.value.case) this.handleStreamChunk(e2.value.value);
              else if ("streamTrailer" === e2.value.case) this.handleStreamTrailer(e2.value.value);
              else if ("rpcRequest" === e2.value.case) {
                const t4 = e2.value.value;
                this.handleIncomingRpcRequest(e2.participantIdentity, t4.id, t4.method, t4.payload, t4.responseTimeoutMs, t4.version);
              }
            }, this.handleUserPacket = (t3, n3, i3) => {
              this.emit(e.RoomEvent.DataReceived, n3.payload, t3, i3, n3.topic), null == t3 || t3.emit(e.ParticipantEvent.DataReceived, n3.payload, i3);
            }, this.handleSipDtmf = (t3, n3) => {
              this.emit(e.RoomEvent.SipDTMFReceived, n3, t3), null == t3 || t3.emit(e.ParticipantEvent.SipDTMFReceived, n3);
            }, this.bufferedSegments = /* @__PURE__ */ new Map(), this.handleTranscription = (t3, n3) => {
              const i3 = n3.transcribedParticipantIdentity === this.localParticipant.identity ? this.localParticipant : this.getParticipantByIdentity(n3.transcribedParticipantIdentity), s2 = null == i3 ? void 0 : i3.trackPublications.get(n3.trackId), o3 = function(e2, t4) {
                return e2.segments.map((e3) => {
                  let { id: n4, text: i4, language: s3, startTime: o4, endTime: r3, final: a2 } = e3;
                  var c2;
                  const d2 = null !== (c2 = t4.get(n4)) && void 0 !== c2 ? c2 : Date.now(), l2 = Date.now();
                  return a2 ? t4.delete(n4) : t4.set(n4, d2), { id: n4, text: i4, startTime: Number.parseInt(o4.toString()), endTime: Number.parseInt(r3.toString()), final: a2, language: s3, firstReceivedTime: d2, lastReceivedTime: l2 };
                });
              }(n3, this.transcriptionReceivedTimes);
              null == s2 || s2.emit(e.TrackEvent.TranscriptionReceived, o3), null == i3 || i3.emit(e.ParticipantEvent.TranscriptionReceived, o3, s2), this.emit(e.RoomEvent.TranscriptionReceived, o3, i3, s2);
            }, this.handleChatMessage = (t3, n3) => {
              const i3 = function(e2) {
                const { id: t4, timestamp: n4, message: i4, editTimestamp: s2 } = e2;
                return { id: t4, timestamp: Number.parseInt(n4.toString()), editTimestamp: s2 ? Number.parseInt(s2.toString()) : void 0, message: i4 };
              }(n3);
              this.emit(e.RoomEvent.ChatMessage, i3, t3);
            }, this.handleMetrics = (t3, n3) => {
              this.emit(e.RoomEvent.MetricsReceived, t3, n3);
            }, this.handleAudioPlaybackStarted = () => {
              this.canPlaybackAudio || (this.audioEnabled = true, this.emit(e.RoomEvent.AudioPlaybackStatusChanged, true));
            }, this.handleAudioPlaybackFailed = (t3) => {
              this.log.warn("could not playback audio", Object.assign(Object.assign({}, this.logContext), { error: t3 })), this.canPlaybackAudio && (this.audioEnabled = false, this.emit(e.RoomEvent.AudioPlaybackStatusChanged, false));
            }, this.handleVideoPlaybackStarted = () => {
              this.isVideoPlaybackBlocked && (this.isVideoPlaybackBlocked = false, this.emit(e.RoomEvent.VideoPlaybackStatusChanged, true));
            }, this.handleVideoPlaybackFailed = () => {
              this.isVideoPlaybackBlocked || (this.isVideoPlaybackBlocked = true, this.emit(e.RoomEvent.VideoPlaybackStatusChanged, false));
            }, this.handleDeviceChange = () => Xn(this, void 0, void 0, function* () {
              var t3, n3, i3;
              const s2 = cr.getInstance().previousDevices, o3 = yield cr.getInstance().getDevices(void 0, false), r3 = js();
              if ("Chrome" === (null == r3 ? void 0 : r3.name) && "iOS" !== r3.os) for (let t4 of o3) {
                const n4 = s2.find((e2) => e2.deviceId === t4.deviceId);
                n4 && "" !== n4.label && n4.kind === t4.kind && n4.label !== t4.label && "default" === this.getActiveDevice(t4.kind) && this.emit(e.RoomEvent.ActiveDeviceChanged, t4.kind, t4.deviceId);
              }
              const a2 = ["audiooutput", "audioinput", "videoinput"];
              for (let e2 of a2) {
                const r4 = $o(e2), a3 = this.localParticipant.getTrackPublication(r4);
                if (a3 && (null === (t3 = a3.track) || void 0 === t3 ? void 0 : t3.isUserProvided)) continue;
                const c2 = o3.filter((t4) => t4.kind === e2), d2 = this.getActiveDevice(e2);
                d2 === (null === (n3 = s2.filter((t4) => t4.kind === e2)[0]) || void 0 === n3 ? void 0 : n3.deviceId) && c2.length > 0 && (null === (i3 = c2[0]) || void 0 === i3 ? void 0 : i3.deviceId) !== d2 ? yield this.switchActiveDevice(e2, c2[0].deviceId) : "audioinput" === e2 && !po() || "videoinput" === e2 || c2.length > 0 && !c2.find((t4) => t4.deviceId === this.getActiveDevice(e2)) && (yield this.switchActiveDevice(e2, c2[0].deviceId));
              }
              this.emit(e.RoomEvent.MediaDevicesChanged);
            }), this.handleRoomUpdate = (t3) => {
              const n3 = this.roomInfo;
              this.roomInfo = t3, n3 && n3.metadata !== t3.metadata && this.emitWhenConnected(e.RoomEvent.RoomMetadataChanged, t3.metadata), (null == n3 ? void 0 : n3.activeRecording) !== t3.activeRecording && this.emitWhenConnected(e.RoomEvent.RecordingStatusChanged, t3.activeRecording);
            }, this.handleConnectionQualityUpdate = (e2) => {
              e2.updates.forEach((e3) => {
                if (e3.participantSid === this.localParticipant.sid) return void this.localParticipant.setConnectionQuality(e3.quality);
                const t3 = this.getRemoteParticipantBySid(e3.participantSid);
                t3 && t3.setConnectionQuality(e3.quality);
              });
            }, this.onLocalParticipantMetadataChanged = (t3) => {
              this.emit(e.RoomEvent.ParticipantMetadataChanged, t3, this.localParticipant);
            }, this.onLocalParticipantNameChanged = (t3) => {
              this.emit(e.RoomEvent.ParticipantNameChanged, t3, this.localParticipant);
            }, this.onLocalAttributesChanged = (t3) => {
              this.emit(e.RoomEvent.ParticipantAttributesChanged, t3, this.localParticipant);
            }, this.onLocalTrackMuted = (t3) => {
              this.emit(e.RoomEvent.TrackMuted, t3, this.localParticipant);
            }, this.onLocalTrackUnmuted = (t3) => {
              this.emit(e.RoomEvent.TrackUnmuted, t3, this.localParticipant);
            }, this.onTrackProcessorUpdate = (e2) => {
              var t3;
              null === (t3 = null == e2 ? void 0 : e2.onPublish) || void 0 === t3 || t3.call(e2, this);
            }, this.onLocalTrackPublished = (t3) => Xn(this, void 0, void 0, function* () {
              var n3, i3, s2, o3, r3, a2;
              if (null === (n3 = t3.track) || void 0 === n3 || n3.on(e.TrackEvent.TrackProcessorUpdate, this.onTrackProcessorUpdate), null === (i3 = t3.track) || void 0 === i3 || i3.on(e.TrackEvent.Restarted, this.onLocalTrackRestarted), null === (r3 = null === (o3 = null === (s2 = t3.track) || void 0 === s2 ? void 0 : s2.getProcessor()) || void 0 === o3 ? void 0 : o3.onPublish) || void 0 === r3 || r3.call(o3, this), this.emit(e.RoomEvent.LocalTrackPublished, t3, this.localParticipant), Ko(t3.track)) {
                (yield t3.track.checkForSilence()) && this.emit(e.RoomEvent.LocalAudioSilenceDetected, t3);
              }
              const c2 = yield null === (a2 = t3.track) || void 0 === a2 ? void 0 : a2.getDeviceId(false), d2 = er(t3.source);
              d2 && c2 && c2 !== this.localParticipant.activeDeviceMap.get(d2) && (this.localParticipant.activeDeviceMap.set(d2, c2), this.emit(e.RoomEvent.ActiveDeviceChanged, d2, c2));
            }), this.onLocalTrackUnpublished = (t3) => {
              var n3, i3;
              null === (n3 = t3.track) || void 0 === n3 || n3.off(e.TrackEvent.TrackProcessorUpdate, this.onTrackProcessorUpdate), null === (i3 = t3.track) || void 0 === i3 || i3.off(e.TrackEvent.Restarted, this.onLocalTrackRestarted), this.emit(e.RoomEvent.LocalTrackUnpublished, t3, this.localParticipant);
            }, this.onLocalTrackRestarted = (t3) => Xn(this, void 0, void 0, function* () {
              const n3 = yield t3.getDeviceId(false), i3 = er(t3.source);
              i3 && n3 && n3 !== this.localParticipant.activeDeviceMap.get(i3) && (this.log.debug("local track restarted, setting ".concat(i3, " ").concat(n3, " active"), this.logContext), this.localParticipant.activeDeviceMap.set(i3, n3), this.emit(e.RoomEvent.ActiveDeviceChanged, i3, n3));
            }), this.onLocalConnectionQualityChanged = (t3) => {
              this.emit(e.RoomEvent.ConnectionQualityChanged, t3, this.localParticipant);
            }, this.onMediaDevicesError = (t3) => {
              this.emit(e.RoomEvent.MediaDevicesError, t3);
            }, this.onLocalParticipantPermissionsChanged = (t3) => {
              this.emit(e.RoomEvent.ParticipantPermissionsChanged, t3, this.localParticipant);
            }, this.onLocalChatMessageSent = (t3) => {
              this.emit(e.RoomEvent.ChatMessage, t3, this.localParticipant);
            }, this.setMaxListeners(100), this.remoteParticipants = /* @__PURE__ */ new Map(), this.sidToIdentity = /* @__PURE__ */ new Map(), this.options = Object.assign(Object.assign({}, Br), t2), this.log = Gn(null !== (i2 = this.options.loggerName) && void 0 !== i2 ? i2 : e.LoggerNames.Room), this.transcriptionReceivedTimes = /* @__PURE__ */ new Map(), this.options.audioCaptureDefaults = Object.assign(Object.assign({}, jr), null == t2 ? void 0 : t2.audioCaptureDefaults), this.options.videoCaptureDefaults = Object.assign(Object.assign({}, Fr), null == t2 ? void 0 : t2.videoCaptureDefaults), this.options.publishDefaults = Object.assign(Object.assign({}, Ur), null == t2 ? void 0 : t2.publishDefaults), this.maybeCreateEngine(), this.disconnectLock = new s(), this.localParticipant = new ja("", "", this.engine, this.options, this.rpcHandlers), this.options.videoCaptureDefaults.deviceId && this.localParticipant.activeDeviceMap.set("videoinput", _o(this.options.videoCaptureDefaults.deviceId)), this.options.audioCaptureDefaults.deviceId && this.localParticipant.activeDeviceMap.set("audioinput", _o(this.options.audioCaptureDefaults.deviceId)), (null === (o2 = this.options.audioOutput) || void 0 === o2 ? void 0 : o2.deviceId) && this.switchActiveDevice("audiooutput", _o(this.options.audioOutput.deviceId)).catch((e2) => this.log.warn("Could not set audio output: ".concat(e2.message), this.logContext)), this.options.e2ee && this.setupE2EE(), vo()) {
              const e2 = new AbortController();
              null === (r2 = navigator.mediaDevices) || void 0 === r2 || r2.addEventListener("devicechange", this.handleDeviceChange, { signal: e2.signal }), qa.cleanupRegistry && qa.cleanupRegistry.register(this, () => {
                e2.abort();
              });
            }
          }
          registerTextStreamHandler(e2, t2) {
            if (this.textStreamHandlers.has(e2)) throw new TypeError('A text stream handler for topic "'.concat(e2, '" has already been set.'));
            this.textStreamHandlers.set(e2, t2);
          }
          unregisterTextStreamHandler(e2) {
            this.textStreamHandlers.delete(e2);
          }
          registerByteStreamHandler(e2, t2) {
            if (this.byteStreamHandlers.has(e2)) throw new TypeError('A byte stream handler for topic "'.concat(e2, '" has already been set.'));
            this.byteStreamHandlers.set(e2, t2);
          }
          unregisterByteStreamHandler(e2) {
            this.byteStreamHandlers.delete(e2);
          }
          registerRpcMethod(e2, t2) {
            if (this.rpcHandlers.has(e2)) throw Error("RPC handler already registered for method ".concat(e2, ", unregisterRpcMethod before trying to register again"));
            this.rpcHandlers.set(e2, t2);
          }
          unregisterRpcMethod(e2) {
            this.rpcHandlers.delete(e2);
          }
          handleIncomingRpcRequest(e2, t2, n2, i2, s2, o2) {
            return Xn(this, void 0, void 0, function* () {
              if (yield this.engine.publishRpcAck(e2, t2), 1 !== o2) return void (yield this.engine.publishRpcResponse(e2, t2, null, Wr.builtIn("UNSUPPORTED_VERSION")));
              const r2 = this.rpcHandlers.get(n2);
              if (!r2) return void (yield this.engine.publishRpcResponse(e2, t2, null, Wr.builtIn("UNSUPPORTED_METHOD")));
              let a2 = null, c2 = null;
              try {
                const o3 = yield r2({ requestId: t2, callerIdentity: e2, payload: i2, responseTimeout: s2 });
                Hr(o3) > 15360 ? (a2 = Wr.builtIn("RESPONSE_PAYLOAD_TOO_LARGE"), console.warn("RPC Response payload too large for ".concat(n2))) : c2 = o3;
              } catch (e3) {
                e3 instanceof Wr ? a2 = e3 : (console.warn("Uncaught error returned by RPC handler for ".concat(n2, ". Returning APPLICATION_ERROR instead."), e3), a2 = Wr.builtIn("APPLICATION_ERROR"));
              }
              yield this.engine.publishRpcResponse(e2, t2, c2, a2);
            });
          }
          setE2EEEnabled(e2) {
            return Xn(this, void 0, void 0, function* () {
              if (!this.e2eeManager) throw Error("e2ee not configured, please set e2ee settings within the room options");
              yield Promise.all([this.localParticipant.setE2EEEnabled(e2)]), "" !== this.localParticipant.identity && this.e2eeManager.setParticipantCryptorEnabled(e2, this.localParticipant.identity);
            });
          }
          setupE2EE() {
            var t2;
            this.options.e2ee && ("e2eeManager" in this.options.e2ee ? this.e2eeManager = this.options.e2ee.e2eeManager : this.e2eeManager = new rr(this.options.e2ee), this.e2eeManager.on(e.EncryptionEvent.ParticipantEncryptionStatusChanged, (t3, n2) => {
              zo(n2) && (this.isE2EEEnabled = t3), this.emit(e.RoomEvent.ParticipantEncryptionStatusChanged, t3, n2);
            }), this.e2eeManager.on(e.EncryptionEvent.EncryptionError, (t3) => this.emit(e.RoomEvent.EncryptionError, t3)), null === (t2 = this.e2eeManager) || void 0 === t2 || t2.setup(this));
          }
          get logContext() {
            var e2;
            return { room: this.name, roomID: null === (e2 = this.roomInfo) || void 0 === e2 ? void 0 : e2.sid, participant: this.localParticipant.identity, pID: this.localParticipant.sid };
          }
          get isRecording() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this.roomInfo) || void 0 === e2 ? void 0 : e2.activeRecording) && void 0 !== t2 && t2;
          }
          getSid() {
            return Xn(this, void 0, void 0, function* () {
              return this.state === e.ConnectionState.Disconnected ? "" : this.roomInfo && "" !== this.roomInfo.sid ? this.roomInfo.sid : new Promise((t2, n2) => {
                const i2 = (n3) => {
                  "" !== n3.sid && (this.engine.off(e.EngineEvent.RoomUpdate, i2), t2(n3.sid));
                };
                this.engine.on(e.EngineEvent.RoomUpdate, i2), this.once(e.RoomEvent.Disconnected, () => {
                  this.engine.off(e.EngineEvent.RoomUpdate, i2), n2("Room disconnected before room server id was available");
                });
              });
            });
          }
          get name() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this.roomInfo) || void 0 === e2 ? void 0 : e2.name) && void 0 !== t2 ? t2 : "";
          }
          get metadata() {
            var e2;
            return null === (e2 = this.roomInfo) || void 0 === e2 ? void 0 : e2.metadata;
          }
          get numParticipants() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this.roomInfo) || void 0 === e2 ? void 0 : e2.numParticipants) && void 0 !== t2 ? t2 : 0;
          }
          get numPublishers() {
            var e2, t2;
            return null !== (t2 = null === (e2 = this.roomInfo) || void 0 === e2 ? void 0 : e2.numPublishers) && void 0 !== t2 ? t2 : 0;
          }
          maybeCreateEngine() {
            this.engine && !this.engine.isClosed || (this.engine = new fa(this.options), this.engine.on(e.EngineEvent.ParticipantUpdate, this.handleParticipantUpdates).on(e.EngineEvent.RoomUpdate, this.handleRoomUpdate).on(e.EngineEvent.SpeakersChanged, this.handleSpeakersChanged).on(e.EngineEvent.StreamStateChanged, this.handleStreamStateUpdate).on(e.EngineEvent.ConnectionQualityUpdate, this.handleConnectionQualityUpdate).on(e.EngineEvent.SubscriptionError, this.handleSubscriptionError).on(e.EngineEvent.SubscriptionPermissionUpdate, this.handleSubscriptionPermissionUpdate).on(e.EngineEvent.MediaTrackAdded, (e2, t2, n2) => {
              this.onTrackAdded(e2, t2, n2);
            }).on(e.EngineEvent.Disconnected, (e2) => {
              this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, e2);
            }).on(e.EngineEvent.ActiveSpeakersUpdate, this.handleActiveSpeakersUpdate).on(e.EngineEvent.DataPacketReceived, this.handleDataPacket).on(e.EngineEvent.Resuming, () => {
              this.clearConnectionReconcile(), this.isResuming = true, this.log.info("Resuming signal connection", this.logContext), this.setAndEmitConnectionState(e.ConnectionState.SignalReconnecting) && this.emit(e.RoomEvent.SignalReconnecting);
            }).on(e.EngineEvent.Resumed, () => {
              this.registerConnectionReconcile(), this.isResuming = false, this.log.info("Resumed signal connection", this.logContext), this.updateSubscriptions(), this.emitBufferedEvents(), this.setAndEmitConnectionState(e.ConnectionState.Connected) && this.emit(e.RoomEvent.Reconnected);
            }).on(e.EngineEvent.SignalResumed, () => {
              this.bufferedEvents = [], (this.state === e.ConnectionState.Reconnecting || this.isResuming) && this.sendSyncState();
            }).on(e.EngineEvent.Restarting, this.handleRestarting).on(e.EngineEvent.SignalRestarted, this.handleSignalRestarted).on(e.EngineEvent.Offline, () => {
              this.setAndEmitConnectionState(e.ConnectionState.Reconnecting) && this.emit(e.RoomEvent.Reconnecting);
            }).on(e.EngineEvent.DCBufferStatusChanged, (t2, n2) => {
              this.emit(e.RoomEvent.DCBufferStatusChanged, t2, n2);
            }).on(e.EngineEvent.LocalTrackSubscribed, (t2) => {
              const n2 = this.localParticipant.getTrackPublications().find((e2) => {
                let { trackSid: n3 } = e2;
                return n3 === t2;
              });
              n2 ? (this.localParticipant.emit(e.ParticipantEvent.LocalTrackSubscribed, n2), this.emitWhenConnected(e.RoomEvent.LocalTrackSubscribed, n2, this.localParticipant)) : this.log.warn("could not find local track subscription for subscribed event", this.logContext);
            }).on(e.EngineEvent.RoomMoved, (t2) => {
              this.log.debug("room moved", t2), t2.room && this.handleRoomUpdate(t2.room), this.remoteParticipants.forEach((e2, t3) => {
                this.handleParticipantDisconnected(t3, e2);
              }), this.emit(e.RoomEvent.Moved, t2.room.name, t2.token), t2.participant ? this.handleParticipantUpdates([t2.participant, ...t2.otherParticipants]) : this.handleParticipantUpdates(t2.otherParticipants);
            }), this.localParticipant && this.localParticipant.setupEngine(this.engine), this.e2eeManager && this.e2eeManager.setupEngine(this.engine));
          }
          static getLocalDevices(e2) {
            let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
            return cr.getInstance().getDevices(e2, t2);
          }
          prepareConnection(t2, n2) {
            return Xn(this, void 0, void 0, function* () {
              if (this.state === e.ConnectionState.Disconnected) {
                this.log.debug("prepareConnection to ".concat(t2), this.logContext);
                try {
                  if (ko(new URL(t2)) && n2) {
                    this.regionUrlProvider = new ba(t2, n2);
                    const i2 = yield this.regionUrlProvider.getNextBestRegionUrl();
                    i2 && this.state === e.ConnectionState.Disconnected && (this.regionUrl = i2, yield fetch(Ao(i2), { method: "HEAD" }), this.log.debug("prepared connection to ".concat(i2), this.logContext));
                  } else yield fetch(Ao(t2), { method: "HEAD" });
                } catch (e2) {
                  this.log.warn("could not prepare connection", Object.assign(Object.assign({}, this.logContext), { error: e2 }));
                }
              }
            });
          }
          getParticipantByIdentity(e2) {
            return this.localParticipant.identity === e2 ? this.localParticipant : this.remoteParticipants.get(e2);
          }
          clearConnectionFutures() {
            this.connectFuture = void 0;
          }
          simulateScenario(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              let n2, i2 = () => {
              };
              switch (e2) {
                case "signal-reconnect":
                  yield this.engine.client.handleOnClose("simulate disconnect");
                  break;
                case "speaker":
                  n2 = new In({ scenario: { case: "speakerUpdate", value: 3 } });
                  break;
                case "node-failure":
                  n2 = new In({ scenario: { case: "nodeFailure", value: true } });
                  break;
                case "server-leave":
                  n2 = new In({ scenario: { case: "serverLeave", value: true } });
                  break;
                case "migration":
                  n2 = new In({ scenario: { case: "migration", value: true } });
                  break;
                case "resume-reconnect":
                  this.engine.failNext(), yield this.engine.client.handleOnClose("simulate resume-disconnect");
                  break;
                case "disconnect-signal-on-resume":
                  i2 = () => Xn(this, void 0, void 0, function* () {
                    yield this.engine.client.handleOnClose("simulate resume-disconnect");
                  }), n2 = new In({ scenario: { case: "disconnectSignalOnResume", value: true } });
                  break;
                case "disconnect-signal-on-resume-no-messages":
                  i2 = () => Xn(this, void 0, void 0, function* () {
                    yield this.engine.client.handleOnClose("simulate resume-disconnect");
                  }), n2 = new In({ scenario: { case: "disconnectSignalOnResumeNoMessages", value: true } });
                  break;
                case "full-reconnect":
                  this.engine.fullReconnectOnNext = true, yield this.engine.client.handleOnClose("simulate full-reconnect");
                  break;
                case "force-tcp":
                case "force-tls":
                  n2 = new In({ scenario: { case: "switchCandidateProtocol", value: "force-tls" === e2 ? 2 : 1 } }), i2 = () => Xn(this, void 0, void 0, function* () {
                    const e3 = this.engine.client.onLeave;
                    e3 && e3(new cn({ reason: $e.CLIENT_INITIATED, action: dn.RECONNECT }));
                  });
                  break;
                case "subscriber-bandwidth":
                  if (void 0 === t2 || "number" != typeof t2) throw new Error("subscriber-bandwidth requires a number as argument");
                  n2 = new In({ scenario: { case: "subscriberBandwidth", value: jo(t2) } });
                  break;
                case "leave-full-reconnect":
                  n2 = new In({ scenario: { case: "leaveRequestFullReconnect", value: true } });
              }
              n2 && (yield this.engine.client.sendSimulateScenario(n2), yield i2());
            });
          }
          get canPlaybackAudio() {
            return this.audioEnabled;
          }
          get canPlaybackVideo() {
            return !this.isVideoPlaybackBlocked;
          }
          getActiveDevice(e2) {
            return this.localParticipant.activeDeviceMap.get(e2);
          }
          switchActiveDevice(t2, n2) {
            return Xn(this, arguments, void 0, function(t3, n3) {
              var i2 = this;
              let s2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
              return function* () {
                var o2, r2, a2, c2, d2, l2, u2, h2;
                let p2 = true, m2 = false;
                const g2 = s2 ? { exact: n3 } : n3;
                if ("audioinput" === t3) {
                  m2 = 0 === i2.localParticipant.audioTrackPublications.size;
                  const e2 = null !== (o2 = i2.getActiveDevice(t3)) && void 0 !== o2 ? o2 : i2.options.audioCaptureDefaults.deviceId;
                  i2.options.audioCaptureDefaults.deviceId = g2;
                  const n4 = Array.from(i2.localParticipant.audioTrackPublications.values()).filter((e3) => e3.source === Hs.Source.Microphone);
                  try {
                    p2 = (yield Promise.all(n4.map((e3) => {
                      var t4;
                      return null === (t4 = e3.audioTrack) || void 0 === t4 ? void 0 : t4.setDeviceId(g2);
                    }))).every((e3) => true === e3);
                  } catch (t4) {
                    throw i2.options.audioCaptureDefaults.deviceId = e2, t4;
                  }
                } else if ("videoinput" === t3) {
                  m2 = 0 === i2.localParticipant.videoTrackPublications.size;
                  const e2 = null !== (r2 = i2.getActiveDevice(t3)) && void 0 !== r2 ? r2 : i2.options.videoCaptureDefaults.deviceId;
                  i2.options.videoCaptureDefaults.deviceId = g2;
                  const n4 = Array.from(i2.localParticipant.videoTrackPublications.values()).filter((e3) => e3.source === Hs.Source.Camera);
                  try {
                    p2 = (yield Promise.all(n4.map((e3) => {
                      var t4;
                      return null === (t4 = e3.videoTrack) || void 0 === t4 ? void 0 : t4.setDeviceId(g2);
                    }))).every((e3) => true === e3);
                  } catch (t4) {
                    throw i2.options.videoCaptureDefaults.deviceId = e2, t4;
                  }
                } else if ("audiooutput" === t3) {
                  if (!lo() && !i2.options.webAudioMix || i2.options.webAudioMix && i2.audioContext && !("setSinkId" in i2.audioContext)) throw new Error("cannot switch audio output, setSinkId not supported");
                  i2.options.webAudioMix && (n3 = null !== (a2 = yield cr.getInstance().normalizeDeviceId("audiooutput", n3)) && void 0 !== a2 ? a2 : ""), null !== (c2 = (h2 = i2.options).audioOutput) && void 0 !== c2 || (h2.audioOutput = {});
                  const e2 = null !== (d2 = i2.getActiveDevice(t3)) && void 0 !== d2 ? d2 : i2.options.audioOutput.deviceId;
                  i2.options.audioOutput.deviceId = n3;
                  try {
                    i2.options.webAudioMix && (null === (l2 = i2.audioContext) || void 0 === l2 || l2.setSinkId(n3)), yield Promise.all(Array.from(i2.remoteParticipants.values()).map((e3) => e3.setAudioOutput({ deviceId: n3 })));
                  } catch (t4) {
                    throw i2.options.audioOutput.deviceId = e2, t4;
                  }
                }
                return (m2 || "audiooutput" === t3) && (i2.localParticipant.activeDeviceMap.set(t3, "audiooutput" === t3 && (null === (u2 = i2.options.audioOutput) || void 0 === u2 ? void 0 : u2.deviceId) || n3), i2.emit(e.RoomEvent.ActiveDeviceChanged, t3, n3)), p2;
              }();
            });
          }
          setupLocalParticipantEvents() {
            this.localParticipant.on(e.ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).on(e.ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).on(e.ParticipantEvent.AttributesChanged, this.onLocalAttributesChanged).on(e.ParticipantEvent.TrackMuted, this.onLocalTrackMuted).on(e.ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).on(e.ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).on(e.ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).on(e.ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).on(e.ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).on(e.ParticipantEvent.AudioStreamAcquired, this.startAudio).on(e.ParticipantEvent.ChatMessage, this.onLocalChatMessageSent).on(e.ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged);
          }
          recreateEngine() {
            var e2;
            null === (e2 = this.engine) || void 0 === e2 || e2.close(), this.engine = void 0, this.isResuming = false, this.remoteParticipants.clear(), this.sidToIdentity.clear(), this.bufferedEvents = [], this.maybeCreateEngine();
          }
          onTrackAdded(t2, n2, i2) {
            if (this.state === e.ConnectionState.Connecting || this.state === e.ConnectionState.Reconnecting) {
              const s3 = () => {
                this.onTrackAdded(t2, n2, i2), o3();
              }, o3 = () => {
                this.off(e.RoomEvent.Reconnected, s3), this.off(e.RoomEvent.Connected, s3), this.off(e.RoomEvent.Disconnected, o3);
              };
              return this.once(e.RoomEvent.Reconnected, s3), this.once(e.RoomEvent.Connected, s3), void this.once(e.RoomEvent.Disconnected, o3);
            }
            if (this.state === e.ConnectionState.Disconnected) return void this.log.warn("skipping incoming track after Room disconnected", this.logContext);
            if ("ended" === t2.readyState) return void this.log.info("skipping incoming track as it already ended", this.logContext);
            const s2 = function(e2) {
              const t3 = e2.split("|");
              return t3.length > 1 ? [t3[0], e2.substr(t3[0].length + 1)] : [e2, ""];
            }(n2.id), o2 = s2[0];
            let r2 = s2[1], a2 = t2.id;
            if (r2 && r2.startsWith("TR") && (a2 = r2), o2 === this.localParticipant.sid) return void this.log.warn("tried to create RemoteParticipant for local participant", this.logContext);
            const c2 = Array.from(this.remoteParticipants.values()).find((e2) => e2.sid === o2);
            if (!c2) return void this.log.error("Tried to add a track for a participant, that's not present. Sid: ".concat(o2), this.logContext);
            let d2;
            this.options.adaptiveStream && (d2 = "object" == typeof this.options.adaptiveStream ? this.options.adaptiveStream : {}), c2.addSubscribedMediaTrack(t2, a2, n2, i2, d2);
          }
          handleDisconnect() {
            let t2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], n2 = arguments.length > 1 ? arguments[1] : void 0;
            var i2;
            if (this.clearConnectionReconcile(), this.isResuming = false, this.bufferedEvents = [], this.transcriptionReceivedTimes.clear(), this.state !== e.ConnectionState.Disconnected) {
              this.regionUrl = void 0;
              try {
                this.remoteParticipants.forEach((e2) => {
                  e2.trackPublications.forEach((t3) => {
                    e2.unpublishTrack(t3.trackSid);
                  });
                }), this.localParticipant.trackPublications.forEach((e2) => {
                  var n3, i3, s2;
                  e2.track && this.localParticipant.unpublishTrack(e2.track, t2), t2 ? (null === (n3 = e2.track) || void 0 === n3 || n3.detach(), null === (i3 = e2.track) || void 0 === i3 || i3.stop()) : null === (s2 = e2.track) || void 0 === s2 || s2.stopMonitor();
                }), this.localParticipant.off(e.ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).off(e.ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).off(e.ParticipantEvent.AttributesChanged, this.onLocalAttributesChanged).off(e.ParticipantEvent.TrackMuted, this.onLocalTrackMuted).off(e.ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).off(e.ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).off(e.ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).off(e.ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).off(e.ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).off(e.ParticipantEvent.AudioStreamAcquired, this.startAudio).off(e.ParticipantEvent.ChatMessage, this.onLocalChatMessageSent).off(e.ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged), this.localParticipant.trackPublications.clear(), this.localParticipant.videoTrackPublications.clear(), this.localParticipant.audioTrackPublications.clear(), this.remoteParticipants.clear(), this.sidToIdentity.clear(), this.activeSpeakers = [], this.audioContext && "boolean" == typeof this.options.webAudioMix && (this.audioContext.close(), this.audioContext = void 0), vo() && (window.removeEventListener("beforeunload", this.onPageLeave), window.removeEventListener("pagehide", this.onPageLeave), window.removeEventListener("freeze", this.onPageLeave), null === (i2 = navigator.mediaDevices) || void 0 === i2 || i2.removeEventListener("devicechange", this.handleDeviceChange));
              } finally {
                this.setAndEmitConnectionState(e.ConnectionState.Disconnected), this.emit(e.RoomEvent.Disconnected, n2);
              }
            }
          }
          handleParticipantDisconnected(t2, n2) {
            var i2;
            this.remoteParticipants.delete(t2), n2 && (n2.trackPublications.forEach((e2) => {
              n2.unpublishTrack(e2.trackSid, true);
            }), this.emit(e.RoomEvent.ParticipantDisconnected, n2), n2.setDisconnected(), null === (i2 = this.localParticipant) || void 0 === i2 || i2.handleParticipantDisconnected(n2.identity));
          }
          handleStreamHeader(e2, t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2;
              if ("byteHeader" === e2.contentHeader.case) {
                const i2 = this.byteStreamHandlers.get(e2.topic);
                if (!i2) return void this.log.debug("ignoring incoming byte stream due to no handler for topic", e2.topic);
                let s2;
                const o2 = { id: e2.streamId, name: null !== (n2 = e2.contentHeader.value.name) && void 0 !== n2 ? n2 : "unknown", mimeType: e2.mimeType, size: e2.totalLength ? Number(e2.totalLength) : void 0, topic: e2.topic, timestamp: Uo(e2.timestamp), attributes: e2.attributes }, r2 = new ReadableStream({ start: (t3) => {
                  s2 = t3, this.byteStreamControllers.set(e2.streamId, { info: o2, controller: s2, startTime: Date.now() });
                } });
                i2(new Ta(o2, r2, Uo(e2.totalLength)), { identity: t2 });
              } else if ("textHeader" === e2.contentHeader.case) {
                const n3 = this.textStreamHandlers.get(e2.topic);
                if (!n3) return void this.log.debug("ignoring incoming text stream due to no handler for topic", e2.topic);
                let i2;
                const s2 = { id: e2.streamId, mimeType: e2.mimeType, size: e2.totalLength ? Number(e2.totalLength) : void 0, topic: e2.topic, timestamp: Number(e2.timestamp), attributes: e2.attributes }, o2 = new ReadableStream({ start: (t3) => {
                  i2 = t3, this.textStreamControllers.set(e2.streamId, { info: s2, controller: i2, startTime: Date.now() });
                } });
                n3(new Ca(s2, o2, Uo(e2.totalLength)), { identity: t2 });
              }
            });
          }
          handleStreamChunk(e2) {
            const t2 = this.byteStreamControllers.get(e2.streamId);
            t2 && e2.content.length > 0 && t2.controller.enqueue(e2);
            const n2 = this.textStreamControllers.get(e2.streamId);
            n2 && e2.content.length > 0 && n2.controller.enqueue(e2);
          }
          handleStreamTrailer(e2) {
            const t2 = this.textStreamControllers.get(e2.streamId);
            t2 && (t2.info.attributes = Object.assign(Object.assign({}, t2.info.attributes), e2.attributes), t2.controller.close(), this.textStreamControllers.delete(e2.streamId));
            const n2 = this.byteStreamControllers.get(e2.streamId);
            n2 && (n2.info.attributes = Object.assign(Object.assign({}, n2.info.attributes), e2.attributes), n2.controller.close(), this.byteStreamControllers.delete(e2.streamId));
          }
          acquireAudioContext() {
            return Xn(this, void 0, void 0, function* () {
              var t2, n2;
              if ("boolean" != typeof this.options.webAudioMix && this.options.webAudioMix.audioContext ? this.audioContext = this.options.webAudioMix.audioContext : this.audioContext && "closed" !== this.audioContext.state || (this.audioContext = null !== (t2 = Zo()) && void 0 !== t2 ? t2 : void 0), this.options.webAudioMix && this.remoteParticipants.forEach((e2) => e2.setAudioContext(this.audioContext)), this.localParticipant.setAudioContext(this.audioContext), this.audioContext && "suspended" === this.audioContext.state) try {
                yield Promise.race([this.audioContext.resume(), io(200)]);
              } catch (e2) {
                this.log.warn("Could not resume audio context", Object.assign(Object.assign({}, this.logContext), { error: e2 }));
              }
              const i2 = "running" === (null === (n2 = this.audioContext) || void 0 === n2 ? void 0 : n2.state);
              i2 !== this.canPlaybackAudio && (this.audioEnabled = i2, this.emit(e.RoomEvent.AudioPlaybackStatusChanged, i2));
            });
          }
          createParticipant(e2, t2) {
            var n2;
            let i2;
            return i2 = t2 ? Ba.fromParticipantInfo(this.engine.client, t2, { loggerContextCb: () => this.logContext, loggerName: this.options.loggerName }) : new Ba(this.engine.client, "", e2, void 0, void 0, void 0, { loggerContextCb: () => this.logContext, loggerName: this.options.loggerName }), this.options.webAudioMix && i2.setAudioContext(this.audioContext), (null === (n2 = this.options.audioOutput) || void 0 === n2 ? void 0 : n2.deviceId) && i2.setAudioOutput(this.options.audioOutput).catch((e3) => this.log.warn("Could not set audio output: ".concat(e3.message), this.logContext)), i2;
          }
          getOrCreateParticipant(t2, n2) {
            if (this.remoteParticipants.has(t2)) {
              const e2 = this.remoteParticipants.get(t2);
              if (n2) {
                e2.updateInfo(n2) && this.sidToIdentity.set(n2.sid, n2.identity);
              }
              return e2;
            }
            const i2 = this.createParticipant(t2, n2);
            return this.remoteParticipants.set(t2, i2), this.sidToIdentity.set(n2.sid, n2.identity), this.emitWhenConnected(e.RoomEvent.ParticipantConnected, i2), i2.on(e.ParticipantEvent.TrackPublished, (t3) => {
              this.emitWhenConnected(e.RoomEvent.TrackPublished, t3, i2);
            }).on(e.ParticipantEvent.TrackSubscribed, (t3, n3) => {
              t3.kind === Hs.Kind.Audio ? (t3.on(e.TrackEvent.AudioPlaybackStarted, this.handleAudioPlaybackStarted), t3.on(e.TrackEvent.AudioPlaybackFailed, this.handleAudioPlaybackFailed)) : t3.kind === Hs.Kind.Video && (t3.on(e.TrackEvent.VideoPlaybackFailed, this.handleVideoPlaybackFailed), t3.on(e.TrackEvent.VideoPlaybackStarted, this.handleVideoPlaybackStarted)), this.emit(e.RoomEvent.TrackSubscribed, t3, n3, i2);
            }).on(e.ParticipantEvent.TrackUnpublished, (t3) => {
              this.emit(e.RoomEvent.TrackUnpublished, t3, i2);
            }).on(e.ParticipantEvent.TrackUnsubscribed, (t3, n3) => {
              this.emit(e.RoomEvent.TrackUnsubscribed, t3, n3, i2);
            }).on(e.ParticipantEvent.TrackMuted, (t3) => {
              this.emitWhenConnected(e.RoomEvent.TrackMuted, t3, i2);
            }).on(e.ParticipantEvent.TrackUnmuted, (t3) => {
              this.emitWhenConnected(e.RoomEvent.TrackUnmuted, t3, i2);
            }).on(e.ParticipantEvent.ParticipantMetadataChanged, (t3) => {
              this.emitWhenConnected(e.RoomEvent.ParticipantMetadataChanged, t3, i2);
            }).on(e.ParticipantEvent.ParticipantNameChanged, (t3) => {
              this.emitWhenConnected(e.RoomEvent.ParticipantNameChanged, t3, i2);
            }).on(e.ParticipantEvent.AttributesChanged, (t3) => {
              this.emitWhenConnected(e.RoomEvent.ParticipantAttributesChanged, t3, i2);
            }).on(e.ParticipantEvent.ConnectionQualityChanged, (t3) => {
              this.emitWhenConnected(e.RoomEvent.ConnectionQualityChanged, t3, i2);
            }).on(e.ParticipantEvent.ParticipantPermissionsChanged, (t3) => {
              this.emitWhenConnected(e.RoomEvent.ParticipantPermissionsChanged, t3, i2);
            }).on(e.ParticipantEvent.TrackSubscriptionStatusChanged, (t3, n3) => {
              this.emitWhenConnected(e.RoomEvent.TrackSubscriptionStatusChanged, t3, n3, i2);
            }).on(e.ParticipantEvent.TrackSubscriptionFailed, (t3, n3) => {
              this.emit(e.RoomEvent.TrackSubscriptionFailed, t3, i2, n3);
            }).on(e.ParticipantEvent.TrackSubscriptionPermissionChanged, (t3, n3) => {
              this.emitWhenConnected(e.RoomEvent.TrackSubscriptionPermissionChanged, t3, n3, i2);
            }).on(e.ParticipantEvent.Active, () => {
              this.emitWhenConnected(e.RoomEvent.ParticipantActive, i2);
            }), n2 && i2.updateInfo(n2), i2;
          }
          sendSyncState() {
            const e2 = Array.from(this.remoteParticipants.values()).reduce((e3, t3) => (e3.push(...t3.getTrackPublications()), e3), []), t2 = this.localParticipant.getTrackPublications();
            this.engine.sendSyncState(e2, t2);
          }
          updateSubscriptions() {
            for (const e2 of this.remoteParticipants.values()) for (const t2 of e2.videoTrackPublications.values()) t2.isSubscribed && Ho(t2) && t2.emitTrackUpdate();
          }
          getRemoteParticipantBySid(e2) {
            const t2 = this.sidToIdentity.get(e2);
            if (t2) return this.remoteParticipants.get(t2);
          }
          registerConnectionReconcile() {
            this.clearConnectionReconcile();
            let e2 = 0;
            this.connectionReconcileInterval = Ks.setInterval(() => {
              this.engine && !this.engine.isClosed && this.engine.verifyTransport() ? e2 = 0 : (e2++, this.log.warn("detected connection state mismatch", Object.assign(Object.assign({}, this.logContext), { numFailures: e2, engine: this.engine ? { closed: this.engine.isClosed, transportsConnected: this.engine.verifyTransport() } : void 0 })), e2 >= 3 && (this.recreateEngine(), this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, $e.STATE_MISMATCH)));
            }, 4e3);
          }
          clearConnectionReconcile() {
            this.connectionReconcileInterval && Ks.clearInterval(this.connectionReconcileInterval);
          }
          setAndEmitConnectionState(t2) {
            return t2 !== this.state && (this.state = t2, this.emit(e.RoomEvent.ConnectionStateChanged, this.state), true);
          }
          emitBufferedEvents() {
            this.bufferedEvents.forEach((e2) => {
              let [t2, n2] = e2;
              this.emit(t2, ...n2);
            }), this.bufferedEvents = [];
          }
          emitWhenConnected(t2) {
            for (var n2 = arguments.length, i2 = new Array(n2 > 1 ? n2 - 1 : 0), s2 = 1; s2 < n2; s2++) i2[s2 - 1] = arguments[s2];
            if (this.state === e.ConnectionState.Reconnecting || this.isResuming || !this.engine || this.engine.pendingReconnect) this.bufferedEvents.push([t2, i2]);
            else if (this.state === e.ConnectionState.Connected) return this.emit(t2, ...i2);
            return false;
          }
          simulateParticipants(t2) {
            return Xn(this, void 0, void 0, function* () {
              var n2, i2;
              const s2 = Object.assign({ audio: true, video: true, useRealTracks: false }, t2.publish), o2 = Object.assign({ count: 9, audio: false, video: true, aspectRatios: [1.66, 1.7, 1.3] }, t2.participants);
              if (this.handleDisconnect(), this.roomInfo = new it({ sid: "RM_SIMULATED", name: "simulated-room", emptyTimeout: 0, maxParticipants: 0, creationTime: x.parse((/* @__PURE__ */ new Date()).getTime()), metadata: "", numParticipants: 1, numPublishers: 1, turnPassword: "", enabledCodecs: [], activeRecording: false }), this.localParticipant.updateInfo(new rt({ identity: "simulated-local", name: "local-name" })), this.setupLocalParticipantEvents(), this.emit(e.RoomEvent.SignalConnected), this.emit(e.RoomEvent.Connected), this.setAndEmitConnectionState(e.ConnectionState.Connected), s2.video) {
                const t3 = new Na(Hs.Kind.Video, new ht({ source: Qe.CAMERA, sid: Math.floor(1e4 * Math.random()).toString(), type: Je.AUDIO, name: "video-dummy" }), new da(s2.useRealTracks ? (yield window.navigator.mediaDevices.getUserMedia({ video: true })).getVideoTracks()[0] : xo(160 * (null !== (n2 = o2.aspectRatios[0]) && void 0 !== n2 ? n2 : 1), 160, true, true), void 0, false, { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext }), { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext });
                this.localParticipant.addTrackPublication(t3), this.localParticipant.emit(e.ParticipantEvent.LocalTrackPublished, t3);
              }
              if (s2.audio) {
                const t3 = new Na(Hs.Kind.Audio, new ht({ source: Qe.MICROPHONE, sid: Math.floor(1e4 * Math.random()).toString(), type: Je.AUDIO }), new Yr(s2.useRealTracks ? (yield navigator.mediaDevices.getUserMedia({ audio: true })).getAudioTracks()[0] : Mo(), void 0, false, this.audioContext, { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext }), { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext });
                this.localParticipant.addTrackPublication(t3), this.localParticipant.emit(e.ParticipantEvent.LocalTrackPublished, t3);
              }
              for (let e2 = 0; e2 < o2.count - 1; e2 += 1) {
                let t3 = new rt({ sid: Math.floor(1e4 * Math.random()).toString(), identity: "simulated-".concat(e2), state: at.ACTIVE, tracks: [], joinedAt: x.parse(Date.now()) });
                const n3 = this.getOrCreateParticipant(t3.identity, t3);
                if (o2.video) {
                  const s3 = xo(160 * (null !== (i2 = o2.aspectRatios[e2 % o2.aspectRatios.length]) && void 0 !== i2 ? i2 : 1), 160, false, true), r2 = new ht({ source: Qe.CAMERA, sid: Math.floor(1e4 * Math.random()).toString(), type: Je.AUDIO });
                  n3.addSubscribedMediaTrack(s3, r2.sid, new MediaStream([s3]), new RTCRtpReceiver()), t3.tracks = [...t3.tracks, r2];
                }
                if (o2.audio) {
                  const e3 = Mo(), i3 = new ht({ source: Qe.MICROPHONE, sid: Math.floor(1e4 * Math.random()).toString(), type: Je.AUDIO });
                  n3.addSubscribedMediaTrack(e3, i3.sid, new MediaStream([e3]), new RTCRtpReceiver()), t3.tracks = [...t3.tracks, i3];
                }
                n3.updateInfo(t3);
              }
            });
          }
          emit(t2) {
            for (var n2 = arguments.length, i2 = new Array(n2 > 1 ? n2 - 1 : 0), s2 = 1; s2 < n2; s2++) i2[s2 - 1] = arguments[s2];
            if (t2 !== e.RoomEvent.ActiveSpeakersChanged && t2 !== e.RoomEvent.TranscriptionReceived) {
              const e2 = Ka(i2).filter((e3) => void 0 !== e3);
              this.log.debug("room event ".concat(t2), Object.assign(Object.assign({}, this.logContext), { event: t2, args: e2 }));
            }
            return super.emit(t2, ...i2);
          }
        }
        function Ka(e2) {
          return e2.map((e3) => {
            if (e3) return Array.isArray(e3) ? Ka(e3) : "object" == typeof e3 ? "logContext" in e3 ? e3.logContext : void 0 : e3;
          });
        }
        var Wa;
        qa.cleanupRegistry = "undefined" != typeof FinalizationRegistry && new FinalizationRegistry((e2) => {
          e2();
        }), e.CheckStatus = void 0, (Wa = e.CheckStatus || (e.CheckStatus = {}))[Wa.IDLE = 0] = "IDLE", Wa[Wa.RUNNING = 1] = "RUNNING", Wa[Wa.SKIPPED = 2] = "SKIPPED", Wa[Wa.SUCCESS = 3] = "SUCCESS", Wa[Wa.FAILED = 4] = "FAILED";
        class Ha extends ni.EventEmitter {
          constructor(t2, n2) {
            let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            super(), this.status = e.CheckStatus.IDLE, this.logs = [], this.options = {}, this.url = t2, this.token = n2, this.name = this.constructor.name, this.room = new qa(i2.roomOptions), this.connectOptions = i2.connectOptions, this.options = i2;
          }
          run(t2) {
            return Xn(this, void 0, void 0, function* () {
              if (this.status !== e.CheckStatus.IDLE) throw Error("check is running already");
              this.setStatus(e.CheckStatus.RUNNING);
              try {
                yield this.perform();
              } catch (e2) {
                e2 instanceof Error && (this.options.errorsAsWarnings ? this.appendWarning(e2.message) : this.appendError(e2.message));
              }
              return yield this.disconnect(), yield new Promise((e2) => setTimeout(e2, 500)), this.status !== e.CheckStatus.SKIPPED && this.setStatus(this.isSuccess() ? e.CheckStatus.SUCCESS : e.CheckStatus.FAILED), t2 && t2(), this.getInfo();
            });
          }
          isSuccess() {
            return !this.logs.some((e2) => "error" === e2.level);
          }
          connect(t2) {
            return Xn(this, void 0, void 0, function* () {
              return this.room.state === e.ConnectionState.Connected || (t2 || (t2 = this.url), yield this.room.connect(t2, this.token, this.connectOptions)), this.room;
            });
          }
          disconnect() {
            return Xn(this, void 0, void 0, function* () {
              this.room && this.room.state !== e.ConnectionState.Disconnected && (yield this.room.disconnect(), yield new Promise((e2) => setTimeout(e2, 500)));
            });
          }
          skip() {
            this.setStatus(e.CheckStatus.SKIPPED);
          }
          switchProtocol(t2) {
            return Xn(this, void 0, void 0, function* () {
              let n2 = false, i2 = false;
              if (this.room.on(e.RoomEvent.Reconnecting, () => {
                n2 = true;
              }), this.room.once(e.RoomEvent.Reconnected, () => {
                i2 = true;
              }), this.room.simulateScenario("force-".concat(t2)), yield new Promise((e2) => setTimeout(e2, 1e3)), !n2) return;
              const s2 = Date.now() + 1e4;
              for (; Date.now() < s2; ) {
                if (i2) return;
                yield io(100);
              }
              throw new Error("Could not reconnect using ".concat(t2, " protocol after 10 seconds"));
            });
          }
          appendMessage(e2) {
            this.logs.push({ level: "info", message: e2 }), this.emit("update", this.getInfo());
          }
          appendWarning(e2) {
            this.logs.push({ level: "warning", message: e2 }), this.emit("update", this.getInfo());
          }
          appendError(e2) {
            this.logs.push({ level: "error", message: e2 }), this.emit("update", this.getInfo());
          }
          setStatus(e2) {
            this.status = e2, this.emit("update", this.getInfo());
          }
          get engine() {
            var e2;
            return null === (e2 = this.room) || void 0 === e2 ? void 0 : e2.engine;
          }
          getInfo() {
            return { logs: this.logs, name: this.name, status: this.status, description: this.description };
          }
        }
        class Ga extends Ha {
          get description() {
            return "Cloud regions";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              const e2 = new ba(this.url, this.token);
              if (!e2.isCloud()) return void this.skip();
              const t2 = [], n2 = /* @__PURE__ */ new Set();
              for (let i3 = 0; i3 < 3; i3++) {
                const i4 = yield e2.getNextBestRegionUrl();
                if (!i4) break;
                if (n2.has(i4)) continue;
                n2.add(i4);
                const s2 = yield this.checkCloudRegion(i4);
                this.appendMessage("".concat(s2.region, " RTT: ").concat(s2.rtt, "ms, duration: ").concat(s2.duration, "ms")), t2.push(s2);
              }
              t2.sort((e3, t3) => 0.5 * (e3.duration - t3.duration) + 0.5 * (e3.rtt - t3.rtt));
              const i2 = t2[0];
              this.bestStats = i2, this.appendMessage("best Cloud region: ".concat(i2.region));
            });
          }
          getInfo() {
            const e2 = super.getInfo();
            return e2.data = this.bestStats, e2;
          }
          checkCloudRegion(e2) {
            return Xn(this, void 0, void 0, function* () {
              var t2, n2;
              yield this.connect(e2), "tcp" === this.options.protocol && (yield this.switchProtocol("tcp"));
              const i2 = null === (t2 = this.room.serverInfo) || void 0 === t2 ? void 0 : t2.region;
              if (!i2) throw new Error("Region not found");
              const s2 = yield this.room.localParticipant.streamText({ topic: "test" }), o2 = "A".repeat(1e3), r2 = Date.now();
              for (let e3 = 0; e3 < 1e3; e3++) yield s2.write(o2);
              yield s2.close();
              const a2 = Date.now(), c2 = yield null === (n2 = this.room.engine.pcManager) || void 0 === n2 ? void 0 : n2.publisher.getStats(), d2 = { region: i2, rtt: 1e4, duration: a2 - r2 };
              return null == c2 || c2.forEach((e3) => {
                "candidate-pair" === e3.type && e3.nominated && (d2.rtt = 1e3 * e3.currentRoundTripTime);
              }), yield this.disconnect(), d2;
            });
          }
        }
        const za = 1e4;
        class Ja extends Ha {
          get description() {
            return "Connection via UDP vs TCP";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              const e2 = yield this.checkConnectionProtocol("udp"), t2 = yield this.checkConnectionProtocol("tcp");
              this.bestStats = e2, e2.qualityLimitationDurations.bandwidth - t2.qualityLimitationDurations.bandwidth > 0.5 || (e2.packetsLost - t2.packetsLost) / e2.packetsSent > 0.01 ? (this.appendMessage("best connection quality via tcp"), this.bestStats = t2) : this.appendMessage("best connection quality via udp");
              const n2 = this.bestStats;
              this.appendMessage("upstream bitrate: ".concat((n2.bitrateTotal / n2.count / 1e3 / 1e3).toFixed(2), " mbps")), this.appendMessage("RTT: ".concat((n2.rttTotal / n2.count * 1e3).toFixed(2), " ms")), this.appendMessage("jitter: ".concat((n2.jitterTotal / n2.count * 1e3).toFixed(2), " ms")), n2.packetsLost > 0 && this.appendWarning("packets lost: ".concat((n2.packetsLost / n2.packetsSent * 100).toFixed(2), "%")), n2.qualityLimitationDurations.bandwidth > 1 && this.appendWarning("bandwidth limited ".concat((n2.qualityLimitationDurations.bandwidth / 10 * 100).toFixed(2), "%")), n2.qualityLimitationDurations.cpu > 0 && this.appendWarning("cpu limited ".concat((n2.qualityLimitationDurations.cpu / 10 * 100).toFixed(2), "%"));
            });
          }
          getInfo() {
            const e2 = super.getInfo();
            return e2.data = this.bestStats, e2;
          }
          checkConnectionProtocol(e2) {
            return Xn(this, void 0, void 0, function* () {
              yield this.connect(), "tcp" === e2 ? yield this.switchProtocol("tcp") : yield this.switchProtocol("udp");
              const t2 = document.createElement("canvas");
              t2.width = 1280, t2.height = 720;
              const n2 = t2.getContext("2d");
              if (!n2) throw new Error("Could not get canvas context");
              let i2 = 0;
              const s2 = () => {
                i2 = (i2 + 1) % 360, n2.fillStyle = "hsl(".concat(i2, ", 100%, 50%)"), n2.fillRect(0, 0, t2.width, t2.height), requestAnimationFrame(s2);
              };
              s2();
              const o2 = t2.captureStream(30).getVideoTracks()[0], r2 = (yield this.room.localParticipant.publishTrack(o2, { simulcast: false, degradationPreference: "maintain-resolution", videoEncoding: { maxBitrate: 2e6 } })).track, a2 = { protocol: e2, packetsLost: 0, packetsSent: 0, qualityLimitationDurations: {}, rttTotal: 0, jitterTotal: 0, bitrateTotal: 0, count: 0 }, c2 = setInterval(() => Xn(this, void 0, void 0, function* () {
                const e3 = yield r2.getRTCStatsReport();
                null == e3 || e3.forEach((e4) => {
                  "outbound-rtp" === e4.type ? (a2.packetsSent = e4.packetsSent, a2.qualityLimitationDurations = e4.qualityLimitationDurations, a2.bitrateTotal += e4.targetBitrate, a2.count++) : "remote-inbound-rtp" === e4.type && (a2.packetsLost = e4.packetsLost, a2.rttTotal += e4.roundTripTime, a2.jitterTotal += e4.jitter);
                });
              }), 1e3);
              return yield new Promise((e3) => setTimeout(e3, za)), clearInterval(c2), o2.stop(), t2.remove(), yield this.disconnect(), a2;
            });
          }
        }
        class Qa extends Ha {
          get description() {
            return "Can publish audio";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              const t2 = yield this.connect(), n2 = yield La();
              if (yield Xo(n2, 1e3)) throw new Error("unable to detect audio from microphone");
              this.appendMessage("detected audio from microphone"), t2.localParticipant.publishTrack(n2), yield new Promise((e3) => setTimeout(e3, 3e3));
              const i2 = yield null === (e2 = n2.sender) || void 0 === e2 ? void 0 : e2.getStats();
              if (!i2) throw new Error("Could not get RTCStats");
              let s2 = 0;
              if (i2.forEach((e3) => {
                "outbound-rtp" !== e3.type || "audio" !== e3.kind && (e3.kind || "audio" !== e3.mediaType) || (s2 = e3.packetsSent);
              }), 0 === s2) throw new Error("Could not determine packets are sent");
              this.appendMessage("published ".concat(s2, " audio packets"));
            });
          }
        }
        class Ya extends Ha {
          get description() {
            return "Can publish video";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              var e2;
              const t2 = yield this.connect(), n2 = yield Aa();
              yield this.checkForVideo(n2.mediaStreamTrack), t2.localParticipant.publishTrack(n2), yield new Promise((e3) => setTimeout(e3, 5e3));
              const i2 = yield null === (e2 = n2.sender) || void 0 === e2 ? void 0 : e2.getStats();
              if (!i2) throw new Error("Could not get RTCStats");
              let s2 = 0;
              if (i2.forEach((e3) => {
                "outbound-rtp" !== e3.type || "video" !== e3.kind && (e3.kind || "video" !== e3.mediaType) || (s2 += e3.packetsSent);
              }), 0 === s2) throw new Error("Could not determine packets are sent");
              this.appendMessage("published ".concat(s2, " video packets"));
            });
          }
          checkForVideo(e2) {
            return Xn(this, void 0, void 0, function* () {
              const t2 = new MediaStream();
              t2.addTrack(e2.clone());
              const n2 = document.createElement("video");
              n2.srcObject = t2, n2.muted = true, yield new Promise((t3) => {
                n2.onplay = () => {
                  setTimeout(() => {
                    var i2, s2, o2, r2;
                    const a2 = document.createElement("canvas"), c2 = e2.getSettings(), d2 = null !== (s2 = null !== (i2 = c2.width) && void 0 !== i2 ? i2 : n2.videoWidth) && void 0 !== s2 ? s2 : 1280, l2 = null !== (r2 = null !== (o2 = c2.height) && void 0 !== o2 ? o2 : n2.videoHeight) && void 0 !== r2 ? r2 : 720;
                    a2.width = d2, a2.height = l2;
                    const u2 = a2.getContext("2d");
                    u2.drawImage(n2, 0, 0);
                    const h2 = u2.getImageData(0, 0, a2.width, a2.height).data;
                    let p2 = true;
                    for (let e3 = 0; e3 < h2.length; e3 += 4) if (0 !== h2[e3] || 0 !== h2[e3 + 1] || 0 !== h2[e3 + 2]) {
                      p2 = false;
                      break;
                    }
                    p2 ? this.appendError("camera appears to be producing only black frames") : this.appendMessage("received video frames"), t3();
                  }, 1e3);
                }, n2.play();
              }), n2.remove();
            });
          }
        }
        class Xa extends Ha {
          get description() {
            return "Resuming connection after interruption";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              var t2;
              const n2 = yield this.connect();
              let i2, s2 = false, o2 = false;
              const r2 = new Promise((e2) => {
                setTimeout(e2, 5e3), i2 = e2;
              }), a2 = () => {
                s2 = true;
              };
              n2.on(e.RoomEvent.SignalReconnecting, a2).on(e.RoomEvent.Reconnecting, a2).on(e.RoomEvent.Reconnected, () => {
                o2 = true, i2(true);
              }), null === (t2 = n2.engine.client.ws) || void 0 === t2 || t2.close();
              const c2 = n2.engine.client.onClose;
              if (c2 && c2(""), yield r2, !s2) throw new Error("Did not attempt to reconnect");
              if (!o2 || n2.state !== e.ConnectionState.Connected) throw this.appendWarning("reconnection is only possible in Redis-based configurations"), new Error("Not able to reconnect");
            });
          }
        }
        class Za extends Ha {
          get description() {
            return "Can connect via TURN";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              var e2, t2;
              const n2 = new mr(), i2 = yield n2.join(this.url, this.token, { autoSubscribe: true, maxRetries: 0, e2eeEnabled: false, websocketTimeout: 15e3 });
              let s2 = false, o2 = false, r2 = false;
              for (let e3 of i2.iceServers) for (let t3 of e3.urls) t3.startsWith("turn:") ? (o2 = true, r2 = true) : t3.startsWith("turns:") && (o2 = true, r2 = true, s2 = true), t3.startsWith("stun:") && (r2 = true);
              r2 ? o2 && !s2 && this.appendWarning("TURN is configured server side, but TURN/TLS is unavailable.") : this.appendWarning("No STUN servers configured on server side."), yield n2.close(), (null === (t2 = null === (e2 = this.connectOptions) || void 0 === e2 ? void 0 : e2.rtcConfig) || void 0 === t2 ? void 0 : t2.iceServers) || o2 ? yield this.room.connect(this.url, this.token, { rtcConfig: { iceTransportPolicy: "relay" } }) : (this.appendWarning("No TURN servers configured."), this.skip(), yield new Promise((e3) => setTimeout(e3, 0)));
            });
          }
        }
        class $a extends Ha {
          get description() {
            return "Establishing WebRTC connection";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              let t2 = false, n2 = false;
              this.room.on(e.RoomEvent.SignalConnected, () => {
                const e2 = this.room.engine.client.onTrickle;
                this.room.engine.client.onTrickle = (i2, s2) => {
                  if (i2.candidate) {
                    const e3 = new RTCIceCandidate(i2);
                    let s3 = "".concat(e3.protocol, " ").concat(e3.address, ":").concat(e3.port, " ").concat(e3.type);
                    e3.address && (!function(e4) {
                      const t3 = e4.split(".");
                      if (4 === t3.length) {
                        if ("10" === t3[0]) return true;
                        if ("192" === t3[0] && "168" === t3[1]) return true;
                        if ("172" === t3[0]) {
                          const e5 = parseInt(t3[1], 10);
                          if (e5 >= 16 && e5 <= 31) return true;
                        }
                      }
                      return false;
                    }(e3.address) ? "tcp" === e3.protocol && "passive" === e3.tcpType ? (t2 = true, s3 += " (passive)") : "udp" === e3.protocol && (n2 = true) : s3 += " (private)"), this.appendMessage(s3);
                  }
                  e2 && e2(i2, s2);
                }, this.room.engine.pcManager && (this.room.engine.pcManager.subscriber.onIceCandidateError = (e3) => {
                  e3 instanceof RTCPeerConnectionIceErrorEvent && this.appendWarning("error with ICE candidate: ".concat(e3.errorCode, " ").concat(e3.errorText, " ").concat(e3.url));
                });
              });
              try {
                yield this.connect(), Wn.info("now the room is connected");
              } catch (e2) {
                throw this.appendWarning("ports need to be open on firewall in order to connect."), e2;
              }
              t2 || this.appendWarning("Server is not configured for ICE/TCP"), n2 || this.appendWarning("No public IPv4 UDP candidates were found. Your server is likely not configured correctly");
            });
          }
        }
        class ec extends Ha {
          get description() {
            return "Connecting to signal connection via WebSocket";
          }
          perform() {
            return Xn(this, void 0, void 0, function* () {
              var e2, t2, n2;
              (this.url.startsWith("ws:") || this.url.startsWith("http:")) && this.appendWarning("Server is insecure, clients may block connections to it");
              let i2 = new mr();
              const s2 = yield i2.join(this.url, this.token, { autoSubscribe: true, maxRetries: 0, e2eeEnabled: false, websocketTimeout: 15e3 });
              this.appendMessage("Connected to server, version ".concat(s2.serverVersion, ".")), (null === (e2 = s2.serverInfo) || void 0 === e2 ? void 0 : e2.edition) === Ot.Cloud && (null === (t2 = s2.serverInfo) || void 0 === t2 ? void 0 : t2.region) && this.appendMessage("LiveKit Cloud: ".concat(null === (n2 = s2.serverInfo) || void 0 === n2 ? void 0 : n2.region)), yield i2.close();
            });
          }
        }
        class tc extends ni.EventEmitter {
          constructor(e2, t2) {
            let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            super(), this.options = {}, this.checkResults = /* @__PURE__ */ new Map(), this.url = e2, this.token = t2, this.options = n2;
          }
          getNextCheckId() {
            const t2 = this.checkResults.size;
            return this.checkResults.set(t2, { logs: [], status: e.CheckStatus.IDLE, name: "", description: "" }), t2;
          }
          updateCheck(e2, t2) {
            this.checkResults.set(e2, t2), this.emit("checkUpdate", e2, t2);
          }
          isSuccess() {
            return Array.from(this.checkResults.values()).every((t2) => t2.status !== e.CheckStatus.FAILED);
          }
          getResults() {
            return Array.from(this.checkResults.values());
          }
          createAndRunCheck(e2) {
            return Xn(this, void 0, void 0, function* () {
              const t2 = this.getNextCheckId(), n2 = new e2(this.url, this.token, this.options), i2 = (e3) => {
                this.updateCheck(t2, e3);
              };
              n2.on("update", i2);
              const s2 = yield n2.run();
              return n2.off("update", i2), s2;
            });
          }
          checkWebsocket() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck(ec);
            });
          }
          checkWebRTC() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck($a);
            });
          }
          checkTURN() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck(Za);
            });
          }
          checkReconnect() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck(Xa);
            });
          }
          checkPublishAudio() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck(Qa);
            });
          }
          checkPublishVideo() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck(Ya);
            });
          }
          checkConnectionProtocol() {
            return Xn(this, void 0, void 0, function* () {
              const e2 = yield this.createAndRunCheck(Ja);
              if (e2.data && "protocol" in e2.data) {
                const t2 = e2.data;
                this.options.protocol = t2.protocol;
              }
              return e2;
            });
          }
          checkCloudRegion() {
            return Xn(this, void 0, void 0, function* () {
              return this.createAndRunCheck(Ga);
            });
          }
        }
        const nc = /* @__PURE__ */ new Map([["obs virtual camera", { facingMode: "environment", confidence: "medium" }]]), ic = /* @__PURE__ */ new Map([["iphone", { facingMode: "environment", confidence: "medium" }], ["ipad", { facingMode: "environment", confidence: "medium" }]]);
        function sc(e2) {
          var t2;
          const n2 = e2.trim().toLowerCase();
          if ("" !== n2) return nc.has(n2) ? nc.get(n2) : null === (t2 = Array.from(ic.entries()).find((e3) => {
            let [t3] = e3;
            return n2.includes(t3);
          })) || void 0 === t2 ? void 0 : t2[1];
        }
        e.BaseKeyProvider = bs, e.Checker = Ha, e.ConnectionCheck = tc, e.ConnectionError = Is, e.CriticalTimers = Ks, e.CryptorError = class extends ys {
          constructor(t2) {
            let n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e.CryptorErrorReason.InternalError, i2 = arguments.length > 2 ? arguments[2] : void 0;
            super(40, t2), this.reason = n2, this.participantIdentity = i2;
          }
        }, e.DataPacket_Kind = gt, e.DefaultReconnectPolicy = Yn, e.DeviceUnsupportedError = Os, e.DisconnectReason = $e, e.ExternalE2EEKeyProvider = class extends bs {
          constructor() {
            let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            super(Object.assign(Object.assign({}, e2), { sharedKey: true, ratchetWindowSize: 0, failureTolerance: -1 }));
          }
          setKey(e2) {
            return Xn(this, void 0, void 0, function* () {
              const t2 = "string" == typeof e2 ? yield vs(e2) : yield fs(e2);
              this.onSetEncryptionKey(t2);
            });
          }
        }, e.LivekitError = ys, e.LocalAudioTrack = Yr, e.LocalParticipant = ja, e.LocalTrack = Qr, e.LocalTrackPublication = Na, e.LocalVideoTrack = da, e.Mutex = s, e.NegotiationError = Ns, e.Participant = Ua, e.ParticipantKind = ct, e.PublishDataError = class extends ys {
          constructor(e2) {
            super(14, null != e2 ? e2 : "unable to publish data"), this.name = "PublishDataError";
          }
        }, e.PublishTrackError = _s, e.RemoteAudioTrack = Ra, e.RemoteParticipant = Ba, e.RemoteTrack = Pa, e.RemoteTrackPublication = Fa, e.RemoteVideoTrack = Ia, e.Room = qa, e.RpcError = Wr, e.ScreenSharePresets = to, e.SignalRequestError = As, e.SubscriptionError = tt, e.Track = Hs, e.TrackInvalidError = Ds, e.TrackPublication = Ma, e.TrackType = Je, e.UnexpectedConnectionState = Ms, e.UnsupportedServer = xs, e.VideoPreset = Js, e.VideoPresets = $s, e.VideoPresets43 = eo, e.attachToElement = Gs, e.compareVersions = Co, e.createAudioAnalyser = function(e2, t2) {
          const n2 = Object.assign({ cloneTrack: false, fftSize: 2048, smoothingTimeConstant: 0.8, minDecibels: -100, maxDecibels: -80 }, t2), i2 = Zo();
          if (!i2) throw new Error("Audio Context not supported on this browser");
          const s2 = n2.cloneTrack ? e2.mediaStreamTrack.clone() : e2.mediaStreamTrack, o2 = i2.createMediaStreamSource(new MediaStream([s2])), r2 = i2.createAnalyser();
          r2.minDecibels = n2.minDecibels, r2.maxDecibels = n2.maxDecibels, r2.fftSize = n2.fftSize, r2.smoothingTimeConstant = n2.smoothingTimeConstant, o2.connect(r2);
          const a2 = new Uint8Array(r2.frequencyBinCount);
          return { calculateVolume: () => {
            r2.getByteFrequencyData(a2);
            let e3 = 0;
            for (const t3 of a2) e3 += Math.pow(t3 / 255, 2);
            return Math.sqrt(e3 / a2.length);
          }, analyser: r2, cleanup: () => Xn(this, void 0, void 0, function* () {
            yield i2.close(), n2.cloneTrack && s2.stop();
          }) };
        }, e.createE2EEKey = function() {
          return window.crypto.getRandomValues(new Uint8Array(32));
        }, e.createKeyMaterialFromBuffer = fs, e.createKeyMaterialFromString = vs, e.createLocalAudioTrack = La, e.createLocalScreenTracks = function(e2) {
          return Xn(this, void 0, void 0, function* () {
            if (void 0 === e2 && (e2 = {}), void 0 !== e2.resolution || mo() || (e2.resolution = to.h1080fps30.resolution), void 0 === navigator.mediaDevices.getDisplayMedia) throw new Os("getDisplayMedia not supported");
            const t2 = tr(e2), n2 = yield navigator.mediaDevices.getDisplayMedia(t2), i2 = n2.getVideoTracks();
            if (0 === i2.length) throw new Ds("no video track found");
            const s2 = new da(i2[0], void 0, false);
            s2.source = Hs.Source.ScreenShare;
            const o2 = [s2];
            if (n2.getAudioTracks().length > 0) {
              const e3 = new Yr(n2.getAudioTracks()[0], void 0, false);
              e3.source = Hs.Source.ScreenShareAudio, o2.push(e3);
            }
            return o2;
          });
        }, e.createLocalTracks = _a, e.createLocalVideoTrack = Aa, e.deriveKeys = function(e2, t2) {
          return Xn(this, void 0, void 0, function* () {
            const n2 = ks(e2.algorithm.name, t2), i2 = yield crypto.subtle.deriveKey(n2, e2, { name: cs, length: 128 }, false, ["encrypt", "decrypt"]);
            return { material: e2, encryptionKey: i2 };
          });
        }, e.detachTrack = zs, e.facingModeFromDeviceLabel = sc, e.facingModeFromLocalTrack = function(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          var n2;
          const i2 = Fo(e2) ? e2.mediaStreamTrack : e2, s2 = i2.getSettings();
          let o2 = { facingMode: null !== (n2 = t2.defaultFacingMode) && void 0 !== n2 ? n2 : "user", confidence: "low" };
          if ("facingMode" in s2) {
            const e3 = s2.facingMode;
            Wn.trace("rawFacingMode", { rawFacingMode: e3 }), e3 && "string" == typeof e3 && function(e4) {
              const t3 = ["user", "environment", "left", "right"];
              return void 0 === e4 || t3.includes(e4);
            }(e3) && (o2 = { facingMode: e3, confidence: "high" });
          }
          if (["low", "medium"].includes(o2.confidence)) {
            Wn.trace("Try to get facing mode from device label: (".concat(i2.label, ")"));
            const e3 = sc(i2.label);
            void 0 !== e3 && (o2 = e3);
          }
          return o2;
        }, e.getBrowser = js, e.getEmptyAudioStreamTrack = Mo, e.getEmptyVideoStreamTrack = function() {
          return Oo || (Oo = xo()), Oo.clone();
        }, e.getLogger = Gn, e.importKey = function(e2) {
          return Xn(this, arguments, void 0, function(e3) {
            let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { name: cs }, n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "encrypt";
            return function* () {
              return crypto.subtle.importKey("raw", e3, t2, false, "derive" === n2 ? ["deriveBits", "deriveKey"] : ["encrypt", "decrypt"]);
            }();
          });
        }, e.isAudioTrack = Bo, e.isBackupCodec = Xs, e.isBrowserSupported = uo, e.isE2EESupported = ps, e.isInsertableStreamSupported = gs, e.isLocalParticipant = zo, e.isLocalTrack = Fo, e.isRemoteParticipant = function(e2) {
          return !e2.isLocal;
        }, e.isRemoteTrack = Wo, e.isScriptTransformSupported = ms, e.isVideoFrame = function(e2) {
          return "type" in e2;
        }, e.isVideoTrack = Vo, e.needsRbspUnescaping = function(e2) {
          for (var t2 = 0; t2 < e2.length - 3; t2++) if (0 == e2[t2] && 0 == e2[t2 + 1] && 3 == e2[t2 + 2]) return true;
          return false;
        }, e.parseRbsp = function(e2) {
          const t2 = [];
          for (var n2 = e2.length, i2 = 0; i2 < e2.length; ) n2 - i2 >= 3 && !e2[i2] && !e2[i2 + 1] && 3 == e2[i2 + 2] ? (t2.push(e2[i2++]), t2.push(e2[i2++]), i2++) : t2.push(e2[i2++]);
          return new Uint8Array(t2);
        }, e.protocolVersion = 16, e.ratchet = function(e2, t2) {
          return Xn(this, void 0, void 0, function* () {
            const n2 = ks(e2.algorithm.name, t2);
            return crypto.subtle.deriveBits(n2, e2, 256);
          });
        }, e.setLogExtension = function(t2, n2) {
          (n2 ? [n2] : Hn).forEach((n3) => {
            const i2 = n3.methodFactory;
            n3.methodFactory = (n4, s2, o2) => {
              const r2 = i2(n4, s2, o2), a2 = e.LogLevel[n4], c2 = a2 >= s2 && a2 < e.LogLevel.silent;
              return (e2, n5) => {
                n5 ? r2(e2, n5) : r2(e2), c2 && t2(a2, e2, n5);
              };
            }, n3.setLevel(n3.getLevel());
          });
        }, e.setLogLevel = function(e2, t2) {
          if (t2) Kn.getLogger(t2).setLevel(e2);
          else for (const t3 of Hn) t3.setLevel(e2);
        }, e.supportsAV1 = ro, e.supportsAdaptiveStream = function() {
          return void 0 !== typeof ResizeObserver && void 0 !== typeof IntersectionObserver;
        }, e.supportsDynacast = function() {
          return so();
        }, e.supportsVP9 = ao, e.version = qs, e.videoCodecs = Ys, e.writeRbsp = function(e2) {
          const t2 = [];
          for (var n2 = 0, i2 = 0; i2 < e2.length; ++i2) {
            var s2 = e2[i2];
            s2 <= 3 && n2 >= 2 && (t2.push(3), n2 = 0), t2.push(s2), 0 == s2 ? ++n2 : n2 = 0;
          }
          return new Uint8Array(t2);
        };
      });
    }
  });

  // node_modules/@livekit/components-react/dist/shared-ChNXN17z.js
  var require_shared_ChNXN17z = __commonJS({
    "node_modules/@livekit/components-react/dist/shared-ChNXN17z.js"(exports) {
      "use strict";
      init_react_shim();
      var f = require_livekit_client_umd();
      var Un = require_react();
      function jn(e) {
        const t = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
        if (e) {
          for (const n in e) if (n !== "default") {
            const r = Object.getOwnPropertyDescriptor(e, n);
            Object.defineProperty(t, n, r.get ? r : { enumerable: true, get: () => e[n] });
          }
        }
        return t.default = e, Object.freeze(t);
      }
      var j = jn(Un);
      var Ie = Math.min;
      var ie = Math.max;
      var Me = Math.round;
      var ke = Math.floor;
      var Y = (e) => ({ x: e, y: e });
      var Wn = { left: "right", right: "left", bottom: "top", top: "bottom" };
      var Bn = { start: "end", end: "start" };
      function xt(e, t, n) {
        return ie(e, Ie(t, n));
      }
      function Be(e, t) {
        return typeof e == "function" ? e(t) : e;
      }
      function oe(e) {
        return e.split("-")[0];
      }
      function Ve(e) {
        return e.split("-")[1];
      }
      function Ht(e) {
        return e === "x" ? "y" : "x";
      }
      function zt(e) {
        return e === "y" ? "height" : "width";
      }
      function de(e) {
        return ["top", "bottom"].includes(oe(e)) ? "y" : "x";
      }
      function Gt(e) {
        return Ht(de(e));
      }
      function Vn(e, t, n) {
        n === void 0 && (n = false);
        const r = Ve(e), i = Gt(e), o = zt(i);
        let a = i === "x" ? r === (n ? "end" : "start") ? "right" : "left" : r === "start" ? "bottom" : "top";
        return t.reference[o] > t.floating[o] && (a = De(a)), [a, De(a)];
      }
      function Hn(e) {
        const t = De(e);
        return [nt(e), t, nt(t)];
      }
      function nt(e) {
        return e.replace(/start|end/g, (t) => Bn[t]);
      }
      function zn(e, t, n) {
        const r = ["left", "right"], i = ["right", "left"], o = ["top", "bottom"], a = ["bottom", "top"];
        switch (e) {
          case "top":
          case "bottom":
            return n ? t ? i : r : t ? r : i;
          case "left":
          case "right":
            return t ? o : a;
          default:
            return [];
        }
      }
      function Gn(e, t, n, r) {
        const i = Ve(e);
        let o = zn(oe(e), n === "start", r);
        return i && (o = o.map((a) => a + "-" + i), t && (o = o.concat(o.map(nt)))), o;
      }
      function De(e) {
        return e.replace(/left|right|bottom|top/g, (t) => Wn[t]);
      }
      function Yn(e) {
        return { top: 0, right: 0, bottom: 0, left: 0, ...e };
      }
      function qn(e) {
        return typeof e != "number" ? Yn(e) : { top: e, right: e, bottom: e, left: e };
      }
      function Ne(e) {
        const { x: t, y: n, width: r, height: i } = e;
        return { width: r, height: i, top: n, left: t, right: t + r, bottom: n + i, x: t, y: n };
      }
      function Tt(e, t, n) {
        let { reference: r, floating: i } = e;
        const o = de(t), a = Gt(t), s = zt(a), c = oe(t), u = o === "y", l = r.x + r.width / 2 - i.width / 2, d = r.y + r.height / 2 - i.height / 2, h = r[s] / 2 - i[s] / 2;
        let p;
        switch (c) {
          case "top":
            p = { x: l, y: r.y - i.height };
            break;
          case "bottom":
            p = { x: l, y: r.y + r.height };
            break;
          case "right":
            p = { x: r.x + r.width, y: d };
            break;
          case "left":
            p = { x: r.x - i.width, y: d };
            break;
          default:
            p = { x: r.x, y: r.y };
        }
        switch (Ve(t)) {
          case "start":
            p[a] -= h * (n && u ? -1 : 1);
            break;
          case "end":
            p[a] += h * (n && u ? -1 : 1);
            break;
        }
        return p;
      }
      var Kn = async (e, t, n) => {
        const { placement: r = "bottom", strategy: i = "absolute", middleware: o = [], platform: a } = n, s = o.filter(Boolean), c = await (a.isRTL == null ? void 0 : a.isRTL(t));
        let u = await a.getElementRects({ reference: e, floating: t, strategy: i }), { x: l, y: d } = Tt(u, r, c), h = r, p = {}, b = 0;
        for (let v = 0; v < s.length; v++) {
          const { name: g, fn: m } = s[v], { x: E, y: w, data: P, reset: y } = await m({ x: l, y: d, initialPlacement: r, placement: h, strategy: i, middlewareData: p, rects: u, platform: a, elements: { reference: e, floating: t } });
          l = E ?? l, d = w ?? d, p = { ...p, [g]: { ...p[g], ...P } }, y && b <= 50 && (b++, typeof y == "object" && (y.placement && (h = y.placement), y.rects && (u = y.rects === true ? await a.getElementRects({ reference: e, floating: t, strategy: i }) : y.rects), { x: l, y: d } = Tt(u, h, c)), v = -1);
        }
        return { x: l, y: d, placement: h, strategy: i, middlewareData: p };
      };
      async function Yt(e, t) {
        var n;
        t === void 0 && (t = {});
        const { x: r, y: i, platform: o, rects: a, elements: s, strategy: c } = e, { boundary: u = "clippingAncestors", rootBoundary: l = "viewport", elementContext: d = "floating", altBoundary: h = false, padding: p = 0 } = Be(t, e), b = qn(p), g = s[h ? d === "floating" ? "reference" : "floating" : d], m = Ne(await o.getClippingRect({ element: (n = await (o.isElement == null ? void 0 : o.isElement(g))) == null || n ? g : g.contextElement || await (o.getDocumentElement == null ? void 0 : o.getDocumentElement(s.floating)), boundary: u, rootBoundary: l, strategy: c })), E = d === "floating" ? { x: r, y: i, width: a.floating.width, height: a.floating.height } : a.reference, w = await (o.getOffsetParent == null ? void 0 : o.getOffsetParent(s.floating)), P = await (o.isElement == null ? void 0 : o.isElement(w)) ? await (o.getScale == null ? void 0 : o.getScale(w)) || { x: 1, y: 1 } : { x: 1, y: 1 }, y = Ne(o.convertOffsetParentRelativeRectToViewportRelativeRect ? await o.convertOffsetParentRelativeRectToViewportRelativeRect({ elements: s, rect: E, offsetParent: w, strategy: c }) : E);
        return { top: (m.top - y.top + b.top) / P.y, bottom: (y.bottom - m.bottom + b.bottom) / P.y, left: (m.left - y.left + b.left) / P.x, right: (y.right - m.right + b.right) / P.x };
      }
      var Qn = function(e) {
        return e === void 0 && (e = {}), { name: "flip", options: e, async fn(t) {
          var n, r;
          const { placement: i, middlewareData: o, rects: a, initialPlacement: s, platform: c, elements: u } = t, { mainAxis: l = true, crossAxis: d = true, fallbackPlacements: h, fallbackStrategy: p = "bestFit", fallbackAxisSideDirection: b = "none", flipAlignment: v = true, ...g } = Be(e, t);
          if ((n = o.arrow) != null && n.alignmentOffset) return {};
          const m = oe(i), E = de(s), w = oe(s) === s, P = await (c.isRTL == null ? void 0 : c.isRTL(u.floating)), y = h || (w || !v ? [De(s)] : Hn(s)), S = b !== "none";
          !h && S && y.push(...Gn(s, v, b, P));
          const T = [s, ...y], I = await Yt(t, g), _ = [];
          let V = ((r = o.flip) == null ? void 0 : r.overflows) || [];
          if (l && _.push(I[m]), d) {
            const G = Vn(i, a, P);
            _.push(I[G[0]], I[G[1]]);
          }
          if (V = [...V, { placement: i, overflows: _ }], !_.every((G) => G <= 0)) {
            var x, A;
            const G = (((x = o.flip) == null ? void 0 : x.index) || 0) + 1, Oe = T[G];
            if (Oe) return { data: { index: G, overflows: V }, reset: { placement: Oe } };
            let ye = (A = V.filter((ue) => ue.overflows[0] <= 0).sort((ue, Z) => ue.overflows[1] - Z.overflows[1])[0]) == null ? void 0 : A.placement;
            if (!ye) switch (p) {
              case "bestFit": {
                var re;
                const ue = (re = V.filter((Z) => {
                  if (S) {
                    const ee = de(Z.placement);
                    return ee === E || ee === "y";
                  }
                  return true;
                }).map((Z) => [Z.placement, Z.overflows.filter((ee) => ee > 0).reduce((ee, Fn) => ee + Fn, 0)]).sort((Z, ee) => Z[1] - ee[1])[0]) == null ? void 0 : re[0];
                ue && (ye = ue);
                break;
              }
              case "initialPlacement":
                ye = s;
                break;
            }
            if (i !== ye) return { reset: { placement: ye } };
          }
          return {};
        } };
      };
      async function Jn(e, t) {
        const { placement: n, platform: r, elements: i } = e, o = await (r.isRTL == null ? void 0 : r.isRTL(i.floating)), a = oe(n), s = Ve(n), c = de(n) === "y", u = ["left", "top"].includes(a) ? -1 : 1, l = o && c ? -1 : 1, d = Be(t, e);
        let { mainAxis: h, crossAxis: p, alignmentAxis: b } = typeof d == "number" ? { mainAxis: d, crossAxis: 0, alignmentAxis: null } : { mainAxis: d.mainAxis || 0, crossAxis: d.crossAxis || 0, alignmentAxis: d.alignmentAxis };
        return s && typeof b == "number" && (p = s === "end" ? b * -1 : b), c ? { x: p * l, y: h * u } : { x: h * u, y: p * l };
      }
      var Xn = function(e) {
        return e === void 0 && (e = 0), { name: "offset", options: e, async fn(t) {
          var n, r;
          const { x: i, y: o, placement: a, middlewareData: s } = t, c = await Jn(t, e);
          return a === ((n = s.offset) == null ? void 0 : n.placement) && (r = s.arrow) != null && r.alignmentOffset ? {} : { x: i + c.x, y: o + c.y, data: { ...c, placement: a } };
        } };
      };
      var Zn = function(e) {
        return e === void 0 && (e = {}), { name: "shift", options: e, async fn(t) {
          const { x: n, y: r, placement: i } = t, { mainAxis: o = true, crossAxis: a = false, limiter: s = { fn: (g) => {
            let { x: m, y: E } = g;
            return { x: m, y: E };
          } }, ...c } = Be(e, t), u = { x: n, y: r }, l = await Yt(t, c), d = de(oe(i)), h = Ht(d);
          let p = u[h], b = u[d];
          if (o) {
            const g = h === "y" ? "top" : "left", m = h === "y" ? "bottom" : "right", E = p + l[g], w = p - l[m];
            p = xt(E, p, w);
          }
          if (a) {
            const g = d === "y" ? "top" : "left", m = d === "y" ? "bottom" : "right", E = b + l[g], w = b - l[m];
            b = xt(E, b, w);
          }
          const v = s.fn({ ...t, [h]: p, [d]: b });
          return { ...v, data: { x: v.x - n, y: v.y - r, enabled: { [h]: o, [d]: a } } };
        } };
      };
      function He() {
        return typeof window < "u";
      }
      function me(e) {
        return qt(e) ? (e.nodeName || "").toLowerCase() : "#document";
      }
      function $(e) {
        var t;
        return (e == null || (t = e.ownerDocument) == null ? void 0 : t.defaultView) || window;
      }
      function K(e) {
        var t;
        return (t = (qt(e) ? e.ownerDocument : e.document) || window.document) == null ? void 0 : t.documentElement;
      }
      function qt(e) {
        return He() ? e instanceof Node || e instanceof $(e).Node : false;
      }
      function H(e) {
        return He() ? e instanceof Element || e instanceof $(e).Element : false;
      }
      function q(e) {
        return He() ? e instanceof HTMLElement || e instanceof $(e).HTMLElement : false;
      }
      function Pt(e) {
        return !He() || typeof ShadowRoot > "u" ? false : e instanceof ShadowRoot || e instanceof $(e).ShadowRoot;
      }
      function Pe(e) {
        const { overflow: t, overflowX: n, overflowY: r, display: i } = z(e);
        return /auto|scroll|overlay|hidden|clip/.test(t + r + n) && !["inline", "contents"].includes(i);
      }
      function er(e) {
        return ["table", "td", "th"].includes(me(e));
      }
      function ze(e) {
        return [":popover-open", ":modal"].some((t) => {
          try {
            return e.matches(t);
          } catch {
            return false;
          }
        });
      }
      function lt(e) {
        const t = ft(), n = H(e) ? z(e) : e;
        return ["transform", "translate", "scale", "rotate", "perspective"].some((r) => n[r] ? n[r] !== "none" : false) || (n.containerType ? n.containerType !== "normal" : false) || !t && (n.backdropFilter ? n.backdropFilter !== "none" : false) || !t && (n.filter ? n.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((r) => (n.willChange || "").includes(r)) || ["paint", "layout", "strict", "content"].some((r) => (n.contain || "").includes(r));
      }
      function tr(e) {
        let t = ne(e);
        for (; q(t) && !pe(t); ) {
          if (lt(t)) return t;
          if (ze(t)) return null;
          t = ne(t);
        }
        return null;
      }
      function ft() {
        return typeof CSS > "u" || !CSS.supports ? false : CSS.supports("-webkit-backdrop-filter", "none");
      }
      function pe(e) {
        return ["html", "body", "#document"].includes(me(e));
      }
      function z(e) {
        return $(e).getComputedStyle(e);
      }
      function Ge(e) {
        return H(e) ? { scrollLeft: e.scrollLeft, scrollTop: e.scrollTop } : { scrollLeft: e.scrollX, scrollTop: e.scrollY };
      }
      function ne(e) {
        if (me(e) === "html") return e;
        const t = e.assignedSlot || e.parentNode || Pt(e) && e.host || K(e);
        return Pt(t) ? t.host : t;
      }
      function Kt(e) {
        const t = ne(e);
        return pe(t) ? e.ownerDocument ? e.ownerDocument.body : e.body : q(t) && Pe(t) ? t : Kt(t);
      }
      function Se(e, t, n) {
        var r;
        t === void 0 && (t = []), n === void 0 && (n = true);
        const i = Kt(e), o = i === ((r = e.ownerDocument) == null ? void 0 : r.body), a = $(i);
        if (o) {
          const s = rt(a);
          return t.concat(a, a.visualViewport || [], Pe(i) ? i : [], s && n ? Se(s) : []);
        }
        return t.concat(i, Se(i, [], n));
      }
      function rt(e) {
        return e.parent && Object.getPrototypeOf(e.parent) ? e.frameElement : null;
      }
      function Qt(e) {
        const t = z(e);
        let n = parseFloat(t.width) || 0, r = parseFloat(t.height) || 0;
        const i = q(e), o = i ? e.offsetWidth : n, a = i ? e.offsetHeight : r, s = Me(n) !== o || Me(r) !== a;
        return s && (n = o, r = a), { width: n, height: r, $: s };
      }
      function dt(e) {
        return H(e) ? e : e.contextElement;
      }
      function le(e) {
        const t = dt(e);
        if (!q(t)) return Y(1);
        const n = t.getBoundingClientRect(), { width: r, height: i, $: o } = Qt(t);
        let a = (o ? Me(n.width) : n.width) / r, s = (o ? Me(n.height) : n.height) / i;
        return (!a || !Number.isFinite(a)) && (a = 1), (!s || !Number.isFinite(s)) && (s = 1), { x: a, y: s };
      }
      var nr = Y(0);
      function Jt(e) {
        const t = $(e);
        return !ft() || !t.visualViewport ? nr : { x: t.visualViewport.offsetLeft, y: t.visualViewport.offsetTop };
      }
      function rr(e, t, n) {
        return t === void 0 && (t = false), !n || t && n !== $(e) ? false : t;
      }
      function ae(e, t, n, r) {
        t === void 0 && (t = false), n === void 0 && (n = false);
        const i = e.getBoundingClientRect(), o = dt(e);
        let a = Y(1);
        t && (r ? H(r) && (a = le(r)) : a = le(e));
        const s = rr(o, n, r) ? Jt(o) : Y(0);
        let c = (i.left + s.x) / a.x, u = (i.top + s.y) / a.y, l = i.width / a.x, d = i.height / a.y;
        if (o) {
          const h = $(o), p = r && H(r) ? $(r) : r;
          let b = h, v = rt(b);
          for (; v && r && p !== b; ) {
            const g = le(v), m = v.getBoundingClientRect(), E = z(v), w = m.left + (v.clientLeft + parseFloat(E.paddingLeft)) * g.x, P = m.top + (v.clientTop + parseFloat(E.paddingTop)) * g.y;
            c *= g.x, u *= g.y, l *= g.x, d *= g.y, c += w, u += P, b = $(v), v = rt(b);
          }
        }
        return Ne({ width: l, height: d, x: c, y: u });
      }
      function pt(e, t) {
        const n = Ge(e).scrollLeft;
        return t ? t.left + n : ae(K(e)).left + n;
      }
      function Xt(e, t, n) {
        n === void 0 && (n = false);
        const r = e.getBoundingClientRect(), i = r.left + t.scrollLeft - (n ? 0 : pt(e, r)), o = r.top + t.scrollTop;
        return { x: i, y: o };
      }
      function ir(e) {
        let { elements: t, rect: n, offsetParent: r, strategy: i } = e;
        const o = i === "fixed", a = K(r), s = t ? ze(t.floating) : false;
        if (r === a || s && o) return n;
        let c = { scrollLeft: 0, scrollTop: 0 }, u = Y(1);
        const l = Y(0), d = q(r);
        if ((d || !d && !o) && ((me(r) !== "body" || Pe(a)) && (c = Ge(r)), q(r))) {
          const p = ae(r);
          u = le(r), l.x = p.x + r.clientLeft, l.y = p.y + r.clientTop;
        }
        const h = a && !d && !o ? Xt(a, c, true) : Y(0);
        return { width: n.width * u.x, height: n.height * u.y, x: n.x * u.x - c.scrollLeft * u.x + l.x + h.x, y: n.y * u.y - c.scrollTop * u.y + l.y + h.y };
      }
      function or(e) {
        return Array.from(e.getClientRects());
      }
      function ar(e) {
        const t = K(e), n = Ge(e), r = e.ownerDocument.body, i = ie(t.scrollWidth, t.clientWidth, r.scrollWidth, r.clientWidth), o = ie(t.scrollHeight, t.clientHeight, r.scrollHeight, r.clientHeight);
        let a = -n.scrollLeft + pt(e);
        const s = -n.scrollTop;
        return z(r).direction === "rtl" && (a += ie(t.clientWidth, r.clientWidth) - i), { width: i, height: o, x: a, y: s };
      }
      function sr(e, t) {
        const n = $(e), r = K(e), i = n.visualViewport;
        let o = r.clientWidth, a = r.clientHeight, s = 0, c = 0;
        if (i) {
          o = i.width, a = i.height;
          const u = ft();
          (!u || u && t === "fixed") && (s = i.offsetLeft, c = i.offsetTop);
        }
        return { width: o, height: a, x: s, y: c };
      }
      function cr(e, t) {
        const n = ae(e, true, t === "fixed"), r = n.top + e.clientTop, i = n.left + e.clientLeft, o = q(e) ? le(e) : Y(1), a = e.clientWidth * o.x, s = e.clientHeight * o.y, c = i * o.x, u = r * o.y;
        return { width: a, height: s, x: c, y: u };
      }
      function Ct(e, t, n) {
        let r;
        if (t === "viewport") r = sr(e, n);
        else if (t === "document") r = ar(K(e));
        else if (H(t)) r = cr(t, n);
        else {
          const i = Jt(e);
          r = { x: t.x - i.x, y: t.y - i.y, width: t.width, height: t.height };
        }
        return Ne(r);
      }
      function Zt(e, t) {
        const n = ne(e);
        return n === t || !H(n) || pe(n) ? false : z(n).position === "fixed" || Zt(n, t);
      }
      function ur(e, t) {
        const n = t.get(e);
        if (n) return n;
        let r = Se(e, [], false).filter((s) => H(s) && me(s) !== "body"), i = null;
        const o = z(e).position === "fixed";
        let a = o ? ne(e) : e;
        for (; H(a) && !pe(a); ) {
          const s = z(a), c = lt(a);
          !c && s.position === "fixed" && (i = null), (o ? !c && !i : !c && s.position === "static" && !!i && ["absolute", "fixed"].includes(i.position) || Pe(a) && !c && Zt(e, a)) ? r = r.filter((l) => l !== a) : i = s, a = ne(a);
        }
        return t.set(e, r), r;
      }
      function lr(e) {
        let { element: t, boundary: n, rootBoundary: r, strategy: i } = e;
        const a = [...n === "clippingAncestors" ? ze(t) ? [] : ur(t, this._c) : [].concat(n), r], s = a[0], c = a.reduce((u, l) => {
          const d = Ct(t, l, i);
          return u.top = ie(d.top, u.top), u.right = Ie(d.right, u.right), u.bottom = Ie(d.bottom, u.bottom), u.left = ie(d.left, u.left), u;
        }, Ct(t, s, i));
        return { width: c.right - c.left, height: c.bottom - c.top, x: c.left, y: c.top };
      }
      function fr(e) {
        const { width: t, height: n } = Qt(e);
        return { width: t, height: n };
      }
      function dr(e, t, n) {
        const r = q(t), i = K(t), o = n === "fixed", a = ae(e, true, o, t);
        let s = { scrollLeft: 0, scrollTop: 0 };
        const c = Y(0);
        if (r || !r && !o) if ((me(t) !== "body" || Pe(i)) && (s = Ge(t)), r) {
          const h = ae(t, true, o, t);
          c.x = h.x + t.clientLeft, c.y = h.y + t.clientTop;
        } else i && (c.x = pt(i));
        const u = i && !r && !o ? Xt(i, s) : Y(0), l = a.left + s.scrollLeft - c.x - u.x, d = a.top + s.scrollTop - c.y - u.y;
        return { x: l, y: d, width: a.width, height: a.height };
      }
      function Qe(e) {
        return z(e).position === "static";
      }
      function Ot(e, t) {
        if (!q(e) || z(e).position === "fixed") return null;
        if (t) return t(e);
        let n = e.offsetParent;
        return K(e) === n && (n = n.ownerDocument.body), n;
      }
      function en(e, t) {
        const n = $(e);
        if (ze(e)) return n;
        if (!q(e)) {
          let i = ne(e);
          for (; i && !pe(i); ) {
            if (H(i) && !Qe(i)) return i;
            i = ne(i);
          }
          return n;
        }
        let r = Ot(e, t);
        for (; r && er(r) && Qe(r); ) r = Ot(r, t);
        return r && pe(r) && Qe(r) && !lt(r) ? n : r || tr(e) || n;
      }
      var pr = async function(e) {
        const t = this.getOffsetParent || en, n = this.getDimensions, r = await n(e.floating);
        return { reference: dr(e.reference, await t(e.floating), e.strategy), floating: { x: 0, y: 0, width: r.width, height: r.height } };
      };
      function vr(e) {
        return z(e).direction === "rtl";
      }
      var hr = { convertOffsetParentRelativeRectToViewportRelativeRect: ir, getDocumentElement: K, getClippingRect: lr, getOffsetParent: en, getElementRects: pr, getClientRects: or, getDimensions: fr, getScale: le, isElement: H, isRTL: vr };
      function tn(e, t) {
        return e.x === t.x && e.y === t.y && e.width === t.width && e.height === t.height;
      }
      function mr(e, t) {
        let n = null, r;
        const i = K(e);
        function o() {
          var s;
          clearTimeout(r), (s = n) == null || s.disconnect(), n = null;
        }
        function a(s, c) {
          s === void 0 && (s = false), c === void 0 && (c = 1), o();
          const u = e.getBoundingClientRect(), { left: l, top: d, width: h, height: p } = u;
          if (s || t(), !h || !p) return;
          const b = ke(d), v = ke(i.clientWidth - (l + h)), g = ke(i.clientHeight - (d + p)), m = ke(l), w = { rootMargin: -b + "px " + -v + "px " + -g + "px " + -m + "px", threshold: ie(0, Ie(1, c)) || 1 };
          let P = true;
          function y(S) {
            const T = S[0].intersectionRatio;
            if (T !== c) {
              if (!P) return a();
              T ? a(false, T) : r = setTimeout(() => {
                a(false, 1e-7);
              }, 1e3);
            }
            T === 1 && !tn(u, e.getBoundingClientRect()) && a(), P = false;
          }
          try {
            n = new IntersectionObserver(y, { ...w, root: i.ownerDocument });
          } catch {
            n = new IntersectionObserver(y, w);
          }
          n.observe(e);
        }
        return a(true), o;
      }
      function br(e, t, n, r) {
        r === void 0 && (r = {});
        const { ancestorScroll: i = true, ancestorResize: o = true, elementResize: a = typeof ResizeObserver == "function", layoutShift: s = typeof IntersectionObserver == "function", animationFrame: c = false } = r, u = dt(e), l = i || o ? [...u ? Se(u) : [], ...Se(t)] : [];
        l.forEach((m) => {
          i && m.addEventListener("scroll", n, { passive: true }), o && m.addEventListener("resize", n);
        });
        const d = u && s ? mr(u, n) : null;
        let h = -1, p = null;
        a && (p = new ResizeObserver((m) => {
          let [E] = m;
          E && E.target === u && p && (p.unobserve(t), cancelAnimationFrame(h), h = requestAnimationFrame(() => {
            var w;
            (w = p) == null || w.observe(t);
          })), n();
        }), u && !c && p.observe(u), p.observe(t));
        let b, v = c ? ae(e) : null;
        c && g();
        function g() {
          const m = ae(e);
          v && !tn(v, m) && n(), v = m, b = requestAnimationFrame(g);
        }
        return n(), () => {
          var m;
          l.forEach((E) => {
            i && E.removeEventListener("scroll", n), o && E.removeEventListener("resize", n);
          }), d == null || d(), (m = p) == null || m.disconnect(), p = null, c && cancelAnimationFrame(b);
        };
      }
      var gr = Xn;
      var yr = Zn;
      var wr = Qn;
      var Er = (e, t, n) => {
        const r = /* @__PURE__ */ new Map(), i = { platform: hr, ...n }, o = { ...i.platform, _c: r };
        return Kn(e, t, { ...i, platform: o });
      };
      var Sr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof window < "u" ? window : typeof self < "u" ? self : {};
      function nn(e) {
        return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
      }
      var _e = { exports: {} };
      var xr = _e.exports;
      var kt;
      function Tr() {
        return kt || (kt = 1, function(e) {
          (function(t, n) {
            e.exports ? e.exports = n() : t.log = n();
          })(xr, function() {
            var t = function() {
            }, n = "undefined", r = typeof window !== n && typeof window.navigator !== n && /Trident\/|MSIE /.test(window.navigator.userAgent), i = ["trace", "debug", "info", "warn", "error"], o = {}, a = null;
            function s(v, g) {
              var m = v[g];
              if (typeof m.bind == "function") return m.bind(v);
              try {
                return Function.prototype.bind.call(m, v);
              } catch {
                return function() {
                  return Function.prototype.apply.apply(m, [v, arguments]);
                };
              }
            }
            function c() {
              console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
            }
            function u(v) {
              return v === "debug" && (v = "log"), typeof console === n ? false : v === "trace" && r ? c : console[v] !== void 0 ? s(console, v) : console.log !== void 0 ? s(console, "log") : t;
            }
            function l() {
              for (var v = this.getLevel(), g = 0; g < i.length; g++) {
                var m = i[g];
                this[m] = g < v ? t : this.methodFactory(m, v, this.name);
              }
              if (this.log = this.debug, typeof console === n && v < this.levels.SILENT) return "No console available for logging";
            }
            function d(v) {
              return function() {
                typeof console !== n && (l.call(this), this[v].apply(this, arguments));
              };
            }
            function h(v, g, m) {
              return u(v) || d.apply(this, arguments);
            }
            function p(v, g) {
              var m = this, E, w, P, y = "loglevel";
              typeof v == "string" ? y += ":" + v : typeof v == "symbol" && (y = void 0);
              function S(x) {
                var A = (i[x] || "silent").toUpperCase();
                if (!(typeof window === n || !y)) {
                  try {
                    window.localStorage[y] = A;
                    return;
                  } catch {
                  }
                  try {
                    window.document.cookie = encodeURIComponent(y) + "=" + A + ";";
                  } catch {
                  }
                }
              }
              function T() {
                var x;
                if (!(typeof window === n || !y)) {
                  try {
                    x = window.localStorage[y];
                  } catch {
                  }
                  if (typeof x === n) try {
                    var A = window.document.cookie, re = encodeURIComponent(y), G = A.indexOf(re + "=");
                    G !== -1 && (x = /^([^;]+)/.exec(A.slice(G + re.length + 1))[1]);
                  } catch {
                  }
                  return m.levels[x] === void 0 && (x = void 0), x;
                }
              }
              function I() {
                if (!(typeof window === n || !y)) {
                  try {
                    window.localStorage.removeItem(y);
                  } catch {
                  }
                  try {
                    window.document.cookie = encodeURIComponent(y) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                  } catch {
                  }
                }
              }
              function _(x) {
                var A = x;
                if (typeof A == "string" && m.levels[A.toUpperCase()] !== void 0 && (A = m.levels[A.toUpperCase()]), typeof A == "number" && A >= 0 && A <= m.levels.SILENT) return A;
                throw new TypeError("log.setLevel() called with invalid level: " + x);
              }
              m.name = v, m.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, m.methodFactory = g || h, m.getLevel = function() {
                return P ?? w ?? E;
              }, m.setLevel = function(x, A) {
                return P = _(x), A !== false && S(P), l.call(m);
              }, m.setDefaultLevel = function(x) {
                w = _(x), T() || m.setLevel(x, false);
              }, m.resetLevel = function() {
                P = null, I(), l.call(m);
              }, m.enableAll = function(x) {
                m.setLevel(m.levels.TRACE, x);
              }, m.disableAll = function(x) {
                m.setLevel(m.levels.SILENT, x);
              }, m.rebuild = function() {
                if (a !== m && (E = _(a.getLevel())), l.call(m), a === m) for (var x in o) o[x].rebuild();
              }, E = _(a ? a.getLevel() : "WARN");
              var V = T();
              V != null && (P = _(V)), l.call(m);
            }
            a = new p(), a.getLogger = function(g) {
              if (typeof g != "symbol" && typeof g != "string" || g === "") throw new TypeError("You must supply a name when creating a logger.");
              var m = o[g];
              return m || (m = o[g] = new p(g, a.methodFactory)), m;
            };
            var b = typeof window !== n ? window.log : void 0;
            return a.noConflict = function() {
              return typeof window !== n && window.log === a && (window.log = b), a;
            }, a.getLoggers = function() {
              return o;
            }, a.default = a, a;
          });
        }(_e)), _e.exports;
      }
      var Pr = Tr();
      var Cr = nn(Pr);
      var it = function(e, t) {
        return it = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n, r) {
          n.__proto__ = r;
        } || function(n, r) {
          for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (n[i] = r[i]);
        }, it(e, t);
      };
      function X(e, t) {
        if (typeof t != "function" && t !== null) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
        it(e, t);
        function n() {
          this.constructor = e;
        }
        e.prototype = t === null ? Object.create(t) : (n.prototype = t.prototype, new n());
      }
      function Or(e, t, n, r) {
        function i(o) {
          return o instanceof n ? o : new n(function(a) {
            a(o);
          });
        }
        return new (n || (n = Promise))(function(o, a) {
          function s(l) {
            try {
              u(r.next(l));
            } catch (d) {
              a(d);
            }
          }
          function c(l) {
            try {
              u(r.throw(l));
            } catch (d) {
              a(d);
            }
          }
          function u(l) {
            l.done ? o(l.value) : i(l.value).then(s, c);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function rn(e, t) {
        var n = { label: 0, sent: function() {
          if (o[0] & 1) throw o[1];
          return o[1];
        }, trys: [], ops: [] }, r, i, o, a = Object.create((typeof Iterator == "function" ? Iterator : Object).prototype);
        return a.next = s(0), a.throw = s(1), a.return = s(2), typeof Symbol == "function" && (a[Symbol.iterator] = function() {
          return this;
        }), a;
        function s(u) {
          return function(l) {
            return c([u, l]);
          };
        }
        function c(u) {
          if (r) throw new TypeError("Generator is already executing.");
          for (; a && (a = 0, u[0] && (n = 0)), n; ) try {
            if (r = 1, i && (o = u[0] & 2 ? i.return : u[0] ? i.throw || ((o = i.return) && o.call(i), 0) : i.next) && !(o = o.call(i, u[1])).done) return o;
            switch (i = 0, o && (u = [u[0] & 2, o.value]), u[0]) {
              case 0:
              case 1:
                o = u;
                break;
              case 4:
                return n.label++, { value: u[1], done: false };
              case 5:
                n.label++, i = u[1], u = [0];
                continue;
              case 7:
                u = n.ops.pop(), n.trys.pop();
                continue;
              default:
                if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (u[0] === 6 || u[0] === 2)) {
                  n = 0;
                  continue;
                }
                if (u[0] === 3 && (!o || u[1] > o[0] && u[1] < o[3])) {
                  n.label = u[1];
                  break;
                }
                if (u[0] === 6 && n.label < o[1]) {
                  n.label = o[1], o = u;
                  break;
                }
                if (o && n.label < o[2]) {
                  n.label = o[2], n.ops.push(u);
                  break;
                }
                o[2] && n.ops.pop(), n.trys.pop();
                continue;
            }
            u = t.call(e, n);
          } catch (l) {
            u = [6, l], i = 0;
          } finally {
            r = o = 0;
          }
          if (u[0] & 5) throw u[1];
          return { value: u[0] ? u[1] : void 0, done: true };
        }
      }
      function ve(e) {
        var t = typeof Symbol == "function" && Symbol.iterator, n = t && e[t], r = 0;
        if (n) return n.call(e);
        if (e && typeof e.length == "number") return { next: function() {
          return e && r >= e.length && (e = void 0), { value: e && e[r++], done: !e };
        } };
        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }
      function se(e, t) {
        var n = typeof Symbol == "function" && e[Symbol.iterator];
        if (!n) return e;
        var r = n.call(e), i, o = [], a;
        try {
          for (; (t === void 0 || t-- > 0) && !(i = r.next()).done; ) o.push(i.value);
        } catch (s) {
          a = { error: s };
        } finally {
          try {
            i && !i.done && (n = r.return) && n.call(r);
          } finally {
            if (a) throw a.error;
          }
        }
        return o;
      }
      function he(e, t, n) {
        if (n || arguments.length === 2) for (var r = 0, i = t.length, o; r < i; r++) (o || !(r in t)) && (o || (o = Array.prototype.slice.call(t, 0, r)), o[r] = t[r]);
        return e.concat(o || Array.prototype.slice.call(t));
      }
      function fe(e) {
        return this instanceof fe ? (this.v = e, this) : new fe(e);
      }
      function kr(e, t, n) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var r = n.apply(e, t || []), i, o = [];
        return i = Object.create((typeof AsyncIterator == "function" ? AsyncIterator : Object).prototype), s("next"), s("throw"), s("return", a), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function a(p) {
          return function(b) {
            return Promise.resolve(b).then(p, d);
          };
        }
        function s(p, b) {
          r[p] && (i[p] = function(v) {
            return new Promise(function(g, m) {
              o.push([p, v, g, m]) > 1 || c(p, v);
            });
          }, b && (i[p] = b(i[p])));
        }
        function c(p, b) {
          try {
            u(r[p](b));
          } catch (v) {
            h(o[0][3], v);
          }
        }
        function u(p) {
          p.value instanceof fe ? Promise.resolve(p.value.v).then(l, d) : h(o[0][2], p);
        }
        function l(p) {
          c("next", p);
        }
        function d(p) {
          c("throw", p);
        }
        function h(p, b) {
          p(b), o.shift(), o.length && c(o[0][0], o[0][1]);
        }
      }
      function Ar(e) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var t = e[Symbol.asyncIterator], n;
        return t ? t.call(e) : (e = typeof ve == "function" ? ve(e) : e[Symbol.iterator](), n = {}, r("next"), r("throw"), r("return"), n[Symbol.asyncIterator] = function() {
          return this;
        }, n);
        function r(o) {
          n[o] = e[o] && function(a) {
            return new Promise(function(s, c) {
              a = e[o](a), i(s, c, a.done, a.value);
            });
          };
        }
        function i(o, a, s, c) {
          Promise.resolve(c).then(function(u) {
            o({ value: u, done: s });
          }, a);
        }
      }
      function C(e) {
        return typeof e == "function";
      }
      function vt(e) {
        var t = function(r) {
          Error.call(r), r.stack = new Error().stack;
        }, n = e(t);
        return n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n;
      }
      var Je = vt(function(e) {
        return function(n) {
          e(this), this.message = n ? n.length + ` errors occurred during unsubscription:
` + n.map(function(r, i) {
            return i + 1 + ") " + r.toString();
          }).join(`
  `) : "", this.name = "UnsubscriptionError", this.errors = n;
        };
      });
      function $e(e, t) {
        if (e) {
          var n = e.indexOf(t);
          0 <= n && e.splice(n, 1);
        }
      }
      var Ce = function() {
        function e(t) {
          this.initialTeardown = t, this.closed = false, this._parentage = null, this._finalizers = null;
        }
        return e.prototype.unsubscribe = function() {
          var t, n, r, i, o;
          if (!this.closed) {
            this.closed = true;
            var a = this._parentage;
            if (a) if (this._parentage = null, Array.isArray(a)) try {
              for (var s = ve(a), c = s.next(); !c.done; c = s.next()) {
                var u = c.value;
                u.remove(this);
              }
            } catch (v) {
              t = { error: v };
            } finally {
              try {
                c && !c.done && (n = s.return) && n.call(s);
              } finally {
                if (t) throw t.error;
              }
            }
            else a.remove(this);
            var l = this.initialTeardown;
            if (C(l)) try {
              l();
            } catch (v) {
              o = v instanceof Je ? v.errors : [v];
            }
            var d = this._finalizers;
            if (d) {
              this._finalizers = null;
              try {
                for (var h = ve(d), p = h.next(); !p.done; p = h.next()) {
                  var b = p.value;
                  try {
                    At(b);
                  } catch (v) {
                    o = o ?? [], v instanceof Je ? o = he(he([], se(o)), se(v.errors)) : o.push(v);
                  }
                }
              } catch (v) {
                r = { error: v };
              } finally {
                try {
                  p && !p.done && (i = h.return) && i.call(h);
                } finally {
                  if (r) throw r.error;
                }
              }
            }
            if (o) throw new Je(o);
          }
        }, e.prototype.add = function(t) {
          var n;
          if (t && t !== this) if (this.closed) At(t);
          else {
            if (t instanceof e) {
              if (t.closed || t._hasParent(this)) return;
              t._addParent(this);
            }
            (this._finalizers = (n = this._finalizers) !== null && n !== void 0 ? n : []).push(t);
          }
        }, e.prototype._hasParent = function(t) {
          var n = this._parentage;
          return n === t || Array.isArray(n) && n.includes(t);
        }, e.prototype._addParent = function(t) {
          var n = this._parentage;
          this._parentage = Array.isArray(n) ? (n.push(t), n) : n ? [n, t] : t;
        }, e.prototype._removeParent = function(t) {
          var n = this._parentage;
          n === t ? this._parentage = null : Array.isArray(n) && $e(n, t);
        }, e.prototype.remove = function(t) {
          var n = this._finalizers;
          n && $e(n, t), t instanceof e && t._removeParent(this);
        }, e.EMPTY = function() {
          var t = new e();
          return t.closed = true, t;
        }(), e;
      }();
      var on = Ce.EMPTY;
      function an(e) {
        return e instanceof Ce || e && "closed" in e && C(e.remove) && C(e.add) && C(e.unsubscribe);
      }
      function At(e) {
        C(e) ? e() : e.unsubscribe();
      }
      var Lr = { Promise: void 0 };
      var _r = { setTimeout: function(e, t) {
        for (var n = [], r = 2; r < arguments.length; r++) n[r - 2] = arguments[r];
        return setTimeout.apply(void 0, he([e, t], se(n)));
      }, clearTimeout: function(e) {
        return clearTimeout(e);
      }, delegate: void 0 };
      function sn(e) {
        _r.setTimeout(function() {
          throw e;
        });
      }
      function Fe() {
      }
      function Re(e) {
        e();
      }
      var ht = function(e) {
        X(t, e);
        function t(n) {
          var r = e.call(this) || this;
          return r.isStopped = false, n ? (r.destination = n, an(n) && n.add(r)) : r.destination = Mr, r;
        }
        return t.create = function(n, r, i) {
          return new xe(n, r, i);
        }, t.prototype.next = function(n) {
          this.isStopped || this._next(n);
        }, t.prototype.error = function(n) {
          this.isStopped || (this.isStopped = true, this._error(n));
        }, t.prototype.complete = function() {
          this.isStopped || (this.isStopped = true, this._complete());
        }, t.prototype.unsubscribe = function() {
          this.closed || (this.isStopped = true, e.prototype.unsubscribe.call(this), this.destination = null);
        }, t.prototype._next = function(n) {
          this.destination.next(n);
        }, t.prototype._error = function(n) {
          try {
            this.destination.error(n);
          } finally {
            this.unsubscribe();
          }
        }, t.prototype._complete = function() {
          try {
            this.destination.complete();
          } finally {
            this.unsubscribe();
          }
        }, t;
      }(Ce);
      var Rr = function() {
        function e(t) {
          this.partialObserver = t;
        }
        return e.prototype.next = function(t) {
          var n = this.partialObserver;
          if (n.next) try {
            n.next(t);
          } catch (r) {
            Ae(r);
          }
        }, e.prototype.error = function(t) {
          var n = this.partialObserver;
          if (n.error) try {
            n.error(t);
          } catch (r) {
            Ae(r);
          }
          else Ae(t);
        }, e.prototype.complete = function() {
          var t = this.partialObserver;
          if (t.complete) try {
            t.complete();
          } catch (n) {
            Ae(n);
          }
        }, e;
      }();
      var xe = function(e) {
        X(t, e);
        function t(n, r, i) {
          var o = e.call(this) || this, a;
          return C(n) || !n ? a = { next: n ?? void 0, error: r ?? void 0, complete: i ?? void 0 } : a = n, o.destination = new Rr(a), o;
        }
        return t;
      }(ht);
      function Ae(e) {
        sn(e);
      }
      function Ir(e) {
        throw e;
      }
      var Mr = { closed: true, next: Fe, error: Ir, complete: Fe };
      var mt = function() {
        return typeof Symbol == "function" && Symbol.observable || "@@observable";
      }();
      function bt(e) {
        return e;
      }
      function Dr(e) {
        return e.length === 0 ? bt : e.length === 1 ? e[0] : function(n) {
          return e.reduce(function(r, i) {
            return i(r);
          }, n);
        };
      }
      var k = function() {
        function e(t) {
          t && (this._subscribe = t);
        }
        return e.prototype.lift = function(t) {
          var n = new e();
          return n.source = this, n.operator = t, n;
        }, e.prototype.subscribe = function(t, n, r) {
          var i = this, o = $r(t) ? t : new xe(t, n, r);
          return Re(function() {
            var a = i, s = a.operator, c = a.source;
            o.add(s ? s.call(o, c) : c ? i._subscribe(o) : i._trySubscribe(o));
          }), o;
        }, e.prototype._trySubscribe = function(t) {
          try {
            return this._subscribe(t);
          } catch (n) {
            t.error(n);
          }
        }, e.prototype.forEach = function(t, n) {
          var r = this;
          return n = Lt(n), new n(function(i, o) {
            var a = new xe({ next: function(s) {
              try {
                t(s);
              } catch (c) {
                o(c), a.unsubscribe();
              }
            }, error: o, complete: i });
            r.subscribe(a);
          });
        }, e.prototype._subscribe = function(t) {
          var n;
          return (n = this.source) === null || n === void 0 ? void 0 : n.subscribe(t);
        }, e.prototype[mt] = function() {
          return this;
        }, e.prototype.pipe = function() {
          for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
          return Dr(t)(this);
        }, e.prototype.toPromise = function(t) {
          var n = this;
          return t = Lt(t), new t(function(r, i) {
            var o;
            n.subscribe(function(a) {
              return o = a;
            }, function(a) {
              return i(a);
            }, function() {
              return r(o);
            });
          });
        }, e.create = function(t) {
          return new e(t);
        }, e;
      }();
      function Lt(e) {
        var t;
        return (t = e ?? Lr.Promise) !== null && t !== void 0 ? t : Promise;
      }
      function Nr(e) {
        return e && C(e.next) && C(e.error) && C(e.complete);
      }
      function $r(e) {
        return e && e instanceof ht || Nr(e) && an(e);
      }
      function Fr(e) {
        return C(e == null ? void 0 : e.lift);
      }
      function U(e) {
        return function(t) {
          if (Fr(t)) return t.lift(function(n) {
            try {
              return e(n, this);
            } catch (r) {
              this.error(r);
            }
          });
          throw new TypeError("Unable to lift unknown Observable type");
        };
      }
      function F(e, t, n, r, i) {
        return new Ur(e, t, n, r, i);
      }
      var Ur = function(e) {
        X(t, e);
        function t(n, r, i, o, a, s) {
          var c = e.call(this, n) || this;
          return c.onFinalize = a, c.shouldUnsubscribe = s, c._next = r ? function(u) {
            try {
              r(u);
            } catch (l) {
              n.error(l);
            }
          } : e.prototype._next, c._error = o ? function(u) {
            try {
              o(u);
            } catch (l) {
              n.error(l);
            } finally {
              this.unsubscribe();
            }
          } : e.prototype._error, c._complete = i ? function() {
            try {
              i();
            } catch (u) {
              n.error(u);
            } finally {
              this.unsubscribe();
            }
          } : e.prototype._complete, c;
        }
        return t.prototype.unsubscribe = function() {
          var n;
          if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var r = this.closed;
            e.prototype.unsubscribe.call(this), !r && ((n = this.onFinalize) === null || n === void 0 || n.call(this));
          }
        }, t;
      }(ht);
      var jr = vt(function(e) {
        return function() {
          e(this), this.name = "ObjectUnsubscribedError", this.message = "object unsubscribed";
        };
      });
      var J = function(e) {
        X(t, e);
        function t() {
          var n = e.call(this) || this;
          return n.closed = false, n.currentObservers = null, n.observers = [], n.isStopped = false, n.hasError = false, n.thrownError = null, n;
        }
        return t.prototype.lift = function(n) {
          var r = new _t(this, this);
          return r.operator = n, r;
        }, t.prototype._throwIfClosed = function() {
          if (this.closed) throw new jr();
        }, t.prototype.next = function(n) {
          var r = this;
          Re(function() {
            var i, o;
            if (r._throwIfClosed(), !r.isStopped) {
              r.currentObservers || (r.currentObservers = Array.from(r.observers));
              try {
                for (var a = ve(r.currentObservers), s = a.next(); !s.done; s = a.next()) {
                  var c = s.value;
                  c.next(n);
                }
              } catch (u) {
                i = { error: u };
              } finally {
                try {
                  s && !s.done && (o = a.return) && o.call(a);
                } finally {
                  if (i) throw i.error;
                }
              }
            }
          });
        }, t.prototype.error = function(n) {
          var r = this;
          Re(function() {
            if (r._throwIfClosed(), !r.isStopped) {
              r.hasError = r.isStopped = true, r.thrownError = n;
              for (var i = r.observers; i.length; ) i.shift().error(n);
            }
          });
        }, t.prototype.complete = function() {
          var n = this;
          Re(function() {
            if (n._throwIfClosed(), !n.isStopped) {
              n.isStopped = true;
              for (var r = n.observers; r.length; ) r.shift().complete();
            }
          });
        }, t.prototype.unsubscribe = function() {
          this.isStopped = this.closed = true, this.observers = this.currentObservers = null;
        }, Object.defineProperty(t.prototype, "observed", { get: function() {
          var n;
          return ((n = this.observers) === null || n === void 0 ? void 0 : n.length) > 0;
        }, enumerable: false, configurable: true }), t.prototype._trySubscribe = function(n) {
          return this._throwIfClosed(), e.prototype._trySubscribe.call(this, n);
        }, t.prototype._subscribe = function(n) {
          return this._throwIfClosed(), this._checkFinalizedStatuses(n), this._innerSubscribe(n);
        }, t.prototype._innerSubscribe = function(n) {
          var r = this, i = this, o = i.hasError, a = i.isStopped, s = i.observers;
          return o || a ? on : (this.currentObservers = null, s.push(n), new Ce(function() {
            r.currentObservers = null, $e(s, n);
          }));
        }, t.prototype._checkFinalizedStatuses = function(n) {
          var r = this, i = r.hasError, o = r.thrownError, a = r.isStopped;
          i ? n.error(o) : a && n.complete();
        }, t.prototype.asObservable = function() {
          var n = new k();
          return n.source = this, n;
        }, t.create = function(n, r) {
          return new _t(n, r);
        }, t;
      }(k);
      var _t = function(e) {
        X(t, e);
        function t(n, r) {
          var i = e.call(this) || this;
          return i.destination = n, i.source = r, i;
        }
        return t.prototype.next = function(n) {
          var r, i;
          (i = (r = this.destination) === null || r === void 0 ? void 0 : r.next) === null || i === void 0 || i.call(r, n);
        }, t.prototype.error = function(n) {
          var r, i;
          (i = (r = this.destination) === null || r === void 0 ? void 0 : r.error) === null || i === void 0 || i.call(r, n);
        }, t.prototype.complete = function() {
          var n, r;
          (r = (n = this.destination) === null || n === void 0 ? void 0 : n.complete) === null || r === void 0 || r.call(n);
        }, t.prototype._subscribe = function(n) {
          var r, i;
          return (i = (r = this.source) === null || r === void 0 ? void 0 : r.subscribe(n)) !== null && i !== void 0 ? i : on;
        }, t;
      }(J);
      var cn = function(e) {
        X(t, e);
        function t(n) {
          var r = e.call(this) || this;
          return r._value = n, r;
        }
        return Object.defineProperty(t.prototype, "value", { get: function() {
          return this.getValue();
        }, enumerable: false, configurable: true }), t.prototype._subscribe = function(n) {
          var r = e.prototype._subscribe.call(this, n);
          return !r.closed && n.next(this._value), r;
        }, t.prototype.getValue = function() {
          var n = this, r = n.hasError, i = n.thrownError, o = n._value;
          if (r) throw i;
          return this._throwIfClosed(), o;
        }, t.prototype.next = function(n) {
          e.prototype.next.call(this, this._value = n);
        }, t;
      }(J);
      var Wr = { now: function() {
        return Date.now();
      } };
      var Br = function(e) {
        X(t, e);
        function t(n, r) {
          return e.call(this) || this;
        }
        return t.prototype.schedule = function(n, r) {
          return this;
        }, t;
      }(Ce);
      var Rt = { setInterval: function(e, t) {
        for (var n = [], r = 2; r < arguments.length; r++) n[r - 2] = arguments[r];
        return setInterval.apply(void 0, he([e, t], se(n)));
      }, clearInterval: function(e) {
        return clearInterval(e);
      }, delegate: void 0 };
      var Vr = function(e) {
        X(t, e);
        function t(n, r) {
          var i = e.call(this, n, r) || this;
          return i.scheduler = n, i.work = r, i.pending = false, i;
        }
        return t.prototype.schedule = function(n, r) {
          var i;
          if (r === void 0 && (r = 0), this.closed) return this;
          this.state = n;
          var o = this.id, a = this.scheduler;
          return o != null && (this.id = this.recycleAsyncId(a, o, r)), this.pending = true, this.delay = r, this.id = (i = this.id) !== null && i !== void 0 ? i : this.requestAsyncId(a, this.id, r), this;
        }, t.prototype.requestAsyncId = function(n, r, i) {
          return i === void 0 && (i = 0), Rt.setInterval(n.flush.bind(n, this), i);
        }, t.prototype.recycleAsyncId = function(n, r, i) {
          if (i === void 0 && (i = 0), i != null && this.delay === i && this.pending === false) return r;
          r != null && Rt.clearInterval(r);
        }, t.prototype.execute = function(n, r) {
          if (this.closed) return new Error("executing a cancelled action");
          this.pending = false;
          var i = this._execute(n, r);
          if (i) return i;
          this.pending === false && this.id != null && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));
        }, t.prototype._execute = function(n, r) {
          var i = false, o;
          try {
            this.work(n);
          } catch (a) {
            i = true, o = a || new Error("Scheduled action threw falsy error");
          }
          if (i) return this.unsubscribe(), o;
        }, t.prototype.unsubscribe = function() {
          if (!this.closed) {
            var n = this, r = n.id, i = n.scheduler, o = i.actions;
            this.work = this.state = this.scheduler = null, this.pending = false, $e(o, this), r != null && (this.id = this.recycleAsyncId(i, r, null)), this.delay = null, e.prototype.unsubscribe.call(this);
          }
        }, t;
      }(Br);
      var It = function() {
        function e(t, n) {
          n === void 0 && (n = e.now), this.schedulerActionCtor = t, this.now = n;
        }
        return e.prototype.schedule = function(t, n, r) {
          return n === void 0 && (n = 0), new this.schedulerActionCtor(this, t).schedule(r, n);
        }, e.now = Wr.now, e;
      }();
      var Hr = function(e) {
        X(t, e);
        function t(n, r) {
          r === void 0 && (r = It.now);
          var i = e.call(this, n, r) || this;
          return i.actions = [], i._active = false, i;
        }
        return t.prototype.flush = function(n) {
          var r = this.actions;
          if (this._active) {
            r.push(n);
            return;
          }
          var i;
          this._active = true;
          do
            if (i = n.execute(n.state, n.delay)) break;
          while (n = r.shift());
          if (this._active = false, i) {
            for (; n = r.shift(); ) n.unsubscribe();
            throw i;
          }
        }, t;
      }(It);
      var zr = new Hr(Vr);
      function Gr(e) {
        return e && C(e.schedule);
      }
      function Yr(e) {
        return e[e.length - 1];
      }
      function gt(e) {
        return Gr(Yr(e)) ? e.pop() : void 0;
      }
      var yt = function(e) {
        return e && typeof e.length == "number" && typeof e != "function";
      };
      function un(e) {
        return C(e == null ? void 0 : e.then);
      }
      function ln(e) {
        return C(e[mt]);
      }
      function fn(e) {
        return Symbol.asyncIterator && C(e == null ? void 0 : e[Symbol.asyncIterator]);
      }
      function dn(e) {
        return new TypeError("You provided " + (e !== null && typeof e == "object" ? "an invalid object" : "'" + e + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
      }
      function qr() {
        return typeof Symbol != "function" || !Symbol.iterator ? "@@iterator" : Symbol.iterator;
      }
      var pn = qr();
      function vn(e) {
        return C(e == null ? void 0 : e[pn]);
      }
      function hn(e) {
        return kr(this, arguments, function() {
          var n, r, i, o;
          return rn(this, function(a) {
            switch (a.label) {
              case 0:
                n = e.getReader(), a.label = 1;
              case 1:
                a.trys.push([1, , 9, 10]), a.label = 2;
              case 2:
                return [4, fe(n.read())];
              case 3:
                return r = a.sent(), i = r.value, o = r.done, o ? [4, fe(void 0)] : [3, 5];
              case 4:
                return [2, a.sent()];
              case 5:
                return [4, fe(i)];
              case 6:
                return [4, a.sent()];
              case 7:
                return a.sent(), [3, 2];
              case 8:
                return [3, 10];
              case 9:
                return n.releaseLock(), [7];
              case 10:
                return [2];
            }
          });
        });
      }
      function mn(e) {
        return C(e == null ? void 0 : e.getReader);
      }
      function B(e) {
        if (e instanceof k) return e;
        if (e != null) {
          if (ln(e)) return Kr(e);
          if (yt(e)) return Qr(e);
          if (un(e)) return Jr(e);
          if (fn(e)) return bn(e);
          if (vn(e)) return Xr(e);
          if (mn(e)) return Zr(e);
        }
        throw dn(e);
      }
      function Kr(e) {
        return new k(function(t) {
          var n = e[mt]();
          if (C(n.subscribe)) return n.subscribe(t);
          throw new TypeError("Provided object does not correctly implement Symbol.observable");
        });
      }
      function Qr(e) {
        return new k(function(t) {
          for (var n = 0; n < e.length && !t.closed; n++) t.next(e[n]);
          t.complete();
        });
      }
      function Jr(e) {
        return new k(function(t) {
          e.then(function(n) {
            t.closed || (t.next(n), t.complete());
          }, function(n) {
            return t.error(n);
          }).then(null, sn);
        });
      }
      function Xr(e) {
        return new k(function(t) {
          var n, r;
          try {
            for (var i = ve(e), o = i.next(); !o.done; o = i.next()) {
              var a = o.value;
              if (t.next(a), t.closed) return;
            }
          } catch (s) {
            n = { error: s };
          } finally {
            try {
              o && !o.done && (r = i.return) && r.call(i);
            } finally {
              if (n) throw n.error;
            }
          }
          t.complete();
        });
      }
      function bn(e) {
        return new k(function(t) {
          ei(e, t).catch(function(n) {
            return t.error(n);
          });
        });
      }
      function Zr(e) {
        return bn(hn(e));
      }
      function ei(e, t) {
        var n, r, i, o;
        return Or(this, void 0, void 0, function() {
          var a, s;
          return rn(this, function(c) {
            switch (c.label) {
              case 0:
                c.trys.push([0, 5, 6, 11]), n = Ar(e), c.label = 1;
              case 1:
                return [4, n.next()];
              case 2:
                if (r = c.sent(), !!r.done) return [3, 4];
                if (a = r.value, t.next(a), t.closed) return [2];
                c.label = 3;
              case 3:
                return [3, 1];
              case 4:
                return [3, 11];
              case 5:
                return s = c.sent(), i = { error: s }, [3, 11];
              case 6:
                return c.trys.push([6, , 9, 10]), r && !r.done && (o = n.return) ? [4, o.call(n)] : [3, 8];
              case 7:
                c.sent(), c.label = 8;
              case 8:
                return [3, 10];
              case 9:
                if (i) throw i.error;
                return [7];
              case 10:
                return [7];
              case 11:
                return t.complete(), [2];
            }
          });
        });
      }
      function te(e, t, n, r, i) {
        r === void 0 && (r = 0), i === void 0 && (i = false);
        var o = t.schedule(function() {
          n(), i ? e.add(this.schedule(null, r)) : this.unsubscribe();
        }, r);
        if (e.add(o), !i) return o;
      }
      function gn(e, t) {
        return t === void 0 && (t = 0), U(function(n, r) {
          n.subscribe(F(r, function(i) {
            return te(r, e, function() {
              return r.next(i);
            }, t);
          }, function() {
            return te(r, e, function() {
              return r.complete();
            }, t);
          }, function(i) {
            return te(r, e, function() {
              return r.error(i);
            }, t);
          }));
        });
      }
      function yn(e, t) {
        return t === void 0 && (t = 0), U(function(n, r) {
          r.add(e.schedule(function() {
            return n.subscribe(r);
          }, t));
        });
      }
      function ti(e, t) {
        return B(e).pipe(yn(t), gn(t));
      }
      function ni(e, t) {
        return B(e).pipe(yn(t), gn(t));
      }
      function ri(e, t) {
        return new k(function(n) {
          var r = 0;
          return t.schedule(function() {
            r === e.length ? n.complete() : (n.next(e[r++]), n.closed || this.schedule());
          });
        });
      }
      function ii(e, t) {
        return new k(function(n) {
          var r;
          return te(n, t, function() {
            r = e[pn](), te(n, t, function() {
              var i, o, a;
              try {
                i = r.next(), o = i.value, a = i.done;
              } catch (s) {
                n.error(s);
                return;
              }
              a ? n.complete() : n.next(o);
            }, 0, true);
          }), function() {
            return C(r == null ? void 0 : r.return) && r.return();
          };
        });
      }
      function wn(e, t) {
        if (!e) throw new Error("Iterable cannot be null");
        return new k(function(n) {
          te(n, t, function() {
            var r = e[Symbol.asyncIterator]();
            te(n, t, function() {
              r.next().then(function(i) {
                i.done ? n.complete() : n.next(i.value);
              });
            }, 0, true);
          });
        });
      }
      function oi(e, t) {
        return wn(hn(e), t);
      }
      function ai(e, t) {
        if (e != null) {
          if (ln(e)) return ti(e, t);
          if (yt(e)) return ri(e, t);
          if (un(e)) return ni(e, t);
          if (fn(e)) return wn(e, t);
          if (vn(e)) return ii(e, t);
          if (mn(e)) return oi(e, t);
        }
        throw dn(e);
      }
      function Ye(e, t) {
        return t ? ai(e, t) : B(e);
      }
      function Mt() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
        var n = gt(e);
        return Ye(e, n);
      }
      function si(e) {
        return e instanceof Date && !isNaN(e);
      }
      var ci = vt(function(e) {
        return function(n) {
          n === void 0 && (n = null), e(this), this.message = "Timeout has occurred", this.name = "TimeoutError", this.info = n;
        };
      });
      function ui(e, t) {
        var n = si(e) ? { first: e } : typeof e == "number" ? { each: e } : e, r = n.first, i = n.each, o = n.with, a = o === void 0 ? li : o, s = n.scheduler, c = s === void 0 ? zr : s, u = n.meta, l = u === void 0 ? null : u;
        if (r == null && i == null) throw new TypeError("No timeout provided.");
        return U(function(d, h) {
          var p, b, v = null, g = 0, m = function(E) {
            b = te(h, c, function() {
              try {
                p.unsubscribe(), B(a({ meta: l, lastValue: v, seen: g })).subscribe(h);
              } catch (w) {
                h.error(w);
              }
            }, E);
          };
          p = d.subscribe(F(h, function(E) {
            b == null || b.unsubscribe(), g++, h.next(v = E), i > 0 && m(i);
          }, void 0, void 0, function() {
            b != null && b.closed || b == null || b.unsubscribe(), v = null;
          })), !g && m(r != null ? typeof r == "number" ? r : +r - c.now() : i);
        });
      }
      function li(e) {
        throw new ci(e);
      }
      function O(e, t) {
        return U(function(n, r) {
          var i = 0;
          n.subscribe(F(r, function(o) {
            r.next(e.call(t, o, i++));
          }));
        });
      }
      var fi = Array.isArray;
      function di(e, t) {
        return fi(t) ? e.apply(void 0, he([], se(t))) : e(t);
      }
      function pi(e) {
        return O(function(t) {
          return di(e, t);
        });
      }
      function vi(e, t, n, r, i, o, a, s) {
        var c = [], u = 0, l = 0, d = false, h = function() {
          d && !c.length && !u && t.complete();
        }, p = function(v) {
          return u < r ? b(v) : c.push(v);
        }, b = function(v) {
          u++;
          var g = false;
          B(n(v, l++)).subscribe(F(t, function(m) {
            t.next(m);
          }, function() {
            g = true;
          }, void 0, function() {
            if (g) try {
              u--;
              for (var m = function() {
                var E = c.shift();
                a || b(E);
              }; c.length && u < r; ) m();
              h();
            } catch (E) {
              t.error(E);
            }
          }));
        };
        return e.subscribe(F(t, p, function() {
          d = true, h();
        })), function() {
        };
      }
      function wt(e, t, n) {
        return n === void 0 && (n = 1 / 0), C(t) ? wt(function(r, i) {
          return O(function(o, a) {
            return t(r, o, i, a);
          })(B(e(r, i)));
        }, n) : (typeof t == "number" && (n = t), U(function(r, i) {
          return vi(r, i, e, n);
        }));
      }
      function hi(e) {
        return wt(bt, e);
      }
      function mi() {
        return hi(1);
      }
      function Ue() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
        return mi()(Ye(e, gt(e)));
      }
      var bi = ["addListener", "removeListener"];
      var gi = ["addEventListener", "removeEventListener"];
      var yi = ["on", "off"];
      function ot(e, t, n, r) {
        if (C(n) && (r = n, n = void 0), r) return ot(e, t, n).pipe(pi(r));
        var i = se(Si(e) ? gi.map(function(s) {
          return function(c) {
            return e[s](t, c, n);
          };
        }) : wi(e) ? bi.map(Dt(e, t)) : Ei(e) ? yi.map(Dt(e, t)) : [], 2), o = i[0], a = i[1];
        if (!o && yt(e)) return wt(function(s) {
          return ot(s, t, n);
        })(B(e));
        if (!o) throw new TypeError("Invalid event target");
        return new k(function(s) {
          var c = function() {
            for (var u = [], l = 0; l < arguments.length; l++) u[l] = arguments[l];
            return s.next(1 < u.length ? u : u[0]);
          };
          return o(c), function() {
            return a(c);
          };
        });
      }
      function Dt(e, t) {
        return function(n) {
          return function(r) {
            return e[n](t, r);
          };
        };
      }
      function wi(e) {
        return C(e.addListener) && C(e.removeListener);
      }
      function Ei(e) {
        return C(e.on) && C(e.off);
      }
      function Si(e) {
        return C(e.addEventListener) && C(e.removeEventListener);
      }
      function qe(e, t) {
        return U(function(n, r) {
          var i = 0;
          n.subscribe(F(r, function(o) {
            return e.call(t, o, i++) && r.next(o);
          }));
        });
      }
      function xi(e, t, n, r, i) {
        return function(o, a) {
          var s = n, c = t, u = 0;
          o.subscribe(F(a, function(l) {
            var d = u++;
            c = s ? e(c, l, d) : (s = true, l), a.next(c);
          }, i));
        };
      }
      function Ti(e, t) {
        return t === void 0 && (t = bt), e = e ?? Pi, U(function(n, r) {
          var i, o = true;
          n.subscribe(F(r, function(a) {
            var s = t(a);
            (o || !e(i, s)) && (o = false, i = s, r.next(a));
          }));
        });
      }
      function Pi(e, t) {
        return e === t;
      }
      function at(e, t) {
        return U(xi(e, t, arguments.length >= 2, true));
      }
      function Ci(e) {
        e === void 0 && (e = {});
        var t = e.connector, n = t === void 0 ? function() {
          return new J();
        } : t, r = e.resetOnError, i = r === void 0 ? true : r, o = e.resetOnComplete, a = o === void 0 ? true : o, s = e.resetOnRefCountZero, c = s === void 0 ? true : s;
        return function(u) {
          var l, d, h, p = 0, b = false, v = false, g = function() {
            d == null || d.unsubscribe(), d = void 0;
          }, m = function() {
            g(), l = h = void 0, b = v = false;
          }, E = function() {
            var w = l;
            m(), w == null || w.unsubscribe();
          };
          return U(function(w, P) {
            p++, !v && !b && g();
            var y = h = h ?? n();
            P.add(function() {
              p--, p === 0 && !v && !b && (d = Xe(E, c));
            }), y.subscribe(P), !l && p > 0 && (l = new xe({ next: function(S) {
              return y.next(S);
            }, error: function(S) {
              v = true, g(), d = Xe(m, i, S), y.error(S);
            }, complete: function() {
              b = true, g(), d = Xe(m, a), y.complete();
            } }), B(w).subscribe(l));
          })(u);
        };
      }
      function Xe(e, t) {
        for (var n = [], r = 2; r < arguments.length; r++) n[r - 2] = arguments[r];
        if (t === true) {
          e();
          return;
        }
        if (t !== false) {
          var i = new xe({ next: function() {
            i.unsubscribe(), e();
          } });
          return B(t.apply(void 0, he([], se(n)))).subscribe(i);
        }
      }
      function Oi(e) {
        return U(function(t, n) {
          var r = false, i = F(n, function() {
            i == null || i.unsubscribe(), r = true;
          }, Fe);
          B(e).subscribe(i), t.subscribe(F(n, function(o) {
            return r && n.next(o);
          }));
        });
      }
      function R() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
        var n = gt(e);
        return U(function(r, i) {
          (n ? Ue(e, r, n) : Ue(e, r)).subscribe(i);
        });
      }
      function En(e, t) {
        return U(function(n, r) {
          var i = null, o = 0, a = false, s = function() {
            return a && !i && r.complete();
          };
          n.subscribe(F(r, function(c) {
            i == null || i.unsubscribe();
            var u = 0, l = o++;
            B(e(c, l)).subscribe(i = F(r, function(d) {
              return r.next(t ? t(c, d, l, u++) : d);
            }, function() {
              i = null, s();
            }));
          }, function() {
            a = true, s();
          }));
        });
      }
      function Nt(e) {
        return U(function(t, n) {
          B(e).subscribe(F(n, function() {
            return n.complete();
          }, Fe)), !n.closed && t.subscribe(n);
        });
      }
      var ki = Object.defineProperty;
      var Ai = Object.defineProperties;
      var Li = Object.getOwnPropertyDescriptors;
      var $t = Object.getOwnPropertySymbols;
      var _i = Object.prototype.hasOwnProperty;
      var Ri = Object.prototype.propertyIsEnumerable;
      var Ft = (e, t, n) => t in e ? ki(e, t, { enumerable: true, configurable: true, writable: true, value: n }) : e[t] = n;
      var Q = (e, t) => {
        for (var n in t || (t = {})) _i.call(t, n) && Ft(e, n, t[n]);
        if ($t) for (var n of $t(t)) Ri.call(t, n) && Ft(e, n, t[n]);
        return e;
      };
      var Ee = (e, t) => Ai(e, Li(t));
      var W = (e, t, n) => new Promise((r, i) => {
        var o = (c) => {
          try {
            s(n.next(c));
          } catch (u) {
            i(u);
          }
        }, a = (c) => {
          try {
            s(n.throw(c));
          } catch (u) {
            i(u);
          }
        }, s = (c) => c.done ? r(c.value) : Promise.resolve(c.value).then(o, a);
        s((n = n.apply(e, t)).next());
      });
      var Sn = "lk";
      function D(e) {
        return typeof e > "u" ? false : Ii(e) || Mi(e);
      }
      function Ii(e) {
        var t;
        return e ? e.hasOwnProperty("participant") && e.hasOwnProperty("source") && e.hasOwnProperty("track") && typeof ((t = e.publication) == null ? void 0 : t.track) < "u" : false;
      }
      function Mi(e) {
        return e ? e.hasOwnProperty("participant") && e.hasOwnProperty("source") && e.hasOwnProperty("publication") && typeof e.publication < "u" : false;
      }
      function Te(e) {
        return e ? e.hasOwnProperty("participant") && e.hasOwnProperty("source") && typeof e.publication > "u" : false;
      }
      function M(e) {
        if (typeof e == "string" || typeof e == "number") return `${e}`;
        if (Te(e)) return `${e.participant.identity}_${e.source}_placeholder`;
        if (D(e)) return `${e.participant.identity}_${e.publication.source}_${e.publication.trackSid}`;
        throw new Error(`Can't generate a id for the given track reference: ${e}`);
      }
      function Di(e, t) {
        return e === void 0 || t === void 0 ? false : D(e) && D(t) ? e.publication.trackSid === t.publication.trackSid : M(e) === M(t);
      }
      function Ni(e, t) {
        return typeof t > "u" ? false : D(e) ? t.some((n) => n.participant.identity === e.participant.identity && D(n) && n.publication.trackSid === e.publication.trackSid) : Te(e) ? t.some((n) => n.participant.identity === e.participant.identity && Te(n) && n.source === e.source) : false;
      }
      function $i(e, t) {
        return Te(e) && D(t) && t.participant.identity === e.participant.identity && t.source === e.source;
      }
      function Fi() {
        const e = document.createElement("p");
        e.style.width = "100%", e.style.height = "200px";
        const t = document.createElement("div");
        t.style.position = "absolute", t.style.top = "0px", t.style.left = "0px", t.style.visibility = "hidden", t.style.width = "200px", t.style.height = "150px", t.style.overflow = "hidden", t.appendChild(e), document.body.appendChild(t);
        const n = e.offsetWidth;
        t.style.overflow = "scroll";
        let r = e.offsetWidth;
        return n === r && (r = t.clientWidth), document.body.removeChild(t), n - r;
      }
      function Ui() {
        return typeof document < "u";
      }
      function ji(e) {
        e = Q({}, e);
        const t = "(?:(?:[a-z]+:)?//)?", n = "(?:\\S+(?::\\S*)?@)?", r = new RegExp("(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}", "g").source, u = `(?:${t}|www\\.)${n}(?:localhost|${r}|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#][^\\s"]*)?`;
        return e.exact ? new RegExp(`(?:^${u}$)`, "i") : new RegExp(u, "ig");
      }
      var Ut = "[^\\.\\s@:](?:[^\\s@:]*[^\\s@:\\.])?@[^\\.\\s@]+(?:\\.[^\\.\\s@]+)*";
      function Wi({ exact: e } = {}) {
        return e ? new RegExp(`^${Ut}$`) : new RegExp(Ut, "g");
      }
      function Bi(e, t, n) {
        return br(e, t, () => W(this, null, function* () {
          const { x: i, y: o } = yield Er(e, t, { placement: "top", middleware: [gr(6), wr(), yr({ padding: 5 })] });
          n == null || n(i, o);
        }));
      }
      function Vi(e, t) {
        return !e.contains(t.target);
      }
      var Hi = () => ({ email: Wi(), url: ji({}) });
      function zi(e, t) {
        const n = Object.entries(t).map(([o, a], s) => Array.from(e.matchAll(a)).map(({ index: c, 0: u }) => ({ type: o, weight: s, content: u, index: c ?? 0 }))).flat().sort((o, a) => {
          const s = o.index - a.index;
          return s !== 0 ? s : o.weight - a.weight;
        }).filter(({ index: o }, a, s) => {
          if (a === 0) return true;
          const c = s[a - 1];
          return c.index + c.content.length <= o;
        }), r = [];
        let i = 0;
        for (const { type: o, content: a, index: s } of n) s > i && r.push(e.substring(i, s)), r.push({ type: o, content: a }), i = s + a.length;
        return e.length > i && r.push(e.substring(i)), r;
      }
      var Gi = [f.RoomEvent.ConnectionStateChanged, f.RoomEvent.RoomMetadataChanged, f.RoomEvent.ActiveSpeakersChanged, f.RoomEvent.ConnectionQualityChanged, f.RoomEvent.ParticipantConnected, f.RoomEvent.ParticipantDisconnected, f.RoomEvent.ParticipantPermissionsChanged, f.RoomEvent.ParticipantMetadataChanged, f.RoomEvent.ParticipantNameChanged, f.RoomEvent.ParticipantAttributesChanged, f.RoomEvent.TrackMuted, f.RoomEvent.TrackUnmuted, f.RoomEvent.TrackPublished, f.RoomEvent.TrackUnpublished, f.RoomEvent.TrackStreamStateChanged, f.RoomEvent.TrackSubscriptionFailed, f.RoomEvent.TrackSubscriptionPermissionChanged, f.RoomEvent.TrackSubscriptionStatusChanged];
      var xn = [...Gi, f.RoomEvent.LocalTrackPublished, f.RoomEvent.LocalTrackUnpublished];
      var Yi = [f.ParticipantEvent.TrackPublished, f.ParticipantEvent.TrackUnpublished, f.ParticipantEvent.TrackMuted, f.ParticipantEvent.TrackUnmuted, f.ParticipantEvent.TrackStreamStateChanged, f.ParticipantEvent.TrackSubscribed, f.ParticipantEvent.TrackUnsubscribed, f.ParticipantEvent.TrackSubscriptionPermissionChanged, f.ParticipantEvent.TrackSubscriptionFailed, f.ParticipantEvent.LocalTrackPublished, f.ParticipantEvent.LocalTrackUnpublished];
      var qi = [f.ParticipantEvent.ConnectionQualityChanged, f.ParticipantEvent.IsSpeakingChanged, f.ParticipantEvent.ParticipantMetadataChanged, f.ParticipantEvent.ParticipantPermissionsChanged, f.ParticipantEvent.TrackMuted, f.ParticipantEvent.TrackUnmuted, f.ParticipantEvent.TrackPublished, f.ParticipantEvent.TrackUnpublished, f.ParticipantEvent.TrackStreamStateChanged, f.ParticipantEvent.TrackSubscriptionFailed, f.ParticipantEvent.TrackSubscriptionPermissionChanged, f.ParticipantEvent.TrackSubscriptionStatusChanged];
      var Tn = [...qi, f.ParticipantEvent.LocalTrackPublished, f.ParticipantEvent.LocalTrackUnpublished];
      var L = Cr.getLogger("lk-components-js");
      L.setDefaultLevel("WARN");
      function Ki(e, t = {}) {
        var n;
        L.setLevel(e), f.setLogLevel((n = t.liveKitClientLogLevel) != null ? n : e);
      }
      function Qi(e, t = {}) {
        var n;
        const r = L.methodFactory;
        L.methodFactory = (i, o, a) => {
          const s = r(i, o, a), c = f.LogLevel[i], u = c >= o && c < f.LogLevel.silent;
          return (l, d) => {
            d ? s(l, d) : s(l), u && e(c, l, d);
          };
        }, L.setLevel(L.getLevel()), f.setLogExtension((n = t.liveKitClientLogExtension) != null ? n : e);
      }
      var Ji = [{ columns: 1, rows: 1 }, { columns: 1, rows: 2, orientation: "portrait" }, { columns: 2, rows: 1, orientation: "landscape" }, { columns: 2, rows: 2, minWidth: 560 }, { columns: 3, rows: 3, minWidth: 700 }, { columns: 4, rows: 4, minWidth: 960 }, { columns: 5, rows: 5, minWidth: 1100 }];
      function Pn(e, t, n, r) {
        if (e.length < 1) throw new Error("At least one grid layout definition must be provided.");
        const i = Xi(e);
        if (n <= 0 || r <= 0) return i[0];
        let o = 0;
        const a = n / r > 1 ? "landscape" : "portrait";
        let s = i.find((c, u, l) => {
          o = u;
          const d = l.findIndex((h, p) => {
            const b = !h.orientation || h.orientation === a, v = p > u, g = h.maxTiles === c.maxTiles;
            return v && g && b;
          }) !== -1;
          return c.maxTiles >= t && !d;
        });
        if (s === void 0) if (s = i[i.length - 1], s) L.warn(`No layout found for: participantCount: ${t}, width/height: ${n}/${r} fallback to biggest available layout (${s}).`);
        else throw new Error("No layout or fallback layout found.");
        if ((n < s.minWidth || r < s.minHeight) && o > 0) {
          const c = i[o - 1];
          s = Pn(i.slice(0, o), c.maxTiles, n, r);
        }
        return s;
      }
      function Xi(e) {
        return [...e].map((t) => {
          var n, r;
          return { name: `${t.columns}x${t.rows}`, columns: t.columns, rows: t.rows, maxTiles: t.columns * t.rows, minWidth: (n = t.minWidth) != null ? n : 0, minHeight: (r = t.minHeight) != null ? r : 0, orientation: t.orientation };
        }).sort((t, n) => t.maxTiles !== n.maxTiles ? t.maxTiles - n.maxTiles : t.minWidth !== 0 || n.minWidth !== 0 ? t.minWidth - n.minWidth : t.minHeight !== 0 || n.minHeight !== 0 ? t.minHeight - n.minHeight : 0);
      }
      function Zi() {
        return typeof navigator < "u" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;
      }
      function eo(e, t) {
        var n;
        return Ee(Q({}, e), { receivedAtMediaTimestamp: (n = t.rtpTimestamp) != null ? n : 0, receivedAt: t.timestamp });
      }
      function to(e, t, n) {
        return [...e, ...t].reduceRight((r, i) => (r.find((o) => o.id === i.id) || r.unshift(i), r), []).slice(0 - n);
      }
      var no = [];
      var ro = { showChat: false, unreadMessages: 0, showSettings: false };
      function Cn(e) {
        return typeof e == "object";
      }
      function io(e) {
        return Array.isArray(e) && e.filter(Cn).length > 0;
      }
      function On(e, t) {
        return t.audioLevel - e.audioLevel;
      }
      function kn(e, t) {
        return e.isSpeaking === t.isSpeaking ? 0 : e.isSpeaking ? -1 : 1;
      }
      function An(e, t) {
        var n, r, i, o;
        return e.lastSpokeAt !== void 0 || t.lastSpokeAt !== void 0 ? ((r = (n = t.lastSpokeAt) == null ? void 0 : n.getTime()) != null ? r : 0) - ((o = (i = e.lastSpokeAt) == null ? void 0 : i.getTime()) != null ? o : 0) : 0;
      }
      function je(e, t) {
        var n, r, i, o;
        return ((r = (n = e.joinedAt) == null ? void 0 : n.getTime()) != null ? r : 0) - ((o = (i = t.joinedAt) == null ? void 0 : i.getTime()) != null ? o : 0);
      }
      function oo(e, t) {
        return D(e) ? D(t) ? 0 : -1 : D(t) ? 1 : 0;
      }
      function ao(e, t) {
        const n = e.participant.isCameraEnabled, r = t.participant.isCameraEnabled;
        return n !== r ? n ? -1 : 1 : 0;
      }
      function so(e) {
        const t = [], n = [], r = [], i = [];
        e.forEach((s) => {
          s.participant.isLocal && s.source === f.Track.Source.Camera ? t.push(s) : s.source === f.Track.Source.ScreenShare ? n.push(s) : s.source === f.Track.Source.Camera ? r.push(s) : i.push(s);
        });
        const o = co(n), a = uo(r);
        return [...t, ...o, ...a, ...i];
      }
      function co(e) {
        const t = [], n = [];
        return e.forEach((i) => {
          i.participant.isLocal ? t.push(i) : n.push(i);
        }), t.sort((i, o) => je(i.participant, o.participant)), n.sort((i, o) => je(i.participant, o.participant)), [...n, ...t];
      }
      function uo(e) {
        const t = [], n = [];
        return e.forEach((r) => {
          r.participant.isLocal ? t.push(r) : n.push(r);
        }), n.sort((r, i) => r.participant.isSpeaking && i.participant.isSpeaking ? On(r.participant, i.participant) : r.participant.isSpeaking !== i.participant.isSpeaking ? kn(r.participant, i.participant) : r.participant.lastSpokeAt !== i.participant.lastSpokeAt ? An(r.participant, i.participant) : D(r) !== D(i) ? oo(r, i) : r.participant.isCameraEnabled !== i.participant.isCameraEnabled ? ao(r, i) : je(r.participant, i.participant)), [...t, ...n];
      }
      function lo(e) {
        const t = [...e];
        t.sort((r, i) => {
          if (r.isSpeaking && i.isSpeaking) return On(r, i);
          if (r.isSpeaking !== i.isSpeaking) return kn(r, i);
          if (r.lastSpokeAt !== i.lastSpokeAt) return An(r, i);
          const o = r.videoTrackPublications.size > 0, a = i.videoTrackPublications.size > 0;
          return o !== a ? o ? -1 : 1 : je(r, i);
        });
        const n = t.find((r) => r.isLocal);
        if (n) {
          const r = t.indexOf(n);
          r >= 0 && (t.splice(r, 1), t.length > 0 ? t.splice(0, 0, n) : t.push(n));
        }
        return t;
      }
      function fo(e, t) {
        return e.reduce((n, r, i) => i % t === 0 ? [...n, [r]] : [...n.slice(0, -1), [...n.slice(-1)[0], r]], []);
      }
      function jt(e, t) {
        const n = Math.max(e.length, t.length);
        return new Array(n).fill([]).map((r, i) => [e[i], t[i]]);
      }
      function We(e, t, n) {
        return e.filter((r) => !t.map((i) => n(i)).includes(n(r)));
      }
      function st(e) {
        return e.map((t) => typeof t == "string" || typeof t == "number" ? `${t}` : M(t));
      }
      function po(e, t) {
        return { dropped: We(e, t, M), added: We(t, e, M) };
      }
      function vo(e) {
        return e.added.length !== 0 || e.dropped.length !== 0;
      }
      function ct(e, t) {
        const n = t.findIndex((r) => M(r) === M(e));
        if (n === -1) throw new Error(`Element not part of the array: ${M(e)} not in ${st(t)}`);
        return n;
      }
      function ho(e, t, n) {
        const r = ct(e, n), i = ct(t, n);
        return n.splice(r, 1, t), n.splice(i, 1, e), n;
      }
      function mo(e, t) {
        const n = ct(e, t);
        return t.splice(n, 1), t;
      }
      function bo(e, t) {
        return [...t, e];
      }
      function Ze(e, t) {
        return fo(e, t);
      }
      function go(e, t, n) {
        let r = yo(e, t);
        if (r.length < t.length) {
          const a = We(t, r, M);
          r = [...r, ...a];
        }
        const i = Ze(r, n), o = Ze(t, n);
        if (jt(i, o).forEach(([a, s], c) => {
          if (a && s) {
            const u = Ze(r, n)[c], l = po(u, s);
            vo(l) && (L.debug(`Detected visual changes on page: ${c}, current: ${st(a)}, next: ${st(s)}`, { changes: l }), l.added.length === l.dropped.length && jt(l.added, l.dropped).forEach(([d, h]) => {
              if (d && h) r = ho(d, h, r);
              else throw new Error(`For a swap action we need a addition and a removal one is missing: ${d}, ${h}`);
            }), l.added.length === 0 && l.dropped.length > 0 && l.dropped.forEach((d) => {
              r = mo(d, r);
            }), l.added.length > 0 && l.dropped.length === 0 && l.added.forEach((d) => {
              r = bo(d, r);
            }));
          }
        }), r.length > t.length) {
          const a = We(r, t, M);
          r = r.filter((s) => !a.map(M).includes(M(s)));
        }
        return r;
      }
      function yo(e, t) {
        return e.map((n) => {
          const r = t.find((i) => M(n) === M(i) || typeof n != "number" && Te(n) && D(i) && $i(n, i));
          return r ?? n;
        });
      }
      function N(e) {
        return `${Sn}-${e}`;
      }
      function wo(e) {
        const t = ut(e), n = Et(e.participant).pipe(O(() => ut(e)), R(t));
        return { className: N(e.source === f.Track.Source.Camera || e.source === f.Track.Source.ScreenShare ? "participant-media-video" : "participant-media-audio"), trackObserver: n };
      }
      function ut(e) {
        if (D(e)) return e.publication;
        {
          const { source: t, name: n, participant: r } = e;
          if (t && n) return r.getTrackPublications().find((i) => i.source === t && i.trackName === n);
          if (n) return r.getTrackPublicationByName(n);
          if (t) return r.getTrackPublication(t);
          throw new Error("At least one of source and name needs to be defined");
        }
      }
      function ce(e, ...t) {
        return new k((r) => {
          const i = () => {
            r.next(e);
          };
          return t.forEach((a) => {
            e.on(a, i);
          }), () => {
            t.forEach((a) => {
              e.off(a, i);
            });
          };
        }).pipe(R(e));
      }
      function be(e, t) {
        return new k((r) => {
          const i = (...a) => {
            r.next(a);
          };
          return e.on(t, i), () => {
            e.off(t, i);
          };
        });
      }
      function Eo(e) {
        return be(e, f.RoomEvent.ConnectionStateChanged).pipe(O(([t]) => t), R(e.state));
      }
      function So(e) {
        return ce(e, f.RoomEvent.RoomMetadataChanged, f.RoomEvent.ConnectionStateChanged).pipe(O((n) => ({ name: n.name, metadata: n.metadata })));
      }
      function xo(e) {
        return be(e, f.RoomEvent.ActiveSpeakersChanged).pipe(O(([t]) => t));
      }
      function To(e, t, n = true) {
        const r = new k((o) => {
          f.Room.getLocalDevices(e, n).then((a) => {
            o.next(a), o.complete();
          }).catch((a) => {
            t == null || t(a), o.next([]), o.complete();
          });
        }), i = new k((o) => {
          var a;
          const s = () => W(this, null, function* () {
            try {
              const c = yield f.Room.getLocalDevices(e, n);
              o.next(c);
            } catch (c) {
              t == null || t(c);
            }
          });
          if (typeof window < "u") {
            if (!window.isSecureContext) throw new Error("Accessing media devices is available only in secure contexts (HTTPS and localhost), in some or all supporting browsers. See: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices");
            (a = navigator == null ? void 0 : navigator.mediaDevices) == null || a.addEventListener("devicechange", s);
          }
          return () => {
            var c;
            (c = navigator == null ? void 0 : navigator.mediaDevices) == null || c.removeEventListener("devicechange", s);
          };
        });
        return Ue(r, i);
      }
      function Po(e) {
        return be(e, f.RoomEvent.DataReceived);
      }
      function Ln(e) {
        return ce(e, f.RoomEvent.AudioPlaybackStatusChanged).pipe(O((n) => ({ canPlayAudio: n.canPlaybackAudio })));
      }
      function Co(e) {
        return ce(e, f.RoomEvent.VideoPlaybackStatusChanged).pipe(O((n) => ({ canPlayVideo: n.canPlaybackVideo })));
      }
      function Oo(e, t) {
        return be(e, f.RoomEvent.ActiveDeviceChanged).pipe(qe(([n]) => n === t), O(([n, r]) => (L.debug("activeDeviceObservable | RoomEvent.ActiveDeviceChanged", { kind: n, deviceId: r }), r)));
      }
      function ko(e, t) {
        return be(e, f.RoomEvent.ParticipantEncryptionStatusChanged).pipe(qe(([, n]) => (t == null ? void 0 : t.identity) === (n == null ? void 0 : n.identity) || !n && (t == null ? void 0 : t.identity) === e.localParticipant.identity), O(([n]) => n), R(t != null && t.isLocal ? t.isE2EEEnabled : !!(t != null && t.isEncrypted)));
      }
      function Ao(e) {
        return be(e, f.RoomEvent.RecordingStatusChanged).pipe(O(([t]) => t), R(e.isRecording));
      }
      function ge(e, ...t) {
        return new k((r) => {
          const i = () => {
            r.next(e);
          };
          return t.forEach((a) => {
            e.on(a, i);
          }), () => {
            t.forEach((a) => {
              e.off(a, i);
            });
          };
        }).pipe(R(e));
      }
      function Et(e) {
        return ge(e, f.ParticipantEvent.TrackMuted, f.ParticipantEvent.TrackUnmuted, f.ParticipantEvent.ParticipantPermissionsChanged, f.ParticipantEvent.TrackPublished, f.ParticipantEvent.TrackUnpublished, f.ParticipantEvent.LocalTrackPublished, f.ParticipantEvent.LocalTrackUnpublished, f.ParticipantEvent.MediaDevicesError, f.ParticipantEvent.TrackSubscriptionStatusChanged).pipe(O((n) => {
          const { isMicrophoneEnabled: r, isCameraEnabled: i, isScreenShareEnabled: o } = n, a = n.getTrackPublication(f.Track.Source.Microphone), s = n.getTrackPublication(f.Track.Source.Camera);
          return { isCameraEnabled: i, isMicrophoneEnabled: r, isScreenShareEnabled: o, cameraTrack: s, microphoneTrack: a, participant: n };
        }));
      }
      function _n(e) {
        return e ? ge(e, f.ParticipantEvent.ParticipantMetadataChanged, f.ParticipantEvent.ParticipantNameChanged).pipe(O(({ name: n, identity: r, metadata: i }) => ({ name: n, identity: r, metadata: i })), R({ name: e.name, identity: e.identity, metadata: e.metadata })) : void 0;
      }
      function Lo(e) {
        return Ke(e, f.ParticipantEvent.ConnectionQualityChanged).pipe(O(([n]) => n), R(e.connectionQuality));
      }
      function Ke(e, t) {
        return new k((r) => {
          const i = (...a) => {
            r.next(a);
          };
          return e.on(t, i), () => {
            e.off(t, i);
          };
        });
      }
      function Rn(e) {
        var t, n, r, i;
        return ge(e.participant, f.ParticipantEvent.TrackMuted, f.ParticipantEvent.TrackUnmuted, f.ParticipantEvent.TrackSubscribed, f.ParticipantEvent.TrackUnsubscribed, f.ParticipantEvent.LocalTrackPublished, f.ParticipantEvent.LocalTrackUnpublished).pipe(O((o) => {
          var a, s;
          const c = (a = e.publication) != null ? a : o.getTrackPublication(e.source);
          return (s = c == null ? void 0 : c.isMuted) != null ? s : true;
        }), R((i = (r = (t = e.publication) == null ? void 0 : t.isMuted) != null ? r : (n = e.participant.getTrackPublication(e.source)) == null ? void 0 : n.isMuted) != null ? i : true));
      }
      function _o(e) {
        return Ke(e, f.ParticipantEvent.IsSpeakingChanged).pipe(O(([t]) => t));
      }
      function Ro(e, t = {}) {
        var n;
        let r;
        const i = new k((c) => (r = c, () => s.unsubscribe())).pipe(R(Array.from(e.remoteParticipants.values()))), o = (n = t.additionalRoomEvents) != null ? n : xn, a = Array.from(/* @__PURE__ */ new Set([f.RoomEvent.ParticipantConnected, f.RoomEvent.ParticipantDisconnected, f.RoomEvent.ConnectionStateChanged, ...o])), s = ce(e, ...a).subscribe((c) => r == null ? void 0 : r.next(Array.from(c.remoteParticipants.values())));
        return e.remoteParticipants.size > 0 && (r == null || r.next(Array.from(e.remoteParticipants.values()))), i;
      }
      function Io(e, t, n = {}) {
        var r;
        const i = (r = n.additionalEvents) != null ? r : Tn;
        return ce(e, f.RoomEvent.ParticipantConnected, f.RoomEvent.ParticipantDisconnected, f.RoomEvent.ConnectionStateChanged).pipe(En((a) => {
          const s = a.getParticipantByIdentity(t);
          return s ? ge(s, ...i) : new k((c) => c.next(void 0));
        }), R(e.getParticipantByIdentity(t)));
      }
      function Mo(e) {
        return Ke(e, f.ParticipantEvent.ParticipantPermissionsChanged).pipe(O(() => e.permissions), R(e.permissions));
      }
      function Do(e, { kind: t, identity: n }, r = {}) {
        var i;
        const o = (i = r.additionalEvents) != null ? i : Tn, a = (c) => {
          let u = true;
          return t && (u = u && c.kind === t), n && (u = u && c.identity === n), u;
        };
        return ce(e, f.RoomEvent.ParticipantConnected, f.RoomEvent.ParticipantDisconnected, f.RoomEvent.ConnectionStateChanged).pipe(En((c) => {
          const u = Array.from(c.remoteParticipants.values()).find((l) => a(l));
          return u ? ge(u, ...o) : new k((l) => l.next(void 0));
        }), R(Array.from(e.remoteParticipants.values()).find((c) => a(c))));
      }
      function No(e) {
        return typeof e > "u" ? new k() : Ke(e, f.ParticipantEvent.AttributesChanged).pipe(O(([t]) => ({ changed: t, attributes: e.attributes })), R({ changed: e.attributes, attributes: e.attributes }));
      }
      function $o(e, t, n, r, i) {
        const { localParticipant: o } = t, a = (d, h) => {
          let p = false;
          switch (d) {
            case f.Track.Source.Camera:
              p = h.isCameraEnabled;
              break;
            case f.Track.Source.Microphone:
              p = h.isMicrophoneEnabled;
              break;
            case f.Track.Source.ScreenShare:
              p = h.isScreenShareEnabled;
              break;
          }
          return p;
        }, s = Et(o).pipe(O((d) => a(e, d.participant)), R(a(e, o))), c = new J(), u = (d, h) => W(this, null, function* () {
          try {
            switch (h ?? (h = n), c.next(true), e) {
              case f.Track.Source.Camera:
                return yield o.setCameraEnabled(d ?? !o.isCameraEnabled, h, r), o.isCameraEnabled;
              case f.Track.Source.Microphone:
                return yield o.setMicrophoneEnabled(d ?? !o.isMicrophoneEnabled, h, r), o.isMicrophoneEnabled;
              case f.Track.Source.ScreenShare:
                return yield o.setScreenShareEnabled(d ?? !o.isScreenShareEnabled, h, r), o.isScreenShareEnabled;
              default:
                throw new TypeError("Tried to toggle unsupported source");
            }
          } catch (p) {
            if (i && p instanceof Error) {
              i == null || i(p);
              return;
            } else throw p;
          } finally {
            c.next(false);
          }
        });
        return { className: N("button"), toggle: u, enabledObserver: s, pendingObserver: c.asObservable() };
      }
      function Fo() {
        let e = false;
        const t = new J(), n = new J(), r = (o) => W(this, null, function* () {
          n.next(true), e = o ?? !e, t.next(e), n.next(false);
        });
        return { className: N("button"), toggle: r, enabledObserver: t.asObservable(), pendingObserver: n.asObservable() };
      }
      function Uo(e, t, n) {
        const r = new cn(void 0), i = Oo(t, e), o = (s, ...c) => W(this, [s, ...c], function* (u, l = {}) {
          var d, h, p;
          if (t) {
            L.debug(`Switching active device of kind "${e}" with id ${u}.`), yield t.switchActiveDevice(e, u, l.exact);
            const b = (d = t.getActiveDevice(e)) != null ? d : u;
            b !== u && u !== "default" && L.info(`We tried to select the device with id (${u}), but the browser decided to select the device with id (${b}) instead.`);
            let v;
            e === "audioinput" ? v = (h = t.localParticipant.getTrackPublication(f.Track.Source.Microphone)) == null ? void 0 : h.track : e === "videoinput" && (v = (p = t.localParticipant.getTrackPublication(f.Track.Source.Camera)) == null ? void 0 : p.track);
            const g = u === "default" && !v || u === "default" && (v == null ? void 0 : v.mediaStreamTrack.label.startsWith("Default"));
            r.next(g ? u : b);
          }
        });
        return { className: N("media-device-select"), activeDeviceObservable: i, setActiveMediaDevice: o };
      }
      function jo(e) {
        const t = (r) => {
          e.disconnect(r);
        };
        return { className: N("disconnect-button"), disconnect: t };
      }
      function Wo(e) {
        const t = N("connection-quality"), n = Lo(e);
        return { className: t, connectionQualityObserver: n };
      }
      function Bo(e) {
        let t = "track-muted-indicator-camera";
        switch (e.source) {
          case f.Track.Source.Camera:
            t = "track-muted-indicator-camera";
            break;
          case f.Track.Source.Microphone:
            t = "track-muted-indicator-microphone";
            break;
        }
        const n = N(t), r = Rn(e);
        return { className: n, mediaMutedObserver: r };
      }
      function Vo(e) {
        return { className: "lk-participant-name", infoObserver: _n(e) };
      }
      function Ho() {
        return { className: N("participant-tile") };
      }
      var zo = { CHAT: "lk.chat" };
      var Go = { CHAT: "lk-chat-topic" };
      function In(e, t) {
        return W(this, arguments, function* (n, r, i = {}) {
          const { reliable: o, destinationIdentities: a, topic: s } = i;
          yield n.publishData(r, { destinationIdentities: a, topic: s, reliable: o });
        });
      }
      function Mn(e, t, n) {
        const r = Array.isArray(t) ? t : [t], i = Po(e).pipe(qe(([, , , c]) => t === void 0 || c !== void 0 && r.includes(c)), O(([c, u, , l]) => {
          const d = { payload: c, topic: l, from: u };
          return n == null || n(d), d;
        }));
        let o;
        const a = new k((c) => {
          o = c;
        });
        return { messageObservable: i, isSendingObservable: a, send: (c, ...u) => W(this, [c, ...u], function* (l, d = {}) {
          o.next(true);
          try {
            yield In(e.localParticipant, l, Q({ topic: r[0] }, d));
          } finally {
            o.next(false);
          }
        }) };
      }
      var Le = /* @__PURE__ */ new WeakMap();
      function Yo(e) {
        return e.ignoreLegacy == true;
      }
      var qo = (e) => JSON.parse(new TextDecoder().decode(e));
      var Ko = (e) => new TextEncoder().encode(JSON.stringify(e));
      function Qo(e, t) {
        var n, r, i, o, a, s;
        const c = () => {
          var y, S, T;
          return ((y = e.serverInfo) == null ? void 0 : y.edition) === 1 || !!((S = e.serverInfo) != null && S.version) && f.compareVersions((T = e.serverInfo) == null ? void 0 : T.version, "1.8.2") > 0;
        }, u = new J(), l = (n = t == null ? void 0 : t.channelTopic) != null ? n : zo.CHAT, d = (r = t == null ? void 0 : t.channelTopic) != null ? r : Go.CHAT;
        let h = false;
        Le.has(e) || (h = true);
        const p = (i = Le.get(e)) != null ? i : /* @__PURE__ */ new Map(), b = (o = p.get(l)) != null ? o : new J();
        p.set(l, b), Le.set(e, p);
        const v = (a = t == null ? void 0 : t.messageDecoder) != null ? a : qo;
        if (h) {
          e.registerTextStreamHandler(l, (S, T) => W(this, null, function* () {
            const { id: I, timestamp: _ } = S.info;
            Ye(S).pipe(at((x, A) => x + A), O((x) => ({ id: I, timestamp: _, message: x, from: e.getParticipantByIdentity(T.identity) }))).subscribe({ next: (x) => b.next(x) });
          }));
          const { messageObservable: y } = Mn(e, [d]);
          y.pipe(O((S) => {
            const T = v(S.payload);
            return Yo(T) ? void 0 : Ee(Q({}, T), { from: S.from });
          }), qe((S) => !!S), Nt(u)).subscribe(b);
        }
        const g = b.pipe(at((y, S) => {
          if ("id" in S && y.find((T) => {
            var I, _;
            return ((I = T.from) == null ? void 0 : I.identity) === ((_ = S.from) == null ? void 0 : _.identity) && T.id === S.id;
          })) {
            const T = y.findIndex((I) => I.id === S.id);
            if (T > -1) {
              const I = y[T];
              y[T] = Ee(Q({}, S), { timestamp: I.timestamp, editTimestamp: S.timestamp });
            }
            return [...y];
          }
          return [...y, S];
        }, []), Nt(u)), m = new cn(false), E = (s = t == null ? void 0 : t.messageEncoder) != null ? s : Ko, w = (y, S) => W(this, null, function* () {
          var T;
          S || (S = {}), (T = S.topic) != null || (S.topic = l), m.next(true);
          try {
            const _ = { id: (yield e.localParticipant.sendText(y, S)).id, timestamp: Date.now(), message: y, from: e.localParticipant, attachedFiles: S.attachments };
            b.next(_);
            const V = E(Ee(Q({}, _), { ignoreLegacy: c() }));
            return yield In(e.localParticipant, V, { reliable: true, topic: d }), _;
          } finally {
            m.next(false);
          }
        });
        function P() {
          u.next(), u.complete(), b.complete(), Le.delete(e), e.unregisterTextStreamHandler(l);
        }
        return e.once(f.RoomEvent.Disconnected, P), { messageObservable: g, isSendingObservable: m, send: w };
      }
      function Jo() {
        const e = (n) => W(this, null, function* () {
          L.info("Start Audio for room: ", n), yield n.startAudio();
        });
        return { className: N("start-audio-button"), roomAudioPlaybackAllowedObservable: Ln, handleStartAudioPlayback: e };
      }
      function Xo() {
        const e = (n) => W(this, null, function* () {
          L.info("Start Video for room: ", n), yield n.startVideo();
        });
        return { className: N("start-audio-button"), roomVideoPlaybackAllowedObservable: Co, handleStartVideoPlayback: e };
      }
      function Zo() {
        return { className: [N("button"), N("chat-toggle")].join(" ") };
      }
      function ea() {
        return { className: [N("button"), N("focus-toggle-button")].join(" ") };
      }
      function ta() {
        return { className: "lk-clear-pin-button lk-button" };
      }
      function na() {
        return { className: "lk-room-container" };
      }
      function Wt(e, t, n = true) {
        const i = [e.localParticipant, ...Array.from(e.remoteParticipants.values())], o = [];
        return i.forEach((a) => {
          t.forEach((s) => {
            const c = Array.from(a.trackPublications.values()).filter((u) => u.source === s && (!n || u.track)).map((u) => ({ participant: a, publication: u, source: u.source }));
            o.push(...c);
          });
        }), { trackReferences: o, participants: i };
      }
      function Bt(e, t, n = false) {
        const { sources: r, kind: i, name: o } = t;
        return Array.from(e.trackPublications.values()).filter((s) => (!r || r.includes(s.source)) && (!i || s.kind === i) && (!o || s.trackName === o) && (!n || s.track)).map((s) => ({ participant: e, publication: s, source: s.source }));
      }
      function ra(e, t, n) {
        var r, i;
        const o = (r = n.additionalRoomEvents) != null ? r : xn, a = (i = n.onlySubscribed) != null ? i : true, s = Array.from((/* @__PURE__ */ new Set([f.RoomEvent.ParticipantConnected, f.RoomEvent.ParticipantDisconnected, f.RoomEvent.ConnectionStateChanged, f.RoomEvent.LocalTrackPublished, f.RoomEvent.LocalTrackUnpublished, f.RoomEvent.TrackPublished, f.RoomEvent.TrackUnpublished, f.RoomEvent.TrackSubscriptionStatusChanged, ...o])).values());
        return ce(e, ...s).pipe(O((u) => {
          const l = Wt(u, t, a);
          return L.debug(`TrackReference[] was updated. (length ${l.trackReferences.length})`, l), l;
        }), R(Wt(e, t, a)));
      }
      function ia(e, t) {
        return ge(e, ...Yi).pipe(O((r) => {
          const i = Bt(r, t);
          return L.debug(`TrackReference[] was updated. (length ${i.length})`, i), i;
        }), R(Bt(e, t)));
      }
      function Dn(e, t) {
        return new k((r) => {
          const i = (...a) => {
            r.next(a);
          };
          return e.on(t, i), () => {
            e.off(t, i);
          };
        });
      }
      function oa(e) {
        return Dn(e, f.TrackEvent.TranscriptionReceived);
      }
      function aa(e) {
        return Dn(e, f.TrackEvent.TimeSyncUpdate).pipe(O(([t]) => t));
      }
      function sa(e, t = 1e3) {
        if (e === null) return Mt(false);
        const n = ot(e, "mousemove", { passive: true }).pipe(O(() => true)), r = n.pipe(ui({ each: t, with: () => Ue(Mt(false), r.pipe(Oi(n))) }), Ti());
        return r;
      }
      function ca(e, t) {
        if (typeof localStorage > "u") {
          L.error("Local storage is not available.");
          return;
        }
        try {
          if (t) {
            const n = Object.fromEntries(Object.entries(t).filter(([, r]) => r !== ""));
            localStorage.setItem(e, JSON.stringify(n));
          }
        } catch (n) {
          L.error(`Error setting item to local storage: ${n}`);
        }
      }
      function ua(e) {
        if (typeof localStorage > "u") {
          L.error("Local storage is not available.");
          return;
        }
        try {
          const t = localStorage.getItem(e);
          if (!t) {
            L.warn(`Item with key ${e} does not exist in local storage.`);
            return;
          }
          return JSON.parse(t);
        } catch (t) {
          L.error(`Error getting item from local storage: ${t}`);
          return;
        }
      }
      function la(e) {
        return { load: () => ua(e), save: (t) => ca(e, t) };
      }
      var fa = `${Sn}-user-choices`;
      var we = { videoEnabled: true, audioEnabled: true, videoDeviceId: "default", audioDeviceId: "default", username: "" };
      var { load: da, save: pa } = la(fa);
      function va(e, t = false) {
        t !== true && pa(e);
      }
      function ha(e, t = false) {
        var n, r, i, o, a;
        const s = { videoEnabled: (n = e == null ? void 0 : e.videoEnabled) != null ? n : we.videoEnabled, audioEnabled: (r = e == null ? void 0 : e.audioEnabled) != null ? r : we.audioEnabled, videoDeviceId: (i = e == null ? void 0 : e.videoDeviceId) != null ? i : we.videoDeviceId, audioDeviceId: (o = e == null ? void 0 : e.audioDeviceId) != null ? o : we.audioDeviceId, username: (a = e == null ? void 0 : e.username) != null ? a : we.username };
        if (t) return s;
        {
          const c = da();
          return Q(Q({}, s), c ?? {});
        }
      }
      var et = null;
      var tt = null;
      var ma = 0;
      function Vt() {
        return et || (et = /* @__PURE__ */ new Map()), et;
      }
      function ba() {
        return tt || (tt = /* @__PURE__ */ new WeakMap()), tt;
      }
      function ga(e, t) {
        const n = ba();
        let r = n.get(e);
        return r || (r = `room_${ma++}`, n.set(e, r)), `${r}:${t}`;
      }
      function ya(e, t) {
        const n = ga(e, t), r = Vt(), i = r.get(n);
        if (i) return i;
        const o = new J(), a = [];
        e.registerTextStreamHandler(t, (c, u) => W(this, null, function* () {
          Ye(c).pipe(at((d, h) => d + h, "")).subscribe((d) => {
            const h = a.findIndex((p) => p.streamInfo.id === c.info.id);
            h !== -1 ? (a[h] = Ee(Q({}, a[h]), { text: d }), o.next([...a])) : (a.push({ text: d, participantInfo: u, streamInfo: c.info }), o.next([...a]));
          });
        }));
        const s = o.asObservable().pipe(Ci());
        return r.set(n, s), e.once(f.RoomEvent.Disconnected, () => {
          o.complete(), Vt().delete(n);
        }), s;
      }
      var St = j.createContext(void 0);
      function wa() {
        const e = j.useContext(St);
        if (!e) throw Error("tried to access room context outside of livekit room component");
        return e;
      }
      function Nn() {
        return j.useContext(St);
      }
      function $n(e) {
        const t = Nn(), n = e ?? t;
        if (!n) throw new Error("No room provided, make sure you are inside a Room context or pass the room explicitly");
        return n;
      }
      function Ea(e = {}) {
        const t = $n(e.room), [n, r] = j.useState(t.localParticipant), [i, o] = j.useState(n.isMicrophoneEnabled), [a, s] = j.useState(n.isMicrophoneEnabled), [c, u] = j.useState(n.lastMicrophoneError), [l, d] = j.useState(n.lastCameraError), [h, p] = j.useState(n.isMicrophoneEnabled), [b, v] = j.useState(void 0), [g, m] = j.useState(void 0), E = (w) => {
          s(w.isCameraEnabled), o(w.isMicrophoneEnabled), p(w.isScreenShareEnabled), m(w.cameraTrack), v(w.microphoneTrack), u(w.participant.lastMicrophoneError), d(w.participant.lastCameraError), r(w.participant);
        };
        return j.useEffect(() => {
          const w = Et(t.localParticipant).subscribe(E);
          return () => w.unsubscribe();
        }, [t]), { isMicrophoneEnabled: i, isScreenShareEnabled: h, isCameraEnabled: a, microphoneTrack: b, cameraTrack: g, lastMicrophoneError: c, lastCameraError: l, localParticipant: n };
      }
      exports.GRID_LAYOUTS = Ji;
      exports.PIN_DEFAULT_STATE = no;
      exports.RoomContext = St;
      exports.WIDGET_DEFAULT_STATE = ro;
      exports.activeSpeakerObserver = xo;
      exports.addMediaTimestampToTranscription = eo;
      exports.commonjsGlobal = Sr;
      exports.computeMenuPosition = Bi;
      exports.connectedParticipantObserver = Io;
      exports.connectedParticipantsObserver = Ro;
      exports.connectionStateObserver = Eo;
      exports.createDefaultGrammar = Hi;
      exports.createInteractingObservable = sa;
      exports.createIsSpeakingObserver = _o;
      exports.createMediaDeviceObserver = To;
      exports.dedupeSegments = to;
      exports.encryptionStatusObservable = ko;
      exports.getDefaultExportFromCjs = nn;
      exports.getScrollBarWidth = Fi;
      exports.getTrackByIdentifier = ut;
      exports.getTrackReferenceId = M;
      exports.isEqualTrackRef = Di;
      exports.isSourceWitOptions = Cn;
      exports.isSourcesWithOptions = io;
      exports.isTrackReference = D;
      exports.isTrackReferencePinned = Ni;
      exports.isWeb = Ui;
      exports.loadUserChoices = ha;
      exports.log = L;
      exports.mutedObserver = Rn;
      exports.participantAttributesObserver = No;
      exports.participantByIdentifierObserver = Do;
      exports.participantInfoObserver = _n;
      exports.participantPermissionObserver = Mo;
      exports.participantTracksObservable = ia;
      exports.recordingStatusObservable = Ao;
      exports.roomAudioPlaybackAllowedObservable = Ln;
      exports.roomInfoObserver = So;
      exports.saveUserChoices = va;
      exports.selectGridLayout = Pn;
      exports.setLogExtension = Qi;
      exports.setLogLevel = Ki;
      exports.setupChat = Qo;
      exports.setupChatToggle = Zo;
      exports.setupClearPinButton = ta;
      exports.setupConnectionQualityIndicator = Wo;
      exports.setupDataMessageHandler = Mn;
      exports.setupDeviceSelector = Uo;
      exports.setupDisconnectButton = jo;
      exports.setupFocusToggle = ea;
      exports.setupLiveKitRoom = na;
      exports.setupManualToggle = Fo;
      exports.setupMediaToggle = $o;
      exports.setupMediaTrack = wo;
      exports.setupParticipantName = Vo;
      exports.setupParticipantTile = Ho;
      exports.setupStartAudio = Jo;
      exports.setupStartVideo = Xo;
      exports.setupTextStream = ya;
      exports.setupTrackMutedIndicator = Bo;
      exports.sortParticipants = lo;
      exports.sortTrackReferences = so;
      exports.supportsScreenSharing = Zi;
      exports.tokenize = zi;
      exports.trackReferencesObservable = ra;
      exports.trackSyncTimeObserver = aa;
      exports.trackTranscriptionObserver = oa;
      exports.updatePages = go;
      exports.useEnsureRoom = $n;
      exports.useLocalParticipant = Ea;
      exports.useMaybeRoomContext = Nn;
      exports.useRoomContext = wa;
      exports.wasClickOutside = Vi;
    }
  });

  // node_modules/@livekit/components-react/dist/shared-BPm3y_nD.js
  var require_shared_BPm3y_nD = __commonJS({
    "node_modules/@livekit/components-react/dist/shared-BPm3y_nD.js"(exports) {
      "use strict";
      init_react_shim();
      var l = require_shared_ChNXN17z();
      var y = require_livekit_client_umd();
      var $ = require_react();
      function H(e) {
        const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
        if (e) {
          for (const t in e) if (t !== "default") {
            const s = Object.getOwnPropertyDescriptor(e, t);
            Object.defineProperty(n, t, s.get ? s : { enumerable: true, get: () => e[t] });
          }
        }
        return n.default = e, Object.freeze(n);
      }
      var o = H($);
      var X = (e) => {
        const n = o.useRef(e);
        return o.useEffect(() => {
          n.current = e;
        }), n;
      };
      function Y(e, n) {
        const t = Z(), s = X(n);
        return o.useLayoutEffect(() => {
          let r = false;
          const i = e.current;
          if (!i) return;
          function c(u, a) {
            r || s.current(u, a);
          }
          return t == null || t.subscribe(i, c), () => {
            r = true, t == null || t.unsubscribe(i, c);
          };
        }, [e.current, t, s]), t == null ? void 0 : t.observer;
      }
      function K() {
        let e = false, n = [];
        const t = /* @__PURE__ */ new Map();
        if (typeof window > "u") return;
        const s = new ResizeObserver((r, i) => {
          n = n.concat(r), e || window.requestAnimationFrame(() => {
            const c = /* @__PURE__ */ new Set();
            for (let u = 0; u < n.length; u++) {
              if (c.has(n[u].target)) continue;
              c.add(n[u].target);
              const a = t.get(n[u].target);
              a == null || a.forEach((d) => d(n[u], i));
            }
            n = [], e = false;
          }), e = true;
        });
        return { observer: s, subscribe(r, i) {
          s.observe(r);
          const c = t.get(r) ?? [];
          c.push(i), t.set(r, c);
        }, unsubscribe(r, i) {
          const c = t.get(r) ?? [];
          if (c.length === 1) {
            s.unobserve(r), t.delete(r);
            return;
          }
          const u = c.indexOf(i);
          u !== -1 && c.splice(u, 1), t.set(r, c);
        } };
      }
      var A;
      var Z = () => A || (A = K());
      var V = (e) => {
        const [n, t] = o.useState({ width: 0, height: 0 });
        o.useLayoutEffect(() => {
          if (e.current) {
            const { width: r, height: i } = e.current.getBoundingClientRect();
            t({ width: r, height: i });
          }
        }, [e.current]);
        const s = o.useCallback((r) => t(r.contentRect), []);
        return Y(e, s), n;
      };
      function v(e, n, t = true) {
        const [s, r] = o.useState(n);
        return o.useEffect(() => {
          if (t && r(n), typeof window > "u" || !e) return;
          const i = e.subscribe(r);
          return () => i.unsubscribe();
        }, [e, t]), s;
      }
      function _(e, n) {
        if (n.msg === "show_chat") return { ...e, showChat: true, unreadMessages: 0 };
        if (n.msg === "hide_chat") return { ...e, showChat: false };
        if (n.msg === "toggle_chat") {
          const t = { ...e, showChat: !e.showChat };
          return t.showChat === true && (t.unreadMessages = 0), t;
        } else return n.msg === "unread_msg" ? { ...e, unreadMessages: n.count } : n.msg === "toggle_settings" ? { ...e, showSettings: !e.showSettings } : { ...e };
      }
      function q(e, n) {
        return n.msg === "set_pin" ? [n.trackReference] : n.msg === "clear_pin" ? [] : { ...e };
      }
      var D = o.createContext(void 0);
      function U() {
        const e = o.useContext(D);
        if (!e) throw Error("Tried to access LayoutContext context outside a LayoutContextProvider provider.");
        return e;
      }
      function z(e) {
        const n = L();
        if (e ?? (e = n), !e) throw Error("Tried to access LayoutContext context outside a LayoutContextProvider provider.");
        return e;
      }
      function ee() {
        const [e, n] = o.useReducer(q, l.PIN_DEFAULT_STATE), [t, s] = o.useReducer(_, l.WIDGET_DEFAULT_STATE);
        return { pin: { dispatch: n, state: e }, widget: { dispatch: s, state: t } };
      }
      function te(e) {
        const [n, t] = o.useReducer(q, l.PIN_DEFAULT_STATE), [s, r] = o.useReducer(_, l.WIDGET_DEFAULT_STATE);
        return e ?? { pin: { dispatch: t, state: n }, widget: { dispatch: r, state: s } };
      }
      function L() {
        return o.useContext(D);
      }
      var I = o.createContext(void 0);
      function ne() {
        const e = o.useContext(I);
        if (!e) throw Error("tried to access track context outside of track context provider");
        return e;
      }
      function x() {
        return o.useContext(I);
      }
      function w(e) {
        const n = x(), t = e ?? n;
        if (!t) throw new Error("No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly");
        return t;
      }
      var F = o.createContext(void 0);
      function se() {
        const e = o.useContext(F);
        if (!e) throw Error("tried to access participant context outside of participant context provider");
        return e;
      }
      function B() {
        return o.useContext(F);
      }
      function T(e) {
        const n = B(), t = x(), s = e ?? n ?? (t == null ? void 0 : t.participant);
        if (!s) throw new Error("No participant provided, make sure you are inside a participant context or pass the participant explicitly");
        return s;
      }
      function W(e) {
        var n, t, s = "";
        if (typeof e == "string" || typeof e == "number") s += e;
        else if (typeof e == "object") if (Array.isArray(e)) {
          var r = e.length;
          for (n = 0; n < r; n++) e[n] && (t = W(e[n])) && (s && (s += " "), s += t);
        } else for (t in e) e[t] && (s && (s += " "), s += t);
        return s;
      }
      function J() {
        for (var e, n, t = 0, s = "", r = arguments.length; t < r; t++) (e = arguments[t]) && (n = W(e)) && (s && (s += " "), s += n);
        return s;
      }
      function re(...e) {
        return (...n) => {
          for (const t of e) if (typeof t == "function") try {
            t(...n);
          } catch (s) {
            console.error(s);
          }
        };
      }
      function k(...e) {
        const n = { ...e[0] };
        for (let t = 1; t < e.length; t++) {
          const s = e[t];
          for (const r in s) {
            const i = n[r], c = s[r];
            typeof i == "function" && typeof c == "function" && r[0] === "o" && r[1] === "n" && r.charCodeAt(2) >= 65 && r.charCodeAt(2) <= 90 ? n[r] = re(i, c) : (r === "className" || r === "UNSAFE_className") && typeof i == "string" && typeof c == "string" ? n[r] = J(i, c) : n[r] = c !== void 0 ? c : i;
          }
        }
        return n;
      }
      function oe(e = {}) {
        const n = T(e.participant), { className: t, connectionQualityObserver: s } = o.useMemo(() => l.setupConnectionQualityIndicator(n), [n]), r = v(s, y.ConnectionQuality.Unknown);
        return { className: t, quality: r };
      }
      function N(e) {
        const n = l.useEnsureRoom(e), t = o.useMemo(() => l.connectionStateObserver(n), [n]);
        return v(t, n.state);
      }
      function ce(e) {
        const n = l.useRoomContext(), t = N(n);
        return { buttonProps: o.useMemo(() => {
          const { className: r, disconnect: i } = l.setupDisconnectButton(n);
          return k(e, { className: r, onClick: () => i(e.stopTracks ?? true), disabled: t === y.ConnectionState.Disconnected });
        }, [n, e, t]) };
      }
      function j(e) {
        if (e.publication instanceof y.LocalTrackPublication) {
          const n = e.publication.track;
          if (n) {
            const { facingMode: t } = y.facingModeFromLocalTrack(n);
            return t;
          }
        }
        return "undefined";
      }
      function ie({ trackRef: e, props: n }) {
        const t = w(e), s = L(), { className: r } = o.useMemo(() => l.setupFocusToggle(), []), i = o.useMemo(() => l.isTrackReferencePinned(t, s == null ? void 0 : s.pin.state), [t, s == null ? void 0 : s.pin.state]);
        return { mergedProps: o.useMemo(() => k(n, { className: r, onClick: (u) => {
          var a, d, p, f, m;
          (a = n.onClick) == null || a.call(n, u), i ? (p = s == null ? void 0 : (d = s.pin).dispatch) == null || p.call(d, { msg: "clear_pin" }) : (m = s == null ? void 0 : (f = s.pin).dispatch) == null || m.call(f, { msg: "set_pin", trackReference: t });
        } }), [n, r, t, i, s == null ? void 0 : s.pin]), inFocus: i };
      }
      function ue(e, n, t = {}) {
        const s = t.gridLayouts ?? l.GRID_LAYOUTS, { width: r, height: i } = V(e), c = l.selectGridLayout(s, n, r, i);
        return o.useEffect(() => {
          e.current && c && (e.current.style.setProperty("--lk-col-count", c == null ? void 0 : c.columns.toString()), e.current.style.setProperty("--lk-row-count", c == null ? void 0 : c.rows.toString()));
        }, [e, c]), { layout: c, containerWidth: r, containerHeight: i };
      }
      function R(e, n = {}) {
        var u, a;
        const t = typeof e == "string" ? n.participant : e.participant, s = T(t), r = typeof e == "string" ? { participant: s, source: e } : e, [i, c] = o.useState(!!((u = r.publication) != null && u.isMuted || (a = s.getTrackPublication(r.source)) != null && a.isMuted));
        return o.useEffect(() => {
          const d = l.mutedObserver(r).subscribe(c);
          return () => d.unsubscribe();
        }, [l.getTrackReferenceId(r)]), i;
      }
      function G(e) {
        const n = T(e), t = o.useMemo(() => l.createIsSpeakingObserver(n), [n]);
        return v(t, n.isSpeaking);
      }
      function ae(e) {
        return e !== void 0;
      }
      function le(...e) {
        return k(...e.filter(ae));
      }
      function de(e, n, t) {
        return o.Children.map(e, (s) => o.isValidElement(s) && o.Children.only(e) ? (s.props.class && (n ?? (n = {}), n.class = J(s.props.class, n.class), n.style = { ...s.props.style, ...n.style }), o.cloneElement(s, { ...n, key: t })) : s);
      }
      function fe(e) {
        var n, t;
        if (typeof window < "u" && typeof process < "u" && (((n = process == null ? void 0 : process.env) == null ? void 0 : n.NODE_ENV) === "dev" || ((t = process == null ? void 0 : process.env) == null ? void 0 : t.NODE_ENV) === "development")) {
          const s = document.querySelector(".lk-room-container");
          s && !getComputedStyle(s).getPropertyValue("--lk-has-imported-styles") && l.log.warn("It looks like you're not using the `@livekit/components-styles package`. To render the UI with the default styling, please import it in your layout or page.");
        }
      }
      function pe(e, n) {
        return e === "processor" && n && typeof n == "object" && "name" in n ? n.name : e === "e2ee" && n ? "e2ee-enabled" : n;
      }
      function me() {
        const e = l.useRoomContext(), n = o.useMemo(() => l.participantPermissionObserver(e.localParticipant), [e]);
        return v(n, e.localParticipant.permissions);
      }
      function ge({ kind: e, room: n, track: t, requestPermissions: s, onError: r }) {
        const i = l.useMaybeRoomContext(), c = o.useMemo(() => n ?? i ?? new y.Room(), [n, i]), u = o.useMemo(() => l.createMediaDeviceObserver(e, r, s), [e, s, r]), a = v(u, []), [d, p] = o.useState((c == null ? void 0 : c.getActiveDevice(e)) ?? "default"), { className: f, activeDeviceObservable: m, setActiveMediaDevice: b } = o.useMemo(() => l.setupDeviceSelector(e, c), [e, c, t]);
        return o.useEffect(() => {
          const h = m.subscribe((g) => {
            g && (l.log.info("setCurrentDeviceId", g), p(g));
          });
          return () => {
            h == null || h.unsubscribe();
          };
        }, [m]), { devices: a, className: f, activeDeviceId: d, setActiveMediaDevice: b };
      }
      function be({ kind: e, onError: n }) {
        const t = o.useMemo(() => l.createMediaDeviceObserver(e, n), [e, n]);
        return v(t, []);
      }
      function Q(e, n, t = {}) {
        const s = o.useRef([]), r = o.useRef(-1), i = n !== r.current, c = typeof t.customSortFunction == "function" ? t.customSortFunction(e) : l.sortTrackReferences(e);
        let u = [...c];
        if (i === false) try {
          u = l.updatePages(s.current, c, n);
        } catch (a) {
          l.log.error("Error while running updatePages(): ", a);
        }
        return i ? s.current = c : s.current = u, r.current = n, u;
      }
      function he(e, n) {
        const [t, s] = o.useState(1), r = Math.max(Math.ceil(n.length / e), 1);
        t > r && s(r);
        const i = t * e, c = i - e, u = (f) => {
          s((m) => f === "next" ? m === r ? m : m + 1 : m === 1 ? m : m - 1);
        }, a = (f) => {
          f > r ? s(r) : f < 1 ? s(1) : s(f);
        }, p = Q(n, e).slice(c, i);
        return { totalPageCount: r, nextPage: () => u("next"), prevPage: () => u("previous"), setPage: a, firstItemIndex: c, lastItemIndex: i, tracks: p, currentPage: t };
      }
      function ye({ trackRef: e, onParticipantClick: n, disableSpeakingIndicator: t, htmlProps: s }) {
        const r = w(e), i = o.useMemo(() => {
          const { className: m } = l.setupParticipantTile();
          return k(s, { className: m, onClick: (b) => {
            var h;
            if ((h = s.onClick) == null || h.call(s, b), typeof n == "function") {
              const g = r.publication ?? r.participant.getTrackPublication(r.source);
              n({ participant: r.participant, track: g });
            }
          } });
        }, [s, n, r.publication, r.source, r.participant]), c = r.participant.getTrackPublication(y.Track.Source.Microphone), u = o.useMemo(() => ({ participant: r.participant, source: y.Track.Source.Microphone, publication: c }), [c, r.participant]), a = R(r), d = R(u), p = G(r.participant), f = j(r);
        return { elementProps: { "data-lk-audio-muted": d, "data-lk-video-muted": a, "data-lk-speaking": t === true ? false : p, "data-lk-local-participant": r.participant.isLocal, "data-lk-source": r.source, "data-lk-facing-mode": f, ...i } };
      }
      function Se(e) {
        return e = z(e), o.useMemo(() => (e == null ? void 0 : e.pin.state) !== void 0 && e.pin.state.length >= 1 ? e.pin.state : [], [e.pin.state]);
      }
      function ve({ room: e, props: n }) {
        const t = l.useEnsureRoom(e), { className: s, roomAudioPlaybackAllowedObservable: r, handleStartAudioPlayback: i } = o.useMemo(() => l.setupStartAudio(), []), c = o.useMemo(() => r(t), [t, r]), { canPlayAudio: u } = v(c, { canPlayAudio: t.canPlaybackAudio });
        return { mergedProps: o.useMemo(() => k(n, { className: s, onClick: () => {
          i(t);
        }, style: { display: u ? "none" : "block" } }), [n, s, u, i, t]), canPlayAudio: u };
      }
      function Me({ room: e, props: n }) {
        const t = l.useEnsureRoom(e), { className: s, roomVideoPlaybackAllowedObservable: r, handleStartVideoPlayback: i } = o.useMemo(() => l.setupStartVideo(), []), c = o.useMemo(() => r(t), [t, r]), { canPlayVideo: u } = v(c, { canPlayVideo: t.canPlaybackVideo });
        return { mergedProps: o.useMemo(() => k(n, { className: s, onClick: () => {
          i(t);
        }, style: { display: u ? "none" : "block" } }), [n, s, u, i, t]), canPlayVideo: u };
      }
      function ke(e, n = {}) {
        const t = o.useRef(null), s = o.useRef(null), r = n.minSwipeDistance ?? 50, i = (a) => {
          s.current = null, t.current = a.targetTouches[0].clientX;
        }, c = (a) => {
          s.current = a.targetTouches[0].clientX;
        }, u = o.useCallback(() => {
          if (!t.current || !s.current) return;
          const a = t.current - s.current, d = a > r, p = a < -r;
          d && n.onLeftSwipe && n.onLeftSwipe(), p && n.onRightSwipe && n.onRightSwipe();
        }, [r, n]);
        o.useEffect(() => {
          const a = e.current;
          return a && (a.addEventListener("touchstart", i, { passive: true }), a.addEventListener("touchmove", c, { passive: true }), a.addEventListener("touchend", u, { passive: true })), () => {
            a && (a.removeEventListener("touchstart", i), a.removeEventListener("touchmove", c), a.removeEventListener("touchend", u));
          };
        }, [e, u]);
      }
      function Ce({ props: e }) {
        const { dispatch: n, state: t } = U().widget, { className: s } = o.useMemo(() => l.setupChatToggle(), []);
        return { mergedProps: o.useMemo(() => k(e, { className: s, onClick: () => {
          n && n({ msg: "toggle_chat" });
        }, "aria-pressed": t != null && t.showChat ? "true" : "false", "data-lk-unread-msgs": t ? t.unreadMessages < 10 ? t.unreadMessages.toFixed(0) : "9+" : "0" }), [e, s, n, t]) };
      }
      function Te(e) {
        var i, c;
        const n = w(e), { className: t, mediaMutedObserver: s } = o.useMemo(() => l.setupTrackMutedIndicator(n), [l.getTrackReferenceId(n)]);
        return { isMuted: v(s, !!((i = n.publication) != null && i.isMuted || (c = n.participant.getTrackPublication(n.source)) != null && c.isMuted)), className: t };
      }
      function Pe({ source: e, onChange: n, initialState: t, captureOptions: s, publishOptions: r, onDeviceError: i, ...c }) {
        var C;
        const u = l.useMaybeRoomContext(), a = (C = u == null ? void 0 : u.localParticipant) == null ? void 0 : C.getTrackPublication(e), d = o.useRef(false), { toggle: p, className: f, pendingObserver: m, enabledObserver: b } = o.useMemo(() => u ? l.setupMediaToggle(e, u, s, r, i) : l.setupManualToggle(), [u, e, JSON.stringify(s), r]), h = v(m, false), g = v(b, t ?? !!(a != null && a.isEnabled));
        o.useEffect(() => {
          n == null || n(g, d.current), d.current = false;
        }, [g, n]), o.useEffect(() => {
          t !== void 0 && (l.log.debug("forcing initial toggle state", e, t), p(t));
        }, []);
        const M = o.useMemo(() => k(c, { className: f }), [c, f]), S = o.useCallback((E) => {
          var P;
          d.current = true, p().catch(() => d.current = false), (P = c.onClick) == null || P.call(c, E);
        }, [c, p]);
        return { toggle: p, enabled: g, pending: h, track: a, buttonProps: { ...M, "aria-pressed": g, "data-lk-source": e, "data-lk-enabled": g, disabled: h, onClick: S } };
      }
      function we(e = [y.Track.Source.Camera, y.Track.Source.Microphone, y.Track.Source.ScreenShare, y.Track.Source.ScreenShareAudio, y.Track.Source.Unknown], n = {}) {
        const t = l.useEnsureRoom(n.room), [s, r] = o.useState([]), [i, c] = o.useState([]), u = o.useMemo(() => e.map((d) => l.isSourceWitOptions(d) ? d.source : d), [JSON.stringify(e)]);
        return o.useEffect(() => {
          const d = l.trackReferencesObservable(t, u, { additionalRoomEvents: n.updateOnlyOn, onlySubscribed: n.onlySubscribed }).subscribe(({ trackReferences: p, participants: f }) => {
            l.log.debug("setting track bundles", p, f), r(p), c(f);
          });
          return () => d.unsubscribe();
        }, [t, JSON.stringify(n.onlySubscribed), JSON.stringify(n.updateOnlyOn), JSON.stringify(e)]), o.useMemo(() => {
          if (l.isSourcesWithOptions(e)) {
            const d = Ae(e, i), p = Array.from(s);
            return i.forEach((f) => {
              d.has(f.identity) && (d.get(f.identity) ?? []).forEach((b) => {
                if (s.find(({ participant: g, publication: M }) => f.identity === g.identity && M.source === b)) return;
                l.log.debug(`Add ${b} placeholder for participant ${f.identity}.`);
                const h = { participant: f, source: b };
                p.push(h);
              });
            }), p;
          } else return s;
        }, [s, i, e]);
      }
      function Ee(e, n) {
        const t = new Set(e);
        for (const s of n) t.delete(s);
        return t;
      }
      function Ae(e, n) {
        const t = /* @__PURE__ */ new Map();
        if (l.isSourcesWithOptions(e)) {
          const s = e.filter((r) => r.withPlaceholder).map((r) => r.source);
          n.forEach((r) => {
            const i = r.getTrackPublications().map((u) => {
              var a;
              return (a = u.track) == null ? void 0 : a.source;
            }).filter((u) => u !== void 0), c = Array.from(Ee(new Set(s), new Set(i)));
            c.length > 0 && t.set(r.identity, c);
          });
        }
        return t;
      }
      function Re(e) {
        const n = l.useRoomContext(), t = N(n), s = o.useMemo(() => t === y.ConnectionState.Disconnected, [t]), r = o.useMemo(() => l.setupChat(n, e), [n, e, s]), i = v(r.isSendingObservable, false), c = v(r.messageObservable, []);
        return { send: r.send, chatMessages: c, isSending: i };
      }
      function De(e = {}) {
        const [n, t] = o.useState(l.loadUserChoices(e.defaults, e.preventLoad ?? false)), s = o.useCallback((a) => {
          t((d) => ({ ...d, audioEnabled: a }));
        }, []), r = o.useCallback((a) => {
          t((d) => ({ ...d, videoEnabled: a }));
        }, []), i = o.useCallback((a) => {
          t((d) => ({ ...d, audioDeviceId: a }));
        }, []), c = o.useCallback((a) => {
          t((d) => ({ ...d, videoDeviceId: a }));
        }, []), u = o.useCallback((a) => {
          t((d) => ({ ...d, username: a }));
        }, []);
        return o.useEffect(() => {
          l.saveUserChoices(n, e.preventSave ?? false);
        }, [n, e.preventSave]), { userChoices: n, saveAudioInputEnabled: s, saveVideoInputEnabled: r, saveAudioInputDeviceId: i, saveVideoInputDeviceId: c, saveUsername: u };
      }
      function Le(e, n = {}) {
        const t = T(e), s = l.useEnsureRoom(n.room), r = o.useMemo(() => l.encryptionStatusObservable(s, t), [s, t]);
        return v(r, t.isLocal ? t.isE2EEEnabled : !!(t != null && t.isEncrypted));
      }
      function Ie(e, n = { fftSize: 32, smoothingTimeConstant: 0 }) {
        const t = l.isTrackReference(e) ? e.publication.track : e, [s, r] = o.useState(0);
        return o.useEffect(() => {
          if (!t || !t.mediaStream) return;
          const { cleanup: i, analyser: c } = y.createAudioAnalyser(t, n), u = c.frequencyBinCount, a = new Uint8Array(u), p = setInterval(() => {
            c.getByteFrequencyData(a);
            let f = 0;
            for (let m = 0; m < a.length; m++) {
              const b = a[m];
              f += b * b;
            }
            r(Math.sqrt(f / a.length) / 255);
          }, 1e3 / 30);
          return () => {
            i(), clearInterval(p);
          };
        }, [t, t == null ? void 0 : t.mediaStream, JSON.stringify(n)]), s;
      }
      var xe = (e) => {
        const n = (t) => {
          let i = 1 - Math.max(-100, Math.min(-10, t)) * -1 / 100;
          return i = Math.sqrt(i), i;
        };
        return e.map((t) => t === -1 / 0 ? 0 : n(t));
      };
      var Fe = { bands: 5, loPass: 100, hiPass: 600, updateInterval: 32, analyserOptions: { fftSize: 2048 } };
      function Ne(e, n = {}) {
        var c;
        const t = e instanceof y.Track ? e : (c = e == null ? void 0 : e.publication) == null ? void 0 : c.track, s = { ...Fe, ...n }, [r, i] = o.useState(new Array(s.bands).fill(0));
        return o.useEffect(() => {
          if (!t || !(t != null && t.mediaStream)) return;
          const { analyser: u, cleanup: a } = y.createAudioAnalyser(t, s.analyserOptions), d = u.frequencyBinCount, p = new Float32Array(d), m = setInterval(() => {
            u.getFloatFrequencyData(p);
            let b = new Float32Array(p.length);
            for (let S = 0; S < p.length; S++) b[S] = p[S];
            b = b.slice(n.loPass, n.hiPass);
            const h = xe(b), g = Math.ceil(h.length / s.bands), M = [];
            for (let S = 0; S < s.bands; S++) {
              const C = h.slice(S * g, (S + 1) * g).reduce((E, P) => E += P, 0);
              M.push(C / g);
            }
            i(M);
          }, s.updateInterval);
          return () => {
            a(), clearInterval(m);
          };
        }, [t, t == null ? void 0 : t.mediaStream, JSON.stringify(n)]), r;
      }
      var Oe = { barCount: 120, volMultiplier: 5, updateInterval: 20 };
      function Ve(e, n = {}) {
        var p;
        const t = e instanceof y.Track ? e : (p = e == null ? void 0 : e.publication) == null ? void 0 : p.track, s = { ...Oe, ...n }, r = o.useRef(new Float32Array()), i = o.useRef(performance.now()), c = o.useRef(0), [u, a] = o.useState([]), d = o.useCallback((f) => {
          a(Array.from(qe(f, s.barCount).map((m) => Math.sqrt(m) * s.volMultiplier)));
        }, []);
        return o.useEffect(() => {
          if (!t || !(t != null && t.mediaStream)) return;
          const { analyser: f, cleanup: m } = y.createAudioAnalyser(t, { fftSize: O(s.barCount) }), b = O(s.barCount), h = new Float32Array(b), g = () => {
            if (M = requestAnimationFrame(g), f.getFloatTimeDomainData(h), r.current.map((S, C) => S + h[C]), c.current += 1, performance.now() - i.current >= s.updateInterval) {
              const S = h.map((C) => C / c.current);
              d(S), i.current = performance.now(), c.current = 0;
            }
          };
          let M = requestAnimationFrame(g);
          return () => {
            m(), cancelAnimationFrame(M);
          };
        }, [t, t == null ? void 0 : t.mediaStream, JSON.stringify(n), d]), { bars: u };
      }
      function O(e) {
        return e < 32 ? 32 : _e(e);
      }
      function _e(e) {
        let n = 2;
        for (; e >>= 1; ) n <<= 1;
        return n;
      }
      function qe(e, n) {
        const t = Math.floor(e.length / n), s = new Float32Array(n);
        for (let r = 0; r < n; r++) {
          const i = t * r;
          let c = 0;
          for (let u = 0; u < t; u++) c = c + Math.abs(e[i + u]);
          s[r] = c / t;
        }
        return s;
      }
      exports.LayoutContext = D;
      exports.ParticipantContext = F;
      exports.TrackRefContext = I;
      exports.cloneSingleChild = de;
      exports.mergeProps = k;
      exports.mergeProps$1 = le;
      exports.roomOptionsStringifyReplacer = pe;
      exports.useAudioWaveform = Ve;
      exports.useChat = Re;
      exports.useChatToggle = Ce;
      exports.useConnectionQualityIndicator = oe;
      exports.useConnectionState = N;
      exports.useCreateLayoutContext = ee;
      exports.useDisconnectButton = ce;
      exports.useEnsureCreateLayoutContext = te;
      exports.useEnsureLayoutContext = z;
      exports.useEnsureParticipant = T;
      exports.useEnsureTrackRef = w;
      exports.useFacingMode = j;
      exports.useFocusToggle = ie;
      exports.useGridLayout = ue;
      exports.useIsEncrypted = Le;
      exports.useIsMuted = R;
      exports.useIsSpeaking = G;
      exports.useLayoutContext = U;
      exports.useLocalParticipantPermissions = me;
      exports.useMaybeLayoutContext = L;
      exports.useMaybeParticipantContext = B;
      exports.useMaybeTrackRefContext = x;
      exports.useMediaDeviceSelect = ge;
      exports.useMediaDevices = be;
      exports.useMultibandTrackVolume = Ne;
      exports.useObservableState = v;
      exports.usePagination = he;
      exports.useParticipantContext = se;
      exports.useParticipantTile = ye;
      exports.usePersistentUserChoices = De;
      exports.usePinnedTracks = Se;
      exports.useSize = V;
      exports.useStartAudio = ve;
      exports.useStartVideo = Me;
      exports.useSwipe = ke;
      exports.useTrackMutedIndicator = Te;
      exports.useTrackRefContext = ne;
      exports.useTrackToggle = Pe;
      exports.useTrackVolume = Ie;
      exports.useTracks = we;
      exports.useVisualStableUpdate = Q;
      exports.warnAboutMissingStyles = fe;
    }
  });

  // node_modules/@livekit/components-react/dist/shared-D4SeICAo.js
  var require_shared_D4SeICAo = __commonJS({
    "node_modules/@livekit/components-react/dist/shared-D4SeICAo.js"(exports) {
      "use strict";
      init_react_shim();
      var j = require_react();
      var r = require_shared_ChNXN17z();
      var u = require_shared_BPm3y_nD();
      var c = require_livekit_client_umd();
      function J(e) {
        const t = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
        if (e) {
          for (const n in e) if (n !== "default") {
            const s = Object.getOwnPropertyDescriptor(e, n);
            Object.defineProperty(t, n, s.get ? s : { enumerable: true, get: () => e[n] });
          }
        }
        return t.default = e, Object.freeze(t);
      }
      var i = J(j);
      function F(e) {
        const t = r.useEnsureRoom(e), n = i.useCallback(async () => {
          await t.startAudio();
        }, [t]), s = i.useMemo(() => r.roomAudioPlaybackAllowedObservable(t), [t]), { canPlayAudio: o } = u.useObservableState(s, { canPlayAudio: t.canPlaybackAudio });
        return { canPlayAudio: o, startAudio: n };
      }
      function q(e) {
        const { state: t, dispatch: n } = u.useLayoutContext().pin;
        return { buttonProps: i.useMemo(() => {
          const { className: o } = r.setupClearPinButton();
          return u.mergeProps(e, { className: o, disabled: !(t != null && t.length), onClick: () => {
            n && n({ msg: "clear_pin" });
          } });
        }, [e, n, t]) };
      }
      function U(e, t) {
        const n = typeof e == "function" ? e : t, s = typeof e == "string" ? e : void 0, o = r.useRoomContext(), { send: a, messageObservable: d, isSendingObservable: l } = i.useMemo(() => r.setupDataMessageHandler(o, s, n), [o, s, n]), p = u.useObservableState(d, void 0), m = u.useObservableState(l, false);
        return { message: p, send: a, isSending: m };
      }
      var $ = { connect: true, audio: false, video: false };
      function z(e) {
        const { token: t, serverUrl: n, options: s, room: o, connectOptions: a, connect: d, audio: l, video: p, screen: m, onConnected: g, onDisconnected: b, onError: v, onMediaDeviceFailure: k, onEncryptionError: T, simulateParticipants: y, ...C } = { ...$, ...e };
        s && o && r.log.warn("when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.");
        const [f, B] = i.useState(), R = i.useRef(d);
        i.useEffect(() => {
          B(o ?? new c.Room(s));
        }, [o, JSON.stringify(s, u.roomOptionsStringifyReplacer)]);
        const L = i.useMemo(() => {
          const { className: P } = r.setupLiveKitRoom();
          return u.mergeProps(C, { className: P });
        }, [C]);
        return i.useEffect(() => {
          if (!f) return;
          const P = () => {
            const S = f.localParticipant;
            r.log.debug("trying to publish local tracks"), Promise.all([S.setMicrophoneEnabled(!!l, typeof l != "boolean" ? l : void 0), S.setCameraEnabled(!!p, typeof p != "boolean" ? p : void 0), S.setScreenShareEnabled(!!m, typeof m != "boolean" ? m : void 0)]).catch((O) => {
              r.log.warn(O), v == null || v(O);
            });
          }, M = (S) => {
            const O = c.MediaDeviceFailure.getFailure(S);
            k == null || k(O);
          }, A = (S) => {
            T == null || T(S);
          }, x = (S) => {
            b == null || b(S);
          }, w = () => {
            g == null || g();
          };
          return f.on(c.RoomEvent.SignalConnected, P).on(c.RoomEvent.MediaDevicesError, M).on(c.RoomEvent.EncryptionError, A).on(c.RoomEvent.Disconnected, x).on(c.RoomEvent.Connected, w), () => {
            f.off(c.RoomEvent.SignalConnected, P).off(c.RoomEvent.MediaDevicesError, M).off(c.RoomEvent.EncryptionError, A).off(c.RoomEvent.Disconnected, x).off(c.RoomEvent.Connected, w);
          };
        }, [f, l, p, m, v, T, k, g, b]), i.useEffect(() => {
          if (f) {
            if (y) {
              f.simulateParticipants({ participants: { count: y }, publish: { audio: true, useRealTracks: true } });
              return;
            }
            if (d) {
              if (R.current = true, r.log.debug("connecting"), !t) {
                r.log.debug("no token yet");
                return;
              }
              if (!n) {
                r.log.warn("no livekit url provided"), v == null || v(Error("no livekit url provided"));
                return;
              }
              f.connect(n, t, a).catch((P) => {
                r.log.warn(P), R.current === true && (v == null || v(P));
              });
            } else r.log.debug("disconnecting because connect is false"), R.current = false, f.disconnect();
          }
        }, [d, t, JSON.stringify(a), f, v, n, y]), i.useEffect(() => {
          if (f) return () => {
            r.log.info("disconnecting on onmount"), f.disconnect();
          };
        }, [f]), { room: f, htmlProps: L };
      }
      function K(e = {}) {
        let t = u.useMaybeParticipantContext();
        e.participant && (t = e.participant);
        const n = i.useMemo(() => r.participantInfoObserver(t), [t]), { identity: s, name: o, metadata: a } = u.useObservableState(n, { name: t == null ? void 0 : t.name, identity: t == null ? void 0 : t.identity, metadata: t == null ? void 0 : t.metadata });
        return { identity: s, name: o, metadata: a };
      }
      function V(e = {}) {
        const t = u.useEnsureParticipant(e.participant), n = i.useMemo(() => r.participantPermissionObserver(t), [t]);
        return u.useObservableState(n, t.permissions);
      }
      function h(e = {}) {
        const t = r.useEnsureRoom(e.room), [n, s] = i.useState([]);
        return i.useEffect(() => {
          const o = r.connectedParticipantsObserver(t, { additionalRoomEvents: e.updateOnlyOn }).subscribe(s);
          return () => o.unsubscribe();
        }, [t, JSON.stringify(e.updateOnlyOn)]), n;
      }
      function G(e = {}) {
        const t = h(e), { localParticipant: n } = r.useLocalParticipant(e);
        return i.useMemo(() => [n, ...t], [n, t]);
      }
      function W(e, t = {}) {
        const n = r.useRoomContext(), [s] = i.useState(t.updateOnlyOn), o = i.useMemo(() => typeof e == "string" ? r.connectedParticipantObserver(n, e, { additionalEvents: s }) : r.participantByIdentifierObserver(n, e, { additionalEvents: s }), [n, JSON.stringify(e), s]), [a, d] = i.useState({ p: void 0 });
        return i.useEffect(() => {
          const l = o.subscribe((p) => d({ p }));
          return () => l.unsubscribe();
        }, [o]), a.p;
      }
      function H(e = {}) {
        const t = r.useEnsureRoom(e.room), n = i.useMemo(() => r.roomInfoObserver(t), [t]), { name: s, metadata: o } = u.useObservableState(n, { name: t.name, metadata: t.metadata });
        return { name: s, metadata: o };
      }
      function N() {
        const e = r.useRoomContext(), t = i.useMemo(() => r.activeSpeakerObserver(e), [e]);
        return u.useObservableState(t, e.activeSpeakers);
      }
      function Q(e) {
        const [t, n] = i.useState(r.sortParticipants(e)), s = N();
        return i.useEffect(() => {
          n(r.sortParticipants(e));
        }, [s, e]), t;
      }
      function X(e, t, n = {}) {
        const [s, o] = i.useState(void 0);
        return i.useEffect(() => {
          var d;
          if (e === void 0) throw Error("token endpoint needs to be defined");
          if (((d = n.userInfo) == null ? void 0 : d.identity) === void 0) return;
          (async () => {
            r.log.debug("fetching token");
            const l = new URLSearchParams({ ...n.userInfo, roomName: t }), p = await fetch(`${e}?${l.toString()}`);
            if (!p.ok) {
              r.log.error(`Could not fetch token. Server responded with status ${p.status}: ${p.statusText}`);
              return;
            }
            const { accessToken: m } = await p.json();
            o(m);
          })();
        }, [e, t, JSON.stringify(n)]), s;
      }
      function Y(e) {
        const [t, n] = i.useState(r.getTrackByIdentifier(e)), { trackObserver: s } = i.useMemo(() => r.setupMediaTrack(e), [e.participant.sid ?? e.participant.identity, e.source]);
        return i.useEffect(() => {
          const o = s.subscribe((a) => {
            n(a);
          });
          return () => o == null ? void 0 : o.unsubscribe();
        }, [s]), { participant: e.participant, source: e.source ?? c.Track.Source.Unknown, publication: t };
      }
      function Z(e, t) {
        const n = u.useEnsureParticipant(t);
        return Y({ name: e, participant: n });
      }
      function E(e, t) {
        const n = r.useRoomContext(), s = u.useMaybeParticipantContext(), o = t ? n.getParticipantByIdentity(t) : s, a = i.useMemo(() => o ? r.participantTracksObservable(o, { sources: e }) : void 0, [o == null ? void 0 : o.sid, o == null ? void 0 : o.identity, JSON.stringify(e)]);
        return u.useObservableState(a, []);
      }
      function ee(e) {
        var n, s, o;
        const t = i.useMemo(() => {
          var a;
          return (a = e == null ? void 0 : e.publication) != null && a.track ? r.trackSyncTimeObserver(e == null ? void 0 : e.publication.track) : void 0;
        }, [(n = e == null ? void 0 : e.publication) == null ? void 0 : n.track]);
        return u.useObservableState(t, { timestamp: Date.now(), rtpTimestamp: (o = (s = e == null ? void 0 : e.publication) == null ? void 0 : s.track) == null ? void 0 : o.rtpTimestamp });
      }
      var te = { bufferSize: 100 };
      function I(e, t) {
        const n = { ...te, ...t }, [s, o] = i.useState([]), a = ee(e), d = (l) => {
          var p;
          (p = n.onTranscription) == null || p.call(n, l), o((m) => r.dedupeSegments(m, l.map((g) => r.addMediaTimestampToTranscription(g, a)), n.bufferSize));
        };
        return i.useEffect(() => {
          if (!(e != null && e.publication)) return;
          const l = r.trackTranscriptionObserver(e.publication).subscribe((p) => {
            d(...p);
          });
          return () => {
            l.unsubscribe();
          };
        }, [e && r.getTrackReferenceId(e), d]), { segments: s };
      }
      function _(e = {}) {
        const t = u.useMaybeParticipantContext(), n = e.participant ?? t, s = i.useMemo(() => r.participantAttributesObserver(n), [n]);
        return u.useObservableState(s, { attributes: n == null ? void 0 : n.attributes });
      }
      function ne(e, t = {}) {
        const n = u.useEnsureParticipant(t.participant), [s, o] = i.useState(n.attributes[e]);
        return i.useEffect(() => {
          if (!n) return;
          const a = r.participantAttributesObserver(n).subscribe((d) => {
            d.changed[e] !== void 0 && o(d.attributes[e]);
          });
          return () => {
            a.unsubscribe();
          };
        }, [n, e]), s;
      }
      var D = "lk.agent.state";
      function se() {
        const e = h(), t = e.find((b) => b.kind === c.ParticipantKind.AGENT && !("lk.publish_on_behalf" in b.attributes)), n = e.find((b) => b.kind === c.ParticipantKind.AGENT && b.attributes["lk.publish_on_behalf"] === (t == null ? void 0 : t.identity)), s = E([c.Track.Source.Microphone, c.Track.Source.Camera], t == null ? void 0 : t.identity), o = E([c.Track.Source.Microphone, c.Track.Source.Camera], n == null ? void 0 : n.identity), a = s.find((b) => b.source === c.Track.Source.Microphone) ?? o.find((b) => b.source === c.Track.Source.Microphone), d = s.find((b) => b.source === c.Track.Source.Camera) ?? o.find((b) => b.source === c.Track.Source.Camera), { segments: l } = I(a), p = u.useConnectionState(), { attributes: m } = _({ participant: t }), g = i.useMemo(() => p === c.ConnectionState.Disconnected ? "disconnected" : p === c.ConnectionState.Connecting || !t || !(m != null && m[D]) ? "connecting" : m[D], [m, t, p]);
        return { agent: t, state: g, audioTrack: a, videoTrack: d, agentTranscriptions: l, agentAttributes: m };
      }
      function oe(e) {
        const t = r.useEnsureRoom(e), n = u.useConnectionState(t), s = i.useMemo(() => r.recordingStatusObservable(t), [t, n]);
        return u.useObservableState(s, t.isRecording);
      }
      function re(e) {
        const t = r.useRoomContext(), s = u.useConnectionState(t) === c.ConnectionState.Disconnected, o = i.useMemo(() => r.setupTextStream(t, e), [t, e]), a = s ? void 0 : o;
        return { textStreams: u.useObservableState(a, []) };
      }
      exports.useAudioPlayback = F;
      exports.useClearPinButton = q;
      exports.useDataChannel = U;
      exports.useIsRecording = oe;
      exports.useLiveKitRoom = z;
      exports.useParticipantAttribute = ne;
      exports.useParticipantAttributes = _;
      exports.useParticipantInfo = K;
      exports.useParticipantPermissions = V;
      exports.useParticipantTracks = E;
      exports.useParticipants = G;
      exports.useRemoteParticipant = W;
      exports.useRemoteParticipants = h;
      exports.useRoomInfo = H;
      exports.useSortedParticipants = Q;
      exports.useSpeakingParticipants = N;
      exports.useTextStream = re;
      exports.useToken = X;
      exports.useTrackByName = Z;
      exports.useTrackTranscription = I;
      exports.useVoiceAssistant = se;
    }
  });

  // node_modules/@livekit/components-react/dist/shared-B22QYter.js
  var require_shared_B22QYter = __commonJS({
    "node_modules/@livekit/components-react/dist/shared-B22QYter.js"(exports) {
      "use strict";
      init_react_shim();
      var b = require_livekit_client_umd();
      var V = require_react();
      var S = require_shared_ChNXN17z();
      var g = require_shared_BPm3y_nD();
      function ct(t) {
        const a = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
        if (t) {
          for (const n in t) if (n !== "default") {
            const r = Object.getOwnPropertyDescriptor(t, n);
            Object.defineProperty(a, n, r.get ? r : { enumerable: true, get: () => t[n] });
          }
        }
        return a.default = t, Object.freeze(a);
      }
      var e = ct(V);
      function lt(t) {
        const a = (o) => typeof window < "u" ? window.matchMedia(o).matches : false, [n, r] = e.useState(a(t));
        function c() {
          r(a(t));
        }
        return e.useEffect(() => {
          const o = window.matchMedia(t);
          return c(), o.addListener ? o.addListener(c) : o.addEventListener("change", c), () => {
            o.removeListener ? o.removeListener(c) : o.removeEventListener("change", c);
          };
        }, [t]), n;
      }
      var Ce = e.createContext(void 0);
      function Me(t) {
        const a = e.useContext(Ce);
        if (t === true) {
          if (a) return a;
          throw Error("tried to access feature context, but none is present");
        }
        return a;
      }
      var le = e.forwardRef(function(a, n) {
        const { mergedProps: r } = g.useChatToggle({ props: a });
        return e.createElement("button", { ref: n, ...r }, a.children);
      });
      var ie = e.forwardRef(function(a, n) {
        const { buttonProps: r } = g.useDisconnectButton(a);
        return e.createElement("button", { ref: n, ...r }, a.children);
      });
      var ye = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentColor", ...t }, e.createElement("path", { d: "M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z" }), e.createElement("path", { d: "m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z" }));
      var Te = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentColor", ...t }, e.createElement("path", { d: "M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z" }));
      var Re = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 24 24", ...t }, e.createElement("path", { fill: "#FFF", d: "M4.99 3.99a1 1 0 0 0-.697 1.717L10.586 12l-6.293 6.293a1 1 0 1 0 1.414 1.414L12 13.414l6.293 6.293a1 1 0 1 0 1.414-1.414L13.414 12l6.293-6.293a1 1 0 0 0-.727-1.717 1 1 0 0 0-.687.303L12 10.586 5.707 4.293a1 1 0 0 0-.717-.303z" }));
      var Ie = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 18, fill: "none", ...t }, e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z", clipRule: "evenodd" }));
      var re = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("path", { fill: "currentcolor", fillRule: "evenodd", d: "M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z", clipRule: "evenodd" }));
      var Pe = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("g", { stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 1.5 }, e.createElement("path", { d: "M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9" })));
      var Ne = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("path", { fill: "currentcolor", fillRule: "evenodd", d: "M8.961.894C8.875-.298 7.125-.298 7.04.894c-.066.912-1.246 1.228-1.76.472-.67-.99-2.186-.115-1.664.96.399.824-.465 1.688-1.288 1.289-1.076-.522-1.95.994-.961 1.665.756.513.44 1.693-.472 1.759-1.192.086-1.192 1.836 0 1.922.912.066 1.228 1.246.472 1.76-.99.67-.115 2.186.96 1.664.824-.399 1.688.465 1.289 1.288-.522 1.076.994 1.95 1.665.961.513-.756 1.693-.44 1.759.472.086 1.192 1.836 1.192 1.922 0 .066-.912 1.246-1.228 1.76-.472.67.99 2.186.115 1.664-.96-.399-.824.465-1.688 1.288-1.289 1.076.522 1.95-.994.961-1.665-.756-.513-.44-1.693.472-1.759 1.192-.086 1.192-1.836 0-1.922-.912-.066-1.228-1.246-.472-1.76.99-.67.115-2.186-.96-1.664-.824.399-1.688-.465-1.289-1.288.522-1.076-.994-1.95-1.665-.961-.513.756-1.693.44-1.759-.472ZM8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10Z", clipRule: "evenodd" }));
      var Ae = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z", clipRule: "evenodd" }));
      var Le = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("path", { fill: "currentcolor", fillRule: "evenodd", d: "M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z", clipRule: "evenodd" }));
      var xe = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentColor", ...t }, e.createElement("path", { d: "M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z" }), e.createElement("path", { d: "M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z" }));
      var Ve = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentColor", ...t }, e.createElement("path", { fillRule: "evenodd", d: "M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z", clipRule: "evenodd" }), e.createElement("path", { d: "M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z" }));
      var Fe = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentcolor", ...t }, e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }));
      var De = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentcolor", ...t }, e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("g", { opacity: 0.25 }, e.createElement("path", { d: "M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("path", { d: "M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" })));
      var ze = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentcolor", ...t }, e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("g", { opacity: 0.25 }, e.createElement("path", { d: "M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("path", { d: "M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" }), e.createElement("path", { d: "M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z" })));
      var Oe = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "currentColor", ...t }, e.createElement("g", { opacity: 0.25 }, e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z" }), e.createElement("path", { d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z" })));
      var se = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 20, height: 16, fill: "none", ...t }, e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z", clipRule: "evenodd" }));
      var $e = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 20, height: 16, fill: "none", ...t }, e.createElement("g", { fill: "currentColor" }, e.createElement("path", { d: "M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z" }), e.createElement("path", { fillRule: "evenodd", d: "M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z", clipRule: "evenodd" })));
      var ce = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z", clipRule: "evenodd", opacity: 0.7 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z", clipRule: "evenodd", opacity: 0.6 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z", clipRule: "evenodd", opacity: 0.5 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z", clipRule: "evenodd" }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z", clipRule: "evenodd", opacity: 0.4 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z", clipRule: "evenodd", opacity: 0.9 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z", clipRule: "evenodd", opacity: 0.3 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z", clipRule: "evenodd", opacity: 0.8 }), e.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z", clipRule: "evenodd", opacity: 0.2 }));
      var Ze = (t) => e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", ...t }, e.createElement("g", { stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 1.5 }, e.createElement("path", { d: "M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25" })));
      var _e = e.forwardRef(function({ trackRef: a, ...n }, r) {
        const c = g.useMaybeTrackRefContext(), { mergedProps: o, inFocus: u } = g.useFocusToggle({ trackRef: a ?? c, props: n });
        return e.createElement(g.LayoutContext.Consumer, null, (l) => l !== void 0 && e.createElement("button", { ref: r, ...o }, n.children ? n.children : u ? e.createElement(Ze, null) : e.createElement(Pe, null)));
      });
      var G = e.forwardRef(function({ kind: a, initialSelection: n, onActiveDeviceChange: r, onDeviceListChange: c, onDeviceSelectError: o, exactMatch: u, track: l, requestPermissions: i, onError: v, ...s }, p) {
        const d = S.useMaybeRoomContext(), w = e.useCallback((k) => {
          d && d.emit(b.RoomEvent.MediaDevicesError, k), v == null || v(k);
        }, [d, v]), { devices: h, activeDeviceId: m, setActiveMediaDevice: f, className: M } = g.useMediaDeviceSelect({ kind: a, room: d, track: l, requestPermissions: i, onError: w });
        e.useEffect(() => {
          n !== void 0 && f(n);
        }, [f]), e.useEffect(() => {
          typeof c == "function" && c(h);
        }, [c, h]), e.useEffect(() => {
          m && m !== "" && (r == null || r(m));
        }, [m]);
        const E = async (k) => {
          try {
            await f(k, { exact: u ?? true });
          } catch (T) {
            if (T instanceof Error) o == null || o(T);
            else throw T;
          }
        }, R = e.useMemo(() => g.mergeProps$1(s, { className: M }, { className: "lk-list" }), [M, s]), y = !!h.find((k) => k.label.toLowerCase().startsWith("default"));
        function C(k, T, A) {
          return k === T || !y && A === 0 && T === "default";
        }
        return e.createElement("ul", { ref: p, ...R }, h.map((k, T) => e.createElement("li", { key: k.deviceId, id: k.deviceId, "data-lk-active": C(k.deviceId, m, T), "aria-selected": C(k.deviceId, m, T), role: "option" }, e.createElement("button", { className: "lk-button", onClick: () => E(k.deviceId) }, k.label))));
      });
      var oe = e.forwardRef(function({ label: a, ...n }, r) {
        const c = S.useRoomContext(), { mergedProps: o, canPlayAudio: u } = g.useStartAudio({ room: c, props: n }), { mergedProps: l, canPlayVideo: i } = g.useStartVideo({ room: c, props: o }), { style: v, ...s } = l;
        return v.display = u && i ? "none" : "block", e.createElement("button", { ref: r, style: v, ...s }, a ?? `Start ${u ? "Video" : "Audio"}`);
      });
      function je(t, a) {
        switch (t) {
          case b.Track.Source.Microphone:
            return a ? e.createElement(Ve, null) : e.createElement(xe, null);
          case b.Track.Source.Camera:
            return a ? e.createElement(Te, null) : e.createElement(ye, null);
          case b.Track.Source.ScreenShare:
            return a ? e.createElement($e, null) : e.createElement(se, null);
          default:
            return;
        }
      }
      function it(t) {
        switch (t) {
          case b.ConnectionQuality.Excellent:
            return e.createElement(Fe, null);
          case b.ConnectionQuality.Good:
            return e.createElement(De, null);
          case b.ConnectionQuality.Poor:
            return e.createElement(ze, null);
          default:
            return e.createElement(Oe, null);
        }
      }
      var Z = e.forwardRef(function({ showIcon: a, ...n }, r) {
        const { buttonProps: c, enabled: o } = g.useTrackToggle(n), [u, l] = e.useState(false);
        return e.useEffect(() => {
          l(true);
        }, []), u && e.createElement("button", { ref: r, ...c }, (a ?? true) && je(n.source, o), n.children);
      });
      var ue = e.forwardRef(function(a, n) {
        const { className: r, quality: c } = g.useConnectionQualityIndicator(a), o = e.useMemo(() => ({ ...g.mergeProps$1(a, { className: r }), "data-lk-quality": c }), [c, a, r]);
        return e.createElement("div", { ref: n, ...o }, a.children ?? it(c));
      });
      var K = e.forwardRef(function({ participant: a, ...n }, r) {
        const c = g.useEnsureParticipant(a), { className: o, infoObserver: u } = e.useMemo(() => S.setupParticipantName(c), [c]), { identity: l, name: i } = g.useObservableState(u, { name: c.name, identity: c.identity, metadata: c.metadata }), v = e.useMemo(() => g.mergeProps$1(n, { className: o, "data-lk-participant-name": i }), [n, o, i]);
        return e.createElement("span", { ref: r, ...v }, i !== "" ? i : l, n.children);
      });
      var de = e.forwardRef(function({ trackRef: a, show: n = "always", ...r }, c) {
        const { className: o, isMuted: u } = g.useTrackMutedIndicator(a), l = n === "always" || n === "muted" && u || n === "unmuted" && !u, i = e.useMemo(() => g.mergeProps$1(r, { className: o }), [o, r]);
        return l ? e.createElement("div", { ref: c, ...i, "data-lk-muted": u }, r.children ?? je(a.source, !u)) : null;
      });
      var me = (t) => e.createElement("svg", { width: 320, height: 320, viewBox: "0 0 320 320", preserveAspectRatio: "xMidYMid meet", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...t }, e.createElement("path", { d: "M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z", fill: "white", fillOpacity: 0.25 }), e.createElement("path", { d: "M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z", fill: "white", fillOpacity: 0.25 }));
      function Be(t, a = {}) {
        const [n, r] = e.useState(S.getTrackByIdentifier(t)), [c, o] = e.useState(n == null ? void 0 : n.isMuted), [u, l] = e.useState(n == null ? void 0 : n.isSubscribed), [i, v] = e.useState(n == null ? void 0 : n.track), [s, p] = e.useState("landscape"), d = e.useRef(), { className: w, trackObserver: h } = e.useMemo(() => S.setupMediaTrack(t), [t.participant.sid ?? t.participant.identity, t.source, S.isTrackReference(t) && t.publication.trackSid]);
        return e.useEffect(() => {
          const m = h.subscribe((f) => {
            S.log.debug("update track", f), r(f), o(f == null ? void 0 : f.isMuted), l(f == null ? void 0 : f.isSubscribed), v(f == null ? void 0 : f.track);
          });
          return () => m == null ? void 0 : m.unsubscribe();
        }, [h]), e.useEffect(() => {
          var m, f;
          return i && (d.current && i.detach(d.current), (m = a.element) != null && m.current && !(t.participant.isLocal && (i == null ? void 0 : i.kind) === "audio") && i.attach(a.element.current)), d.current = (f = a.element) == null ? void 0 : f.current, () => {
            d.current && (i == null || i.detach(d.current));
          };
        }, [i, a.element]), e.useEffect(() => {
          var m, f;
          if (typeof ((m = n == null ? void 0 : n.dimensions) == null ? void 0 : m.width) == "number" && typeof ((f = n == null ? void 0 : n.dimensions) == null ? void 0 : f.height) == "number") {
            const M = n.dimensions.width > n.dimensions.height ? "landscape" : "portrait";
            p(M);
          }
        }, [n]), { publication: n, isMuted: c, isSubscribed: u, track: i, elementProps: g.mergeProps$1(a.props, { className: w, "data-lk-local-participant": t.participant.isLocal, "data-lk-source": n == null ? void 0 : n.source, ...(n == null ? void 0 : n.kind) === "video" && { "data-lk-orientation": s } }) };
      }
      var ae;
      var ke;
      function st() {
        if (ke) return ae;
        ke = 1;
        var t = "Expected a function", a = NaN, n = "[object Symbol]", r = /^\s+|\s+$/g, c = /^[-+]0x[0-9a-f]+$/i, o = /^0b[01]+$/i, u = /^0o[0-7]+$/i, l = parseInt, i = typeof S.commonjsGlobal == "object" && S.commonjsGlobal && S.commonjsGlobal.Object === Object && S.commonjsGlobal, v = typeof self == "object" && self && self.Object === Object && self, s = i || v || Function("return this")(), p = Object.prototype, d = p.toString, w = Math.max, h = Math.min, m = function() {
          return s.Date.now();
        };
        function f(C, k, T) {
          var A, z, I, L, F, O, D = 0, _ = false, N = false, q = true;
          if (typeof C != "function") throw new TypeError(t);
          k = y(k) || 0, M(T) && (_ = !!T.leading, N = "maxWait" in T, I = N ? w(y(T.maxWait) || 0, k) : I, q = "trailing" in T ? !!T.trailing : q);
          function j(x) {
            var $ = A, Q = z;
            return A = z = void 0, D = x, L = C.apply(Q, $), L;
          }
          function ee(x) {
            return D = x, F = setTimeout(H, k), _ ? j(x) : L;
          }
          function te(x) {
            var $ = x - O, Q = x - D, Ee = k - $;
            return N ? h(Ee, I - Q) : Ee;
          }
          function B(x) {
            var $ = x - O, Q = x - D;
            return O === void 0 || $ >= k || $ < 0 || N && Q >= I;
          }
          function H() {
            var x = m();
            if (B(x)) return P(x);
            F = setTimeout(H, te(x));
          }
          function P(x) {
            return F = void 0, q && A ? j(x) : (A = z = void 0, L);
          }
          function W() {
            F !== void 0 && clearTimeout(F), D = 0, A = O = z = F = void 0;
          }
          function rt() {
            return F === void 0 ? L : P(m());
          }
          function ne() {
            var x = m(), $ = B(x);
            if (A = arguments, z = this, O = x, $) {
              if (F === void 0) return ee(O);
              if (N) return F = setTimeout(H, k), j(O);
            }
            return F === void 0 && (F = setTimeout(H, k)), L;
          }
          return ne.cancel = W, ne.flush = rt, ne;
        }
        function M(C) {
          var k = typeof C;
          return !!C && (k == "object" || k == "function");
        }
        function E(C) {
          return !!C && typeof C == "object";
        }
        function R(C) {
          return typeof C == "symbol" || E(C) && d.call(C) == n;
        }
        function y(C) {
          if (typeof C == "number") return C;
          if (R(C)) return a;
          if (M(C)) {
            var k = typeof C.valueOf == "function" ? C.valueOf() : C;
            C = M(k) ? k + "" : k;
          }
          if (typeof C != "string") return C === 0 ? C : +C;
          C = C.replace(r, "");
          var T = o.test(C);
          return T || u.test(C) ? l(C.slice(2), T ? 2 : 8) : c.test(C) ? a : +C;
        }
        return ae = f, ae;
      }
      var ot = st();
      var Se = S.getDefaultExportFromCjs(ot);
      function ut(t) {
        const a = V.useRef(t);
        a.current = t, V.useEffect(() => () => {
          a.current();
        }, []);
      }
      function dt(t, a = 500, n) {
        const r = V.useRef();
        ut(() => {
          r.current && r.current.cancel();
        });
        const c = V.useMemo(() => {
          const o = Se(t, a, n), u = (...l) => o(...l);
          return u.cancel = () => {
            o.cancel();
          }, u.isPending = () => !!r.current, u.flush = () => o.flush(), u;
        }, [t, a, n]);
        return V.useEffect(() => {
          r.current = Se(t, a, n);
        }, [t, a, n]), c;
      }
      function mt(t, a, n) {
        const r = (v, s) => v === s, c = t instanceof Function ? t() : t, [o, u] = V.useState(c), l = V.useRef(c), i = dt(u, a, n);
        return r(l.current, c) || (i(c), l.current = c), [o, i];
      }
      function ft({ threshold: t = 0, root: a = null, rootMargin: n = "0%", freezeOnceVisible: r = false, initialIsIntersecting: c = false, onChange: o } = {}) {
        var u;
        const [l, i] = V.useState(null), [v, s] = V.useState(() => ({ isIntersecting: c, entry: void 0 })), p = V.useRef();
        p.current = o;
        const d = ((u = v.entry) == null ? void 0 : u.isIntersecting) && r;
        V.useEffect(() => {
          if (!l || !("IntersectionObserver" in window) || d) return;
          const m = new IntersectionObserver((f) => {
            const M = Array.isArray(m.thresholds) ? m.thresholds : [m.thresholds];
            f.forEach((E) => {
              const R = E.isIntersecting && M.some((y) => E.intersectionRatio >= y);
              s({ isIntersecting: R, entry: E }), p.current && p.current(R, E);
            });
          }, { threshold: t, root: a, rootMargin: n });
          return m.observe(l), () => {
            m.disconnect();
          };
        }, [l, JSON.stringify(t), a, n, d, r]);
        const w = V.useRef(null);
        V.useEffect(() => {
          var m;
          !l && ((m = v.entry) != null && m.target) && !r && !d && w.current !== v.entry.target && (w.current = v.entry.target, s({ isIntersecting: c, entry: void 0 }));
        }, [l, v.entry, r, d, c]);
        const h = [i, !!v.isIntersecting, v.entry];
        return h.ref = h[0], h.isIntersecting = h[1], h.entry = h[2], h;
      }
      var He = e.forwardRef(function({ onTrackClick: a, onClick: n, onSubscriptionStatusChanged: r, trackRef: c, manageSubscription: o, ...u }, l) {
        const i = g.useEnsureTrackRef(c), v = e.useRef(null);
        e.useImperativeHandle(l, () => v.current);
        const s = ft({ root: v.current }), [p] = mt(s, 3e3);
        e.useEffect(() => {
          o && i.publication instanceof b.RemoteTrackPublication && (p == null ? void 0 : p.isIntersecting) === false && (s == null ? void 0 : s.isIntersecting) === false && i.publication.setSubscribed(false);
        }, [p, i, o]), e.useEffect(() => {
          o && i.publication instanceof b.RemoteTrackPublication && (s == null ? void 0 : s.isIntersecting) === true && i.publication.setSubscribed(true);
        }, [s, i, o]);
        const { elementProps: d, publication: w, isSubscribed: h } = Be(i, { element: v, props: u });
        e.useEffect(() => {
          r == null || r(!!h);
        }, [h, r]);
        const m = (f) => {
          n == null || n(f), a == null || a({ participant: i == null ? void 0 : i.participant, track: w });
        };
        return e.createElement("video", { ref: v, ...d, muted: true, onClick: m });
      });
      var X = e.forwardRef(function({ trackRef: a, onSubscriptionStatusChanged: n, volume: r, ...c }, o) {
        const u = g.useEnsureTrackRef(a), l = e.useRef(null);
        e.useImperativeHandle(o, () => l.current);
        const { elementProps: i, isSubscribed: v, track: s, publication: p } = Be(u, { element: l, props: c });
        return e.useEffect(() => {
          n == null || n(!!v);
        }, [v, n]), e.useEffect(() => {
          s === void 0 || r === void 0 || (s instanceof b.RemoteAudioTrack ? s.setVolume(r) : S.log.warn("Volume can only be set on remote audio tracks."));
        }, [r, s]), e.useEffect(() => {
          p === void 0 || c.muted === void 0 || (p instanceof b.RemoteTrackPublication ? p.setEnabled(!c.muted) : S.log.warn("Can only call setEnabled on remote track publications."));
        }, [c.muted, p, s]), e.createElement("audio", { ref: l, ...i });
      });
      function Ue(t) {
        const a = !!g.useMaybeParticipantContext();
        return t.participant && !a ? e.createElement(g.ParticipantContext.Provider, { value: t.participant }, t.children) : e.createElement(e.Fragment, null, t.children);
      }
      function qe(t) {
        const a = !!g.useMaybeTrackRefContext();
        return t.trackRef && !a ? e.createElement(g.TrackRefContext.Provider, { value: t.trackRef }, t.children) : e.createElement(e.Fragment, null, t.children);
      }
      var J = e.forwardRef(function({ trackRef: a, children: n, onParticipantClick: r, disableSpeakingIndicator: c, ...o }, u) {
        var w, h;
        const l = g.useEnsureTrackRef(a), { elementProps: i } = g.useParticipantTile({ htmlProps: o, disableSpeakingIndicator: c, onParticipantClick: r, trackRef: l }), v = g.useIsEncrypted(l.participant), s = g.useMaybeLayoutContext(), p = (w = Me()) == null ? void 0 : w.autoSubscription, d = e.useCallback((m) => {
          l.source && !m && s && s.pin.dispatch && S.isTrackReferencePinned(l, s.pin.state) && s.pin.dispatch({ msg: "clear_pin" });
        }, [l, s]);
        return e.createElement("div", { ref: u, style: { position: "relative" }, ...i }, e.createElement(qe, { trackRef: l }, e.createElement(Ue, { participant: l.participant }, n ?? e.createElement(e.Fragment, null, S.isTrackReference(l) && (((h = l.publication) == null ? void 0 : h.kind) === "video" || l.source === b.Track.Source.Camera || l.source === b.Track.Source.ScreenShare) ? e.createElement(He, { trackRef: l, onSubscriptionStatusChanged: d, manageSubscription: p }) : S.isTrackReference(l) && e.createElement(X, { trackRef: l, onSubscriptionStatusChanged: d }), e.createElement("div", { className: "lk-participant-placeholder" }, e.createElement(me, null)), e.createElement("div", { className: "lk-participant-metadata" }, e.createElement("div", { className: "lk-participant-metadata-item" }, l.source === b.Track.Source.Camera ? e.createElement(e.Fragment, null, v && e.createElement(Le, { style: { marginRight: "0.25rem" } }), e.createElement(de, { trackRef: { participant: l.participant, source: b.Track.Source.Microphone }, show: "muted" }), e.createElement(K, null)) : e.createElement(e.Fragment, null, e.createElement(se, { style: { marginRight: "0.25rem" } }), e.createElement(K, null, "'s screen"))), e.createElement(ue, { className: "lk-participant-metadata-item" }))), e.createElement(_e, { trackRef: l }))));
      });
      function We(t) {
        const a = g.mergeProps$1(t, { className: "lk-focus-layout" });
        return e.createElement("div", { ...a }, t.children);
      }
      function Qe({ trackRef: t, ...a }) {
        return e.createElement(J, { trackRef: t, ...a });
      }
      function Y({ tracks: t, ...a }) {
        return e.createElement(e.Fragment, null, t.map((n) => e.createElement(g.TrackRefContext.Provider, { value: n, key: S.getTrackReferenceId(n) }, g.cloneSingleChild(a.children))));
      }
      function ht({ totalPageCount: t, nextPage: a, prevPage: n, currentPage: r, pagesContainer: c }) {
        const [o, u] = e.useState(false);
        return e.useEffect(() => {
          let l;
          return c && (l = S.createInteractingObservable(c.current, 2e3).subscribe(u)), () => {
            l && l.unsubscribe();
          };
        }, [c]), e.createElement("div", { className: "lk-pagination-control", "data-lk-user-interaction": o }, e.createElement("button", { className: "lk-button", onClick: n }, e.createElement(re, null)), e.createElement("span", { className: "lk-pagination-count" }, `${r} of ${t}`), e.createElement("button", { className: "lk-button", onClick: a }, e.createElement(re, null)));
      }
      var gt = e.forwardRef(function({ totalPageCount: a, currentPage: n }, r) {
        const c = new Array(a).fill("").map((o, u) => u + 1 === n ? e.createElement("span", { "data-lk-active": true, key: u }) : e.createElement("span", { key: u }));
        return e.createElement("div", { ref: r, className: "lk-pagination-indicator" }, c);
      });
      function Ge({ tracks: t, ...a }) {
        const n = e.createRef(), r = e.useMemo(() => g.mergeProps$1(a, { className: "lk-grid-layout" }), [a]), { layout: c } = g.useGridLayout(n, t.length), o = g.usePagination(c.maxTiles, t);
        return g.useSwipe(n, { onLeftSwipe: o.nextPage, onRightSwipe: o.prevPage }), e.createElement("div", { ref: n, "data-lk-pagination": o.totalPageCount > 1, ...r }, e.createElement(Y, { tracks: o.tracks }, a.children), t.length > c.maxTiles && e.createElement(e.Fragment, null, e.createElement(gt, { totalPageCount: o.totalPageCount, currentPage: o.currentPage }), e.createElement(ht, { pagesContainer: n, ...o })));
      }
      var vt = 130;
      var pt = 140;
      var we = 1;
      var Ke = 16 / 10;
      var Et = (1 - Ke) * -1;
      function Je({ tracks: t, orientation: a, ...n }) {
        const r = e.useRef(null), [c, o] = e.useState(0), { width: u, height: l } = g.useSize(r), i = a || (l >= u ? "vertical" : "horizontal"), v = i === "vertical" ? Math.max(u * Et, vt) : Math.max(l * Ke, pt), s = S.getScrollBarWidth(), p = Math.max(i === "vertical" ? (l - s) / v : (u - s) / v, we);
        let d = Math.round(p);
        Math.abs(p - c) < 0.5 ? d = Math.round(c) : c !== p && o(p);
        const w = g.useVisualStableUpdate(t, d);
        return e.useLayoutEffect(() => {
          r.current && (r.current.dataset.lkOrientation = i, r.current.style.setProperty("--lk-max-visible-tiles", d.toString()));
        }, [d, i]), e.createElement("aside", { key: i, className: "lk-carousel", ref: r, ...n }, e.createElement(Y, { tracks: w }, n.children));
      }
      function fe({ value: t, onPinChange: a, onWidgetChange: n, children: r }) {
        const c = g.useEnsureCreateLayoutContext(t);
        return e.useEffect(() => {
          S.log.debug("PinState Updated", { state: c.pin.state }), a && c.pin.state && a(c.pin.state);
        }, [c.pin.state, a]), e.useEffect(() => {
          S.log.debug("Widget Updated", { widgetState: c.widget.state }), n && c.widget.state && n(c.widget.state);
        }, [n, c.widget.state]), e.createElement(g.LayoutContext.Provider, { value: c }, r);
      }
      function Xe({ volume: t, muted: a }) {
        const n = g.useTracks([b.Track.Source.Microphone, b.Track.Source.ScreenShareAudio, b.Track.Source.Unknown], { updateOnlyOn: [], onlySubscribed: true }).filter((r) => !r.participant.isLocal && r.publication.kind === b.Track.Kind.Audio);
        return e.createElement("div", { style: { display: "none" } }, n.map((r) => e.createElement(X, { key: S.getTrackReferenceId(r), trackRef: r, volume: t, muted: a })));
      }
      function Ye(t) {
        const a = e.useMemo(() => g.mergeProps$1(t, { className: "lk-toast" }), [t]);
        return e.createElement("div", { ...a }, t.children);
      }
      var kt = (t) => {
        const a = [];
        for (let n = 0; n < t; n++) a.push([n, t - 1 - n]);
        return a;
      };
      var be = (t) => [[Math.floor(t / 2)], [-1]];
      var St = (t, a, n) => {
        const [r, c] = V.useState(0), [o, u] = V.useState([[]]);
        V.useEffect(() => {
          if (t === "thinking") u(be(a));
          else if (t === "connecting" || t === "initializing") {
            const i = [...kt(a)];
            u(i);
          } else u(t === "listening" ? be(a) : t === void 0 ? [new Array(a).fill(0).map((i, v) => v)] : [[]]);
          c(0);
        }, [t, a]);
        const l = V.useRef(null);
        return V.useEffect(() => {
          let i = performance.now();
          const v = (s) => {
            s - i >= n && (c((d) => d + 1), i = s), l.current = requestAnimationFrame(v);
          };
          return l.current = requestAnimationFrame(v), () => {
            l.current !== null && cancelAnimationFrame(l.current);
          };
        }, [n, a, t, o.length]), o[r % o.length];
      };
      var wt = /* @__PURE__ */ new Map([["connecting", 2e3], ["initializing", 2e3], ["listening", 500], ["thinking", 150]]);
      var bt = (t, a) => {
        if (t === void 0) return 1e3;
        let n = wt.get(t);
        if (n) switch (t) {
          case "connecting":
            n /= a;
            break;
        }
        return n;
      };
      var he = e.forwardRef(function({ state: a, options: n, barCount: r = 15, trackRef: c, children: o, ...u }, l) {
        const i = g.mergeProps$1(u, { className: "lk-audio-bar-visualizer" });
        let v = g.useMaybeTrackRefContext();
        c && (v = c);
        const s = g.useMultibandTrackVolume(v, { bands: r, loPass: 100, hiPass: 200 }), p = (n == null ? void 0 : n.minHeight) ?? 20, d = (n == null ? void 0 : n.maxHeight) ?? 100, w = St(a, r, bt(a, r) ?? 100);
        return e.createElement("div", { ref: l, ...i, "data-lk-va-state": a }, s.map((h, m) => o ? g.cloneSingleChild(o, { "data-lk-highlighted": w.includes(m), "data-lk-bar-index": m, className: "lk-audio-bar", style: { height: `${Math.min(d, Math.max(p, h * 100 + 5))}%` } }) : e.createElement("span", { key: m, "data-lk-highlighted": w.includes(m), "data-lk-bar-index": m, className: `lk-audio-bar ${w.includes(m) && "lk-highlighted"}`, style: { height: `${Math.min(d, Math.max(p, h * 100 + 5))}%` } })));
      });
      var et = e.forwardRef(function({ children: a, disableSpeakingIndicator: n, onParticipantClick: r, trackRef: c, ...o }, u) {
        const l = g.useEnsureTrackRef(c), { elementProps: i } = g.useParticipantTile({ trackRef: l, htmlProps: o, disableSpeakingIndicator: n, onParticipantClick: r });
        return e.createElement("div", { ref: u, style: { position: "relative", minHeight: "160px" }, ...i }, e.createElement(g.TrackRefContext.Provider, { value: l }, a ?? e.createElement(e.Fragment, null, S.isTrackReference(l) && e.createElement(X, { trackRef: l }), e.createElement(he, { barCount: 7, options: { minHeight: 8 } }), e.createElement("div", { className: "lk-participant-metadata" }, e.createElement("div", { className: "lk-participant-metadata-item" }, e.createElement(de, { trackRef: l }), e.createElement(K, null)), e.createElement(ue, { className: "lk-participant-metadata-item" })))));
      });
      function tt(t) {
        const [a, n] = e.useState(void 0), r = g.useConnectionState(t.room);
        return e.useEffect(() => {
          switch (r) {
            case b.ConnectionState.Reconnecting:
              n(e.createElement(e.Fragment, null, e.createElement(ce, { className: "lk-spinner" }), " Reconnecting"));
              break;
            case b.ConnectionState.Connecting:
              n(e.createElement(e.Fragment, null, e.createElement(ce, { className: "lk-spinner" }), " Connecting"));
              break;
            case b.ConnectionState.Disconnected:
              n(e.createElement(e.Fragment, null, "Disconnected"));
              break;
            default:
              n(void 0);
              break;
          }
        }, [r]), a ? e.createElement(Ye, { className: "lk-toast-connection-state" }, a) : e.createElement(e.Fragment, null);
      }
      var nt = e.forwardRef(function({ entry: a, hideName: n = false, hideTimestamp: r = false, messageFormatter: c, ...o }, u) {
        var d, w, h, m;
        const l = e.useMemo(() => c ? c(a.message) : a.message, [a.message, c]), i = !!a.editTimestamp, v = new Date(a.timestamp), s = typeof navigator < "u" ? navigator.language : "en-US", p = ((d = a.from) == null ? void 0 : d.name) ?? ((w = a.from) == null ? void 0 : w.identity);
        return e.createElement("li", { ref: u, className: "lk-chat-entry", title: v.toLocaleTimeString(s, { timeStyle: "full" }), "data-lk-message-origin": (h = a.from) != null && h.isLocal ? "local" : "remote", ...o }, (!r || !n || i) && e.createElement("span", { className: "lk-meta-data" }, !n && e.createElement("strong", { className: "lk-participant-name" }, p), (!r || i) && e.createElement("span", { className: "lk-timestamp" }, i && "edited ", v.toLocaleTimeString(s, { timeStyle: "short" }))), e.createElement("span", { className: "lk-message-body" }, l), e.createElement("span", { className: "lk-message-attachements" }, (m = a.attachedFiles) == null ? void 0 : m.map((f) => f.type.startsWith("image/") && e.createElement("img", { style: { maxWidth: "300px", maxHeight: "300px" }, key: f.name, src: URL.createObjectURL(f), alt: f.name }))));
      });
      function Ct(t) {
        return S.tokenize(t, S.createDefaultGrammar()).map((a, n) => {
          if (typeof a == "string") return a;
          {
            const r = a.content.toString(), c = a.type === "url" ? /^http(s?):\/\//.test(r) ? r : `https://${r}` : `mailto:${r}`;
            return e.createElement("a", { className: "lk-chat-link", key: n, href: c, target: "_blank", rel: "noreferrer" }, r);
          }
        });
      }
      function ge({ messageFormatter: t, messageDecoder: a, messageEncoder: n, channelTopic: r, ...c }) {
        const o = e.useRef(null), u = e.useRef(null), l = e.useMemo(() => ({ messageDecoder: a, messageEncoder: n, channelTopic: r }), [a, n, r]), { chatMessages: i, send: v, isSending: s } = g.useChat(l), p = g.useMaybeLayoutContext(), d = e.useRef(0);
        async function w(h) {
          h.preventDefault(), u.current && u.current.value.trim() !== "" && (await v(u.current.value), u.current.value = "", u.current.focus());
        }
        return e.useEffect(() => {
          var h;
          o && ((h = o.current) == null || h.scrollTo({ top: o.current.scrollHeight }));
        }, [o, i]), e.useEffect(() => {
          var f, M, E, R, y;
          if (!p || i.length === 0) return;
          if ((f = p.widget.state) != null && f.showChat && i.length > 0 && d.current !== ((M = i[i.length - 1]) == null ? void 0 : M.timestamp)) {
            d.current = (E = i[i.length - 1]) == null ? void 0 : E.timestamp;
            return;
          }
          const h = i.filter((C) => !d.current || C.timestamp > d.current).length, { widget: m } = p;
          h > 0 && ((R = m.state) == null ? void 0 : R.unreadMessages) !== h && ((y = m.dispatch) == null || y.call(m, { msg: "unread_msg", count: h }));
        }, [i, p == null ? void 0 : p.widget]), e.createElement("div", { ...c, className: "lk-chat" }, e.createElement("div", { className: "lk-chat-header" }, "Messages", p && e.createElement(le, { className: "lk-close-button" }, e.createElement(Re, null))), e.createElement("ul", { className: "lk-list lk-chat-messages", ref: o }, c.children ? i.map((h, m) => g.cloneSingleChild(c.children, { entry: h, key: h.id ?? m, messageFormatter: t })) : i.map((h, m, f) => {
          const M = m >= 1 && f[m - 1].from === h.from, E = m >= 1 && h.timestamp - f[m - 1].timestamp < 6e4;
          return e.createElement(nt, { key: h.id ?? m, hideName: M, hideTimestamp: M === false ? false : E, entry: h, messageFormatter: t });
        })), e.createElement("form", { className: "lk-chat-form", onSubmit: w }, e.createElement("input", { className: "lk-form-control lk-chat-form-input", disabled: s, ref: u, type: "text", placeholder: "Enter a message...", onInput: (h) => h.stopPropagation(), onKeyDown: (h) => h.stopPropagation(), onKeyUp: (h) => h.stopPropagation() }), e.createElement("button", { type: "submit", className: "lk-button lk-chat-form-button", disabled: s }, "Send")));
      }
      function U({ kind: t, initialSelection: a, onActiveDeviceChange: n, tracks: r, requestPermissions: c = false, ...o }) {
        const [u, l] = e.useState(false), [i, v] = e.useState([]), [s, p] = e.useState(true), [d, w] = e.useState(c), h = (E, R) => {
          S.log.debug("handle device change"), l(false), n == null || n(E, R);
        }, m = e.useRef(null), f = e.useRef(null);
        e.useLayoutEffect(() => {
          u && w(true);
        }, [u]), e.useLayoutEffect(() => {
          let E;
          return m.current && f.current && (i || s) && (E = S.computeMenuPosition(m.current, f.current, (R, y) => {
            f.current && Object.assign(f.current.style, { left: `${R}px`, top: `${y}px` });
          })), p(false), () => {
            E == null || E();
          };
        }, [m, f, i, s]);
        const M = e.useCallback((E) => {
          f.current && E.target !== m.current && u && S.wasClickOutside(f.current, E) && l(false);
        }, [u, f, m]);
        return e.useEffect(() => (document.addEventListener("click", M), () => {
          document.removeEventListener("click", M);
        }), [M]), e.createElement(e.Fragment, null, e.createElement("button", { className: "lk-button lk-button-menu", "aria-pressed": u, ...o, onClick: () => l(!u), ref: m }, o.children), !o.disabled && e.createElement("div", { className: "lk-device-menu", ref: f, style: { visibility: u ? "visible" : "hidden" } }, t ? e.createElement(G, { initialSelection: a, onActiveDeviceChange: (E) => h(t, E), onDeviceListChange: v, kind: t, track: r == null ? void 0 : r[t], requestPermissions: d }) : e.createElement(e.Fragment, null, e.createElement("div", { className: "lk-device-menu-heading" }, "Audio inputs"), e.createElement(G, { kind: "audioinput", onActiveDeviceChange: (E) => h("audioinput", E), onDeviceListChange: v, track: r == null ? void 0 : r.audioinput, requestPermissions: d }), e.createElement("div", { className: "lk-device-menu-heading" }, "Video inputs"), e.createElement(G, { kind: "videoinput", onActiveDeviceChange: (E) => h("videoinput", E), onDeviceListChange: v, track: r == null ? void 0 : r.videoinput, requestPermissions: d }))));
      }
      function ve() {
        e.useEffect(() => {
          g.warnAboutMissingStyles();
        }, []);
      }
      function at(t, a) {
        const [n, r] = e.useState(), c = e.useMemo(() => new b.Mutex(), []);
        return e.useEffect(() => {
          let o = false, u = [];
          return c.lock().then(async (l) => {
            try {
              (t.audio || t.video) && (u = await b.createLocalTracks(t), o ? u.forEach((i) => i.stop()) : r(u));
            } catch (i) {
              a && i instanceof Error ? a(i) : S.log.error(i);
            } finally {
              l();
            }
          }), () => {
            o = true, u.forEach((l) => {
              l.stop();
            });
          };
        }, [JSON.stringify(t, g.roomOptionsStringifyReplacer), a, c]), n;
      }
      function Mt(t, a, n) {
        const [r, c] = e.useState(null), [o, u] = e.useState(false), l = g.useMediaDevices({ kind: n }), [i, v] = e.useState(void 0), [s, p] = e.useState(), [d, w] = e.useState(a);
        e.useEffect(() => {
          w(a);
        }, [a]);
        const h = async (M, E) => {
          try {
            const R = E === "videoinput" ? await b.createLocalVideoTrack({ deviceId: M, resolution: b.VideoPresets.h720.resolution }) : await b.createLocalAudioTrack({ deviceId: M }), y = await R.getDeviceId(false);
            y && M !== y && (f.current = y, w(y)), p(R);
          } catch (R) {
            R instanceof Error && c(R);
          }
        }, m = async (M, E) => {
          await M.setDeviceId(E), f.current = E;
        }, f = e.useRef(d);
        return e.useEffect(() => {
          t && !s && !r && !o && (S.log.debug("creating track", n), u(true), h(d, n).finally(() => {
            u(false);
          }));
        }, [t, s, r, o]), e.useEffect(() => {
          s && (t ? i != null && i.deviceId && f.current !== (i == null ? void 0 : i.deviceId) ? (S.log.debug(`switching ${n} device from`, f.current, i.deviceId), m(s, i.deviceId)) : (S.log.debug(`unmuting local ${n} track`), s.unmute()) : (S.log.debug(`muting ${n} track`), s.mute().then(() => S.log.debug(s.mediaStreamTrack))));
        }, [s, i, t, n]), e.useEffect(() => () => {
          s && (S.log.debug(`stopping local ${n} track`), s.stop(), s.mute());
        }, []), e.useEffect(() => {
          v(l == null ? void 0 : l.find((M) => M.deviceId === d));
        }, [d, l]), { selectedDevice: i, localTrack: s, deviceError: r };
      }
      function yt({ defaults: t = {}, onValidate: a, onSubmit: n, onError: r, debug: c, joinLabel: o = "Join Room", micLabel: u = "Microphone", camLabel: l = "Camera", userLabel: i = "Username", persistUserChoices: v = true, videoProcessor: s, ...p }) {
        const { userChoices: d, saveAudioInputDeviceId: w, saveAudioInputEnabled: h, saveVideoInputDeviceId: m, saveVideoInputEnabled: f, saveUsername: M } = g.usePersistentUserChoices({ defaults: t, preventSave: !v, preventLoad: !v }), [E, R] = e.useState(d), [y, C] = e.useState(E.audioEnabled), [k, T] = e.useState(E.videoEnabled), [A, z] = e.useState(E.audioDeviceId), [I, L] = e.useState(E.videoDeviceId), [F, O] = e.useState(E.username);
        e.useEffect(() => {
          h(y);
        }, [y, h]), e.useEffect(() => {
          f(k);
        }, [k, f]), e.useEffect(() => {
          w(A);
        }, [A, w]), e.useEffect(() => {
          m(I);
        }, [I, m]), e.useEffect(() => {
          M(F);
        }, [F, M]);
        const D = at({ audio: y ? { deviceId: d.audioDeviceId } : false, video: k ? { deviceId: d.videoDeviceId, processor: s } : false }, r), _ = e.useRef(null), N = e.useMemo(() => D == null ? void 0 : D.filter((P) => P.kind === b.Track.Kind.Video)[0], [D]), q = e.useMemo(() => {
          if (N) {
            const { facingMode: P } = b.facingModeFromLocalTrack(N);
            return P;
          } else return "undefined";
        }, [N]), j = e.useMemo(() => D == null ? void 0 : D.filter((P) => P.kind === b.Track.Kind.Audio)[0], [D]);
        e.useEffect(() => (_.current && N && (N.unmute(), N.attach(_.current)), () => {
          N == null || N.detach();
        }), [N]);
        const [ee, te] = e.useState(), B = e.useCallback((P) => typeof a == "function" ? a(P) : P.username !== "", [a]);
        e.useEffect(() => {
          const P = { username: F, videoEnabled: k, videoDeviceId: I, audioEnabled: y, audioDeviceId: A };
          R(P), te(B(P));
        }, [F, k, B, y, A, I]);
        function H(P) {
          P.preventDefault(), B(E) ? typeof n == "function" && n(E) : S.log.warn("Validation failed with: ", E);
        }
        return ve(), e.createElement("div", { className: "lk-prejoin", ...p }, e.createElement("div", { className: "lk-video-container" }, N && e.createElement("video", { ref: _, width: "1280", height: "720", "data-lk-facing-mode": q }), (!N || !k) && e.createElement("div", { className: "lk-camera-off-note" }, e.createElement(me, null))), e.createElement("div", { className: "lk-button-group-container" }, e.createElement("div", { className: "lk-button-group audio" }, e.createElement(Z, { initialState: y, source: b.Track.Source.Microphone, onChange: (P) => C(P) }, u), e.createElement("div", { className: "lk-button-group-menu" }, e.createElement(U, { initialSelection: A, kind: "audioinput", disabled: !j, tracks: { audioinput: j }, onActiveDeviceChange: (P, W) => z(W) }))), e.createElement("div", { className: "lk-button-group video" }, e.createElement(Z, { initialState: k, source: b.Track.Source.Camera, onChange: (P) => T(P) }, l), e.createElement("div", { className: "lk-button-group-menu" }, e.createElement(U, { initialSelection: I, kind: "videoinput", disabled: !N, tracks: { videoinput: N }, onActiveDeviceChange: (P, W) => L(W) })))), e.createElement("form", { className: "lk-username-container" }, e.createElement("input", { className: "lk-form-control", id: "username", name: "username", type: "text", defaultValue: F, placeholder: i, onChange: (P) => O(P.target.value), autoComplete: "off" }), e.createElement("button", { className: "lk-button lk-join-button", type: "submit", onClick: H, disabled: !ee }, o)), c && e.createElement(e.Fragment, null, e.createElement("strong", null, "User Choices:"), e.createElement("ul", { className: "lk-list", style: { overflow: "hidden", maxWidth: "15rem" } }, e.createElement("li", null, "Username: ", `${E.username}`), e.createElement("li", null, "Video Enabled: ", `${E.videoEnabled}`), e.createElement("li", null, "Audio Enabled: ", `${E.audioEnabled}`), e.createElement("li", null, "Video Device: ", `${E.videoDeviceId}`), e.createElement("li", null, "Audio Device: ", `${E.audioDeviceId}`))));
      }
      function Tt({ props: t }) {
        const { dispatch: a, state: n } = g.useLayoutContext().widget, r = "lk-button lk-settings-toggle";
        return { mergedProps: e.useMemo(() => g.mergeProps(t, { className: r, onClick: () => {
          a && a({ msg: "toggle_settings" });
        }, "aria-pressed": n != null && n.showSettings ? "true" : "false" }), [t, r, a, n]) };
      }
      var Rt = e.forwardRef(function(a, n) {
        const { mergedProps: r } = Tt({ props: a });
        return e.createElement("button", { ref: n, ...r }, a.children);
      });
      function pe({ variation: t, controls: a, saveUserChoices: n = true, onDeviceError: r, ...c }) {
        var z;
        const [o, u] = e.useState(false), l = g.useMaybeLayoutContext();
        e.useEffect(() => {
          var I, L;
          ((I = l == null ? void 0 : l.widget.state) == null ? void 0 : I.showChat) !== void 0 && u((L = l == null ? void 0 : l.widget.state) == null ? void 0 : L.showChat);
        }, [(z = l == null ? void 0 : l.widget.state) == null ? void 0 : z.showChat]);
        const v = lt(`(max-width: ${o ? 1e3 : 760}px)`) ? "minimal" : "verbose";
        t ?? (t = v);
        const s = { leave: true, ...a }, p = g.useLocalParticipantPermissions();
        p ? (s.camera ?? (s.camera = p.canPublish), s.microphone ?? (s.microphone = p.canPublish), s.screenShare ?? (s.screenShare = p.canPublish), s.chat ?? (s.chat = p.canPublishData && (a == null ? void 0 : a.chat))) : (s.camera = false, s.chat = false, s.microphone = false, s.screenShare = false);
        const d = e.useMemo(() => t === "minimal" || t === "verbose", [t]), w = e.useMemo(() => t === "textOnly" || t === "verbose", [t]), h = S.supportsScreenSharing(), [m, f] = e.useState(false), M = e.useCallback((I) => {
          f(I);
        }, [f]), E = g.mergeProps$1({ className: "lk-control-bar" }, c), { saveAudioInputEnabled: R, saveVideoInputEnabled: y, saveAudioInputDeviceId: C, saveVideoInputDeviceId: k } = g.usePersistentUserChoices({ preventSave: !n }), T = e.useCallback((I, L) => L ? R(I) : null, [R]), A = e.useCallback((I, L) => L ? y(I) : null, [y]);
        return e.createElement("div", { ...E }, s.microphone && e.createElement("div", { className: "lk-button-group" }, e.createElement(Z, { source: b.Track.Source.Microphone, showIcon: d, onChange: T, onDeviceError: (I) => r == null ? void 0 : r({ source: b.Track.Source.Microphone, error: I }) }, w && "Microphone"), e.createElement("div", { className: "lk-button-group-menu" }, e.createElement(U, { kind: "audioinput", onActiveDeviceChange: (I, L) => C(L ?? "default") }))), s.camera && e.createElement("div", { className: "lk-button-group" }, e.createElement(Z, { source: b.Track.Source.Camera, showIcon: d, onChange: A, onDeviceError: (I) => r == null ? void 0 : r({ source: b.Track.Source.Camera, error: I }) }, w && "Camera"), e.createElement("div", { className: "lk-button-group-menu" }, e.createElement(U, { kind: "videoinput", onActiveDeviceChange: (I, L) => k(L ?? "default") }))), s.screenShare && h && e.createElement(Z, { source: b.Track.Source.ScreenShare, captureOptions: { audio: true, selfBrowserSurface: "include" }, showIcon: d, onChange: M, onDeviceError: (I) => r == null ? void 0 : r({ source: b.Track.Source.ScreenShare, error: I }) }, w && (m ? "Stop screen share" : "Share screen")), s.chat && e.createElement(le, null, d && e.createElement(Ie, null), w && "Chat"), s.settings && e.createElement(Rt, null, d && e.createElement(Ne, null), w && "Settings"), s.leave && e.createElement(ie, null, d && e.createElement(Ae, null), w && "Leave"), e.createElement(oe, null));
      }
      function It({ chatMessageFormatter: t, chatMessageDecoder: a, chatMessageEncoder: n, SettingsComponent: r, ...c }) {
        var h, m;
        const [o, u] = e.useState({ showChat: false, unreadMessages: 0, showSettings: false }), l = e.useRef(null), i = g.useTracks([{ source: b.Track.Source.Camera, withPlaceholder: true }, { source: b.Track.Source.ScreenShare, withPlaceholder: false }], { updateOnlyOn: [b.RoomEvent.ActiveSpeakersChanged], onlySubscribed: false }), v = (f) => {
          S.log.debug("updating widget state", f), u(f);
        }, s = g.useCreateLayoutContext(), p = i.filter(S.isTrackReference).filter((f) => f.publication.source === b.Track.Source.ScreenShare), d = (h = g.usePinnedTracks(s)) == null ? void 0 : h[0], w = i.filter((f) => !S.isEqualTrackRef(f, d));
        return e.useEffect(() => {
          var f, M, E, R, y, C;
          if (p.some((k) => k.publication.isSubscribed) && l.current === null ? (S.log.debug("Auto set screen share focus:", { newScreenShareTrack: p[0] }), (M = (f = s.pin).dispatch) == null || M.call(f, { msg: "set_pin", trackReference: p[0] }), l.current = p[0]) : l.current && !p.some((k) => {
            var T, A;
            return k.publication.trackSid === ((A = (T = l.current) == null ? void 0 : T.publication) == null ? void 0 : A.trackSid);
          }) && (S.log.debug("Auto clearing screen share focus."), (R = (E = s.pin).dispatch) == null || R.call(E, { msg: "clear_pin" }), l.current = null), d && !S.isTrackReference(d)) {
            const k = i.find((T) => T.participant.identity === d.participant.identity && T.source === d.source);
            k !== d && S.isTrackReference(k) && ((C = (y = s.pin).dispatch) == null || C.call(y, { msg: "set_pin", trackReference: k }));
          }
        }, [p.map((f) => `${f.publication.trackSid}_${f.publication.isSubscribed}`).join(), (m = d == null ? void 0 : d.publication) == null ? void 0 : m.trackSid, i]), ve(), e.createElement("div", { className: "lk-video-conference", ...c }, S.isWeb() && e.createElement(fe, { value: s, onWidgetChange: v }, e.createElement("div", { className: "lk-video-conference-inner" }, d ? e.createElement("div", { className: "lk-focus-layout-wrapper" }, e.createElement(We, null, e.createElement(Je, { tracks: w }, e.createElement(J, null)), d && e.createElement(Qe, { trackRef: d }))) : e.createElement("div", { className: "lk-grid-layout-wrapper" }, e.createElement(Ge, { tracks: i }, e.createElement(J, null))), e.createElement(pe, { controls: { chat: true, settings: !!r } })), e.createElement(ge, { style: { display: o.showChat ? "grid" : "none" }, messageFormatter: t, messageEncoder: n, messageDecoder: a }), r && e.createElement("div", { className: "lk-settings-menu-modal", style: { display: o.showSettings ? "block" : "none" } }, e.createElement(r, null))), e.createElement(Xe, null), e.createElement(tt, null));
      }
      function Pt({ ...t }) {
        const [a, n] = e.useState({ showChat: false, unreadMessages: 0 }), r = g.useTracks([b.Track.Source.Microphone]);
        return ve(), e.createElement(fe, { onWidgetChange: n }, e.createElement("div", { className: "lk-audio-conference", ...t }, e.createElement("div", { className: "lk-audio-conference-stage" }, e.createElement(Y, { tracks: r }, e.createElement(et, null))), e.createElement(pe, { controls: { microphone: true, screenShare: false, camera: false, chat: true } }), a.showChat && e.createElement(ge, null)));
      }
      function Nt({ controls: t, saveUserChoices: a = true, onDeviceError: n, ...r }) {
        const c = { leave: true, microphone: true, ...t }, o = g.useLocalParticipantPermissions(), { microphoneTrack: u, localParticipant: l } = S.useLocalParticipant(), i = e.useMemo(() => ({ participant: l, source: b.Track.Source.Microphone, publication: u }), [l, u]);
        o ? c.microphone ?? (c.microphone = o.canPublish) : c.microphone = false;
        const v = g.mergeProps$1({ className: "lk-agent-control-bar" }, r), { saveAudioInputEnabled: s, saveAudioInputDeviceId: p } = g.usePersistentUserChoices({ preventSave: !a }), d = e.useCallback((w, h) => {
          h && s(w);
        }, [s]);
        return e.createElement("div", { ...v }, c.microphone && e.createElement("div", { className: "lk-button-group" }, e.createElement(Z, { source: b.Track.Source.Microphone, showIcon: true, onChange: d, onDeviceError: (w) => n == null ? void 0 : n({ source: b.Track.Source.Microphone, error: w }) }, e.createElement(he, { trackRef: i, barCount: 7, options: { minHeight: 5 } })), e.createElement("div", { className: "lk-button-group-menu" }, e.createElement(U, { kind: "audioinput", onActiveDeviceChange: (w, h) => p(h ?? "default") }))), c.leave && e.createElement(ie, null, "Disconnect"), e.createElement(oe, null));
      }
      exports.AudioConference = Pt;
      exports.AudioTrack = X;
      exports.BarVisualizer = he;
      exports.CarouselLayout = Je;
      exports.Chat = ge;
      exports.ChatEntry = nt;
      exports.ChatToggle = le;
      exports.ConnectionQualityIndicator = ue;
      exports.ConnectionStateToast = tt;
      exports.ControlBar = pe;
      exports.DisconnectButton = ie;
      exports.FocusLayout = Qe;
      exports.FocusLayoutContainer = We;
      exports.FocusToggle = _e;
      exports.GridLayout = Ge;
      exports.LKFeatureContext = Ce;
      exports.LayoutContextProvider = fe;
      exports.MediaDeviceMenu = U;
      exports.MediaDeviceSelect = G;
      exports.ParticipantAudioTile = et;
      exports.ParticipantContextIfNeeded = Ue;
      exports.ParticipantName = K;
      exports.ParticipantTile = J;
      exports.PreJoin = yt;
      exports.RoomAudioRenderer = Xe;
      exports.StartMediaButton = oe;
      exports.SvgCameraDisabledIcon = ye;
      exports.SvgCameraIcon = Te;
      exports.SvgChatCloseIcon = Re;
      exports.SvgChatIcon = Ie;
      exports.SvgChevron = re;
      exports.SvgFocusToggleIcon = Pe;
      exports.SvgGearIcon = Ne;
      exports.SvgLeaveIcon = Ae;
      exports.SvgLockLockedIcon = Le;
      exports.SvgMicDisabledIcon = xe;
      exports.SvgMicIcon = Ve;
      exports.SvgParticipantPlaceholder = me;
      exports.SvgQualityExcellentIcon = Fe;
      exports.SvgQualityGoodIcon = De;
      exports.SvgQualityPoorIcon = ze;
      exports.SvgQualityUnknownIcon = Oe;
      exports.SvgScreenShareIcon = se;
      exports.SvgScreenShareStopIcon = $e;
      exports.SvgSpinnerIcon = ce;
      exports.SvgUnfocusToggleIcon = Ze;
      exports.Toast = Ye;
      exports.TrackLoop = Y;
      exports.TrackMutedIndicator = de;
      exports.TrackRefContextIfNeeded = qe;
      exports.TrackToggle = Z;
      exports.VideoConference = It;
      exports.VideoTrack = He;
      exports.VoiceAssistantControlBar = Nt;
      exports.formatChatMessageLinks = Ct;
      exports.useFeatureContext = Me;
      exports.usePreviewDevice = Mt;
      exports.usePreviewTracks = at;
    }
  });

  // node_modules/@livekit/components-react/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@livekit/components-react/dist/index.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var o = require_shared_D4SeICAo();
      var t = require_shared_BPm3y_nD();
      var u = require_shared_ChNXN17z();
      var e = require_shared_B22QYter();
      var m = require_react();
      function p(s) {
        const a = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
        if (s) {
          for (const n in s) if (n !== "default") {
            const r = Object.getOwnPropertyDescriptor(s, n);
            Object.defineProperty(a, n, r.get ? r : { enumerable: true, get: () => s[n] });
          }
        }
        return a.default = s, Object.freeze(a);
      }
      var i = p(m);
      var T = i.forwardRef(function(a, n) {
        const { buttonProps: r } = o.useClearPinButton(a);
        return i.createElement("button", { ref: n, ...r }, a.children);
      });
      var S = i.forwardRef(function({ room: a, ...n }, r) {
        const c = t.useConnectionState(a);
        return i.createElement("div", { ref: r, ...n }, c);
      });
      var v = i.forwardRef(function({ label: a = "Allow Audio", ...n }, r) {
        const c = u.useRoomContext(), { mergedProps: l } = t.useStartAudio({ room: c, props: n });
        return i.createElement("button", { ref: r, ...l }, a);
      });
      var f = i.forwardRef(function(a, n) {
        const { room: r, htmlProps: c } = o.useLiveKitRoom(a);
        return i.createElement("div", { ref: n, ...c }, r && i.createElement(u.RoomContext.Provider, { value: r }, i.createElement(e.LKFeatureContext.Provider, { value: a.featureFlags }, a.children)));
      });
      var k = i.forwardRef(function({ trackRef: a, ...n }, r) {
        const g = t.useEnsureTrackRef(a), P = t.useMultibandTrackVolume(g, { bands: 7, loPass: 300 });
        return i.createElement("svg", { ref: r, width: "100%", height: "100%", viewBox: "0 0 200 90", ...n, className: "lk-audio-visualizer" }, i.createElement("rect", { x: "0", y: "0", width: "100%", height: "100%" }), i.createElement("g", { style: { transform: `translate(${(200 - 7 * 10) / 2}px, 0)` } }, P.map((d, C) => i.createElement("rect", { key: C, x: C * 10, y: 90 / 2 - d * 50 / 2, width: 6, height: d * 50 }))));
      });
      function y({ participants: s, ...a }) {
        return i.createElement(i.Fragment, null, s.map((n) => i.createElement(t.ParticipantContext.Provider, { value: n, key: n.identity }, t.cloneSingleChild(a.children))));
      }
      var I = i.forwardRef(function({ childrenPosition: a = "before", children: n, ...r }, c) {
        const { name: l } = o.useRoomInfo();
        return i.createElement("span", { ref: c, ...r }, a === "before" && n, l, a === "after" && n);
      });
      exports.useAudioPlayback = o.useAudioPlayback;
      exports.useClearPinButton = o.useClearPinButton;
      exports.useDataChannel = o.useDataChannel;
      exports.useIsRecording = o.useIsRecording;
      exports.useLiveKitRoom = o.useLiveKitRoom;
      exports.useParticipantAttribute = o.useParticipantAttribute;
      exports.useParticipantAttributes = o.useParticipantAttributes;
      exports.useParticipantInfo = o.useParticipantInfo;
      exports.useParticipantPermissions = o.useParticipantPermissions;
      exports.useParticipantTracks = o.useParticipantTracks;
      exports.useParticipants = o.useParticipants;
      exports.useRemoteParticipant = o.useRemoteParticipant;
      exports.useRemoteParticipants = o.useRemoteParticipants;
      exports.useRoomInfo = o.useRoomInfo;
      exports.useSortedParticipants = o.useSortedParticipants;
      exports.useSpeakingParticipants = o.useSpeakingParticipants;
      exports.useTextStream = o.useTextStream;
      exports.useToken = o.useToken;
      exports.useTrackByName = o.useTrackByName;
      exports.useTrackTranscription = o.useTrackTranscription;
      exports.useVoiceAssistant = o.useVoiceAssistant;
      exports.LayoutContext = t.LayoutContext;
      exports.ParticipantContext = t.ParticipantContext;
      exports.TrackRefContext = t.TrackRefContext;
      exports.useAudioWaveform = t.useAudioWaveform;
      exports.useChat = t.useChat;
      exports.useChatToggle = t.useChatToggle;
      exports.useConnectionQualityIndicator = t.useConnectionQualityIndicator;
      exports.useConnectionState = t.useConnectionState;
      exports.useCreateLayoutContext = t.useCreateLayoutContext;
      exports.useDisconnectButton = t.useDisconnectButton;
      exports.useEnsureCreateLayoutContext = t.useEnsureCreateLayoutContext;
      exports.useEnsureLayoutContext = t.useEnsureLayoutContext;
      exports.useEnsureParticipant = t.useEnsureParticipant;
      exports.useEnsureTrackRef = t.useEnsureTrackRef;
      exports.useFacingMode = t.useFacingMode;
      exports.useFocusToggle = t.useFocusToggle;
      exports.useGridLayout = t.useGridLayout;
      exports.useIsEncrypted = t.useIsEncrypted;
      exports.useIsMuted = t.useIsMuted;
      exports.useIsSpeaking = t.useIsSpeaking;
      exports.useLayoutContext = t.useLayoutContext;
      exports.useLocalParticipantPermissions = t.useLocalParticipantPermissions;
      exports.useMaybeLayoutContext = t.useMaybeLayoutContext;
      exports.useMaybeParticipantContext = t.useMaybeParticipantContext;
      exports.useMaybeTrackRefContext = t.useMaybeTrackRefContext;
      exports.useMediaDeviceSelect = t.useMediaDeviceSelect;
      exports.useMediaDevices = t.useMediaDevices;
      exports.useMultibandTrackVolume = t.useMultibandTrackVolume;
      exports.usePagination = t.usePagination;
      exports.useParticipantContext = t.useParticipantContext;
      exports.useParticipantTile = t.useParticipantTile;
      exports.usePersistentUserChoices = t.usePersistentUserChoices;
      exports.usePinnedTracks = t.usePinnedTracks;
      exports.useStartAudio = t.useStartAudio;
      exports.useStartVideo = t.useStartVideo;
      exports.useSwipe = t.useSwipe;
      exports.useTrackMutedIndicator = t.useTrackMutedIndicator;
      exports.useTrackRefContext = t.useTrackRefContext;
      exports.useTrackToggle = t.useTrackToggle;
      exports.useTrackVolume = t.useTrackVolume;
      exports.useTracks = t.useTracks;
      exports.useVisualStableUpdate = t.useVisualStableUpdate;
      exports.RoomContext = u.RoomContext;
      exports.isTrackReference = u.isTrackReference;
      exports.setLogExtension = u.setLogExtension;
      exports.setLogLevel = u.setLogLevel;
      exports.useEnsureRoom = u.useEnsureRoom;
      exports.useLocalParticipant = u.useLocalParticipant;
      exports.useMaybeRoomContext = u.useMaybeRoomContext;
      exports.useRoomContext = u.useRoomContext;
      exports.AudioConference = e.AudioConference;
      exports.AudioTrack = e.AudioTrack;
      exports.BarVisualizer = e.BarVisualizer;
      exports.CameraDisabledIcon = e.SvgCameraDisabledIcon;
      exports.CameraIcon = e.SvgCameraIcon;
      exports.CarouselLayout = e.CarouselLayout;
      exports.Chat = e.Chat;
      exports.ChatCloseIcon = e.SvgChatCloseIcon;
      exports.ChatEntry = e.ChatEntry;
      exports.ChatIcon = e.SvgChatIcon;
      exports.ChatToggle = e.ChatToggle;
      exports.Chevron = e.SvgChevron;
      exports.ConnectionQualityIndicator = e.ConnectionQualityIndicator;
      exports.ConnectionStateToast = e.ConnectionStateToast;
      exports.ControlBar = e.ControlBar;
      exports.DisconnectButton = e.DisconnectButton;
      exports.FocusLayout = e.FocusLayout;
      exports.FocusLayoutContainer = e.FocusLayoutContainer;
      exports.FocusToggle = e.FocusToggle;
      exports.FocusToggleIcon = e.SvgFocusToggleIcon;
      exports.GearIcon = e.SvgGearIcon;
      exports.GridLayout = e.GridLayout;
      exports.LKFeatureContext = e.LKFeatureContext;
      exports.LayoutContextProvider = e.LayoutContextProvider;
      exports.LeaveIcon = e.SvgLeaveIcon;
      exports.LockLockedIcon = e.SvgLockLockedIcon;
      exports.MediaDeviceMenu = e.MediaDeviceMenu;
      exports.MediaDeviceSelect = e.MediaDeviceSelect;
      exports.MicDisabledIcon = e.SvgMicDisabledIcon;
      exports.MicIcon = e.SvgMicIcon;
      exports.ParticipantAudioTile = e.ParticipantAudioTile;
      exports.ParticipantContextIfNeeded = e.ParticipantContextIfNeeded;
      exports.ParticipantName = e.ParticipantName;
      exports.ParticipantPlaceholder = e.SvgParticipantPlaceholder;
      exports.ParticipantTile = e.ParticipantTile;
      exports.PreJoin = e.PreJoin;
      exports.QualityExcellentIcon = e.SvgQualityExcellentIcon;
      exports.QualityGoodIcon = e.SvgQualityGoodIcon;
      exports.QualityPoorIcon = e.SvgQualityPoorIcon;
      exports.QualityUnknownIcon = e.SvgQualityUnknownIcon;
      exports.RoomAudioRenderer = e.RoomAudioRenderer;
      exports.ScreenShareIcon = e.SvgScreenShareIcon;
      exports.ScreenShareStopIcon = e.SvgScreenShareStopIcon;
      exports.SpinnerIcon = e.SvgSpinnerIcon;
      exports.StartMediaButton = e.StartMediaButton;
      exports.Toast = e.Toast;
      exports.TrackLoop = e.TrackLoop;
      exports.TrackMutedIndicator = e.TrackMutedIndicator;
      exports.TrackRefContextIfNeeded = e.TrackRefContextIfNeeded;
      exports.TrackToggle = e.TrackToggle;
      exports.UnfocusToggleIcon = e.SvgUnfocusToggleIcon;
      exports.VideoConference = e.VideoConference;
      exports.VideoTrack = e.VideoTrack;
      exports.VoiceAssistantControlBar = e.VoiceAssistantControlBar;
      exports.formatChatMessageLinks = e.formatChatMessageLinks;
      exports.useFeatureContext = e.useFeatureContext;
      exports.usePreviewDevice = e.usePreviewDevice;
      exports.usePreviewTracks = e.usePreviewTracks;
      exports.AudioVisualizer = k;
      exports.ClearPinButton = T;
      exports.ConnectionState = S;
      exports.LiveKitRoom = f;
      exports.ParticipantLoop = y;
      exports.RoomName = I;
      exports.StartAudio = v;
    }
  });

  // dist/components/LiveKitRoom.js
  var require_LiveKitRoom = __commonJS({
    "dist/components/LiveKitRoom.js"(exports) {
      "use strict";
      init_react_shim();
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = LiveKitRoom;
      var React2 = __importStar(require_react());
      var components_react_1 = require_dist();
      var livekit_client_1 = require_livekit_client_umd();
      function LiveKitRoom({ room, sendDataToMain, terminateElectron }) {
        const onConnectButtonClicked = React2.useCallback(async () => {
          try {
            console.log("Connecting to LiveKit room with:", { room });
            console.log("Attempting connection to:", room.name);
            console.log("Connected to room successfully");
            console.log("Enabling microphone...");
            await room.localParticipant.setMicrophoneEnabled(true);
            console.log("Microphone enabled successfully");
          } catch (error) {
            console.error("Failed to connect to LiveKit room:", error);
          }
        }, [room]);
        React2.useEffect(() => {
          const onError = (error) => {
            console.error("Media device error:", error);
          };
          const onConnected = () => {
            console.log("Room connected event fired");
          };
          const onDisconnected = () => {
            console.log("Room disconnected event fired");
          };
          const onParticipantLeft = async (participantLeft) => {
            if (participantLeft.identity.includes("voice_assistant_room_") || participantLeft.identity.includes("voice_assistant_user_") || room.remoteParticipants.size === 1 && room.remoteParticipants.has(room.localParticipant.identity) || room.remoteParticipants.size === 0) {
              console.log("No participants remain, initiating app closure");
              try {
                sendDataToMain({
                  type: "stop-audio-recording",
                  reason: "no-participants-remain"
                });
                await room.disconnect();
                await window.postMessage({
                  type: "VoiceAssistantStopRecording"
                });
                sendDataToMain({
                  type: "exit-app",
                  reason: "no-participants-remain"
                });
                if (terminateElectron) {
                  console.log("Using terminateElectron for reliable app closure");
                  terminateElectron();
                } else {
                  console.log("Falling back to window.close()");
                  window.close();
                }
              } catch (error) {
                console.error("Error during app closure:", error);
                if (terminateElectron) {
                  terminateElectron();
                }
              }
            }
          };
          room.on(livekit_client_1.RoomEvent.MediaDevicesError, onError);
          room.on(livekit_client_1.RoomEvent.Connected, onConnected);
          room.on(livekit_client_1.RoomEvent.Disconnected, onDisconnected);
          room.on(livekit_client_1.RoomEvent.ParticipantDisconnected, onParticipantLeft);
          return () => {
            room.off(livekit_client_1.RoomEvent.MediaDevicesError, onError);
            room.off(livekit_client_1.RoomEvent.Connected, onConnected);
            room.off(livekit_client_1.RoomEvent.Disconnected, onDisconnected);
            room.off(livekit_client_1.RoomEvent.ParticipantDisconnected, onParticipantLeft);
          };
        }, [room]);
        React2.useEffect(() => {
          onConnectButtonClicked();
        }, [onConnectButtonClicked]);
        React2.useEffect(() => {
          console.log("[LiveKitRoom] Component mounted");
          return () => {
            console.log("[LiveKitRoom] Component unmounted");
          };
        }, []);
        const [isConnected, setIsConnected] = React2.useState(false);
        React2.useEffect(() => {
          const onConnected = () => {
            console.log("[LiveKitRoom] Room connected");
            setIsConnected(true);
          };
          room.on(livekit_client_1.RoomEvent.Connected, onConnected);
          return () => {
            room.off(livekit_client_1.RoomEvent.Connected, onConnected);
          };
        }, [room]);
        return React2.createElement(
          "main",
          { "data-lk-theme": "default", style: { height: "100%", width: "100%" } },
          React2.createElement(
            components_react_1.RoomContext.Provider,
            { value: room },
            React2.createElement(
              "div",
              { className: "lk-room-container", style: { visibility: "visible", opacity: 1 } },
              React2.createElement(
                React2.Fragment,
                null,
                React2.createElement(components_react_1.RoomAudioRenderer, null),
                React2.createElement("div", null, "Audio Room Active")
              )
            )
          )
        );
      }
    }
  });

  // node_modules/engine.io-parser/build/cjs/commons.js
  var require_commons = __commonJS({
    "node_modules/engine.io-parser/build/cjs/commons.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ERROR_PACKET = exports.PACKET_TYPES_REVERSE = exports.PACKET_TYPES = void 0;
      var PACKET_TYPES = /* @__PURE__ */ Object.create(null);
      exports.PACKET_TYPES = PACKET_TYPES;
      PACKET_TYPES["open"] = "0";
      PACKET_TYPES["close"] = "1";
      PACKET_TYPES["ping"] = "2";
      PACKET_TYPES["pong"] = "3";
      PACKET_TYPES["message"] = "4";
      PACKET_TYPES["upgrade"] = "5";
      PACKET_TYPES["noop"] = "6";
      var PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
      exports.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;
      Object.keys(PACKET_TYPES).forEach((key) => {
        PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
      });
      var ERROR_PACKET = { type: "error", data: "parser error" };
      exports.ERROR_PACKET = ERROR_PACKET;
    }
  });

  // node_modules/engine.io-parser/build/cjs/encodePacket.browser.js
  var require_encodePacket_browser = __commonJS({
    "node_modules/engine.io-parser/build/cjs/encodePacket.browser.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encodePacket = void 0;
      exports.encodePacketToBinary = encodePacketToBinary;
      var commons_js_1 = require_commons();
      var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
      var withNativeArrayBuffer = typeof ArrayBuffer === "function";
      var isView = (obj) => {
        return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
      };
      var encodePacket = ({ type, data }, supportsBinary, callback) => {
        if (withNativeBlob && data instanceof Blob) {
          if (supportsBinary) {
            return callback(data);
          } else {
            return encodeBlobAsBase64(data, callback);
          }
        } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
          if (supportsBinary) {
            return callback(data);
          } else {
            return encodeBlobAsBase64(new Blob([data]), callback);
          }
        }
        return callback(commons_js_1.PACKET_TYPES[type] + (data || ""));
      };
      exports.encodePacket = encodePacket;
      var encodeBlobAsBase64 = (data, callback) => {
        const fileReader = new FileReader();
        fileReader.onload = function() {
          const content = fileReader.result.split(",")[1];
          callback("b" + (content || ""));
        };
        return fileReader.readAsDataURL(data);
      };
      function toArray(data) {
        if (data instanceof Uint8Array) {
          return data;
        } else if (data instanceof ArrayBuffer) {
          return new Uint8Array(data);
        } else {
          return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
        }
      }
      var TEXT_ENCODER;
      function encodePacketToBinary(packet, callback) {
        if (withNativeBlob && packet.data instanceof Blob) {
          return packet.data.arrayBuffer().then(toArray).then(callback);
        } else if (withNativeArrayBuffer && (packet.data instanceof ArrayBuffer || isView(packet.data))) {
          return callback(toArray(packet.data));
        }
        encodePacket(packet, false, (encoded) => {
          if (!TEXT_ENCODER) {
            TEXT_ENCODER = new TextEncoder();
          }
          callback(TEXT_ENCODER.encode(encoded));
        });
      }
    }
  });

  // node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js
  var require_base64_arraybuffer = __commonJS({
    "node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decode = exports.encode = void 0;
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
      for (let i = 0; i < chars.length; i++) {
        lookup[chars.charCodeAt(i)] = i;
      }
      var encode = (arraybuffer) => {
        let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = "";
        for (i = 0; i < len; i += 3) {
          base64 += chars[bytes[i] >> 2];
          base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
          base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
          base64 += chars[bytes[i + 2] & 63];
        }
        if (len % 3 === 2) {
          base64 = base64.substring(0, base64.length - 1) + "=";
        } else if (len % 3 === 1) {
          base64 = base64.substring(0, base64.length - 2) + "==";
        }
        return base64;
      };
      exports.encode = encode;
      var decode = (base64) => {
        let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
        if (base64[base64.length - 1] === "=") {
          bufferLength--;
          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }
        const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
        for (i = 0; i < len; i += 4) {
          encoded1 = lookup[base64.charCodeAt(i)];
          encoded2 = lookup[base64.charCodeAt(i + 1)];
          encoded3 = lookup[base64.charCodeAt(i + 2)];
          encoded4 = lookup[base64.charCodeAt(i + 3)];
          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
        }
        return arraybuffer;
      };
      exports.decode = decode;
    }
  });

  // node_modules/engine.io-parser/build/cjs/decodePacket.browser.js
  var require_decodePacket_browser = __commonJS({
    "node_modules/engine.io-parser/build/cjs/decodePacket.browser.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodePacket = void 0;
      var commons_js_1 = require_commons();
      var base64_arraybuffer_js_1 = require_base64_arraybuffer();
      var withNativeArrayBuffer = typeof ArrayBuffer === "function";
      var decodePacket = (encodedPacket, binaryType) => {
        if (typeof encodedPacket !== "string") {
          return {
            type: "message",
            data: mapBinary(encodedPacket, binaryType)
          };
        }
        const type = encodedPacket.charAt(0);
        if (type === "b") {
          return {
            type: "message",
            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
          };
        }
        const packetType = commons_js_1.PACKET_TYPES_REVERSE[type];
        if (!packetType) {
          return commons_js_1.ERROR_PACKET;
        }
        return encodedPacket.length > 1 ? {
          type: commons_js_1.PACKET_TYPES_REVERSE[type],
          data: encodedPacket.substring(1)
        } : {
          type: commons_js_1.PACKET_TYPES_REVERSE[type]
        };
      };
      exports.decodePacket = decodePacket;
      var decodeBase64Packet = (data, binaryType) => {
        if (withNativeArrayBuffer) {
          const decoded = (0, base64_arraybuffer_js_1.decode)(data);
          return mapBinary(decoded, binaryType);
        } else {
          return { base64: true, data };
        }
      };
      var mapBinary = (data, binaryType) => {
        switch (binaryType) {
          case "blob":
            if (data instanceof Blob) {
              return data;
            } else {
              return new Blob([data]);
            }
          case "arraybuffer":
          default:
            if (data instanceof ArrayBuffer) {
              return data;
            } else {
              return data.buffer;
            }
        }
      };
    }
  });

  // node_modules/engine.io-parser/build/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/engine.io-parser/build/cjs/index.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;
      exports.createPacketEncoderStream = createPacketEncoderStream;
      exports.createPacketDecoderStream = createPacketDecoderStream;
      var encodePacket_js_1 = require_encodePacket_browser();
      Object.defineProperty(exports, "encodePacket", { enumerable: true, get: function() {
        return encodePacket_js_1.encodePacket;
      } });
      var decodePacket_js_1 = require_decodePacket_browser();
      Object.defineProperty(exports, "decodePacket", { enumerable: true, get: function() {
        return decodePacket_js_1.decodePacket;
      } });
      var commons_js_1 = require_commons();
      var SEPARATOR = String.fromCharCode(30);
      var encodePayload = (packets, callback) => {
        const length = packets.length;
        const encodedPackets = new Array(length);
        let count = 0;
        packets.forEach((packet, i) => {
          (0, encodePacket_js_1.encodePacket)(packet, false, (encodedPacket) => {
            encodedPackets[i] = encodedPacket;
            if (++count === length) {
              callback(encodedPackets.join(SEPARATOR));
            }
          });
        });
      };
      exports.encodePayload = encodePayload;
      var decodePayload = (encodedPayload, binaryType) => {
        const encodedPackets = encodedPayload.split(SEPARATOR);
        const packets = [];
        for (let i = 0; i < encodedPackets.length; i++) {
          const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);
          packets.push(decodedPacket);
          if (decodedPacket.type === "error") {
            break;
          }
        }
        return packets;
      };
      exports.decodePayload = decodePayload;
      function createPacketEncoderStream() {
        return new TransformStream({
          transform(packet, controller) {
            (0, encodePacket_js_1.encodePacketToBinary)(packet, (encodedPacket) => {
              const payloadLength = encodedPacket.length;
              let header;
              if (payloadLength < 126) {
                header = new Uint8Array(1);
                new DataView(header.buffer).setUint8(0, payloadLength);
              } else if (payloadLength < 65536) {
                header = new Uint8Array(3);
                const view = new DataView(header.buffer);
                view.setUint8(0, 126);
                view.setUint16(1, payloadLength);
              } else {
                header = new Uint8Array(9);
                const view = new DataView(header.buffer);
                view.setUint8(0, 127);
                view.setBigUint64(1, BigInt(payloadLength));
              }
              if (packet.data && typeof packet.data !== "string") {
                header[0] |= 128;
              }
              controller.enqueue(header);
              controller.enqueue(encodedPacket);
            });
          }
        });
      }
      var TEXT_DECODER;
      function totalLength(chunks) {
        return chunks.reduce((acc, chunk) => acc + chunk.length, 0);
      }
      function concatChunks(chunks, size) {
        if (chunks[0].length === size) {
          return chunks.shift();
        }
        const buffer = new Uint8Array(size);
        let j = 0;
        for (let i = 0; i < size; i++) {
          buffer[i] = chunks[0][j++];
          if (j === chunks[0].length) {
            chunks.shift();
            j = 0;
          }
        }
        if (chunks.length && j < chunks[0].length) {
          chunks[0] = chunks[0].slice(j);
        }
        return buffer;
      }
      function createPacketDecoderStream(maxPayload, binaryType) {
        if (!TEXT_DECODER) {
          TEXT_DECODER = new TextDecoder();
        }
        const chunks = [];
        let state = 0;
        let expectedLength = -1;
        let isBinary = false;
        return new TransformStream({
          transform(chunk, controller) {
            chunks.push(chunk);
            while (true) {
              if (state === 0) {
                if (totalLength(chunks) < 1) {
                  break;
                }
                const header = concatChunks(chunks, 1);
                isBinary = (header[0] & 128) === 128;
                expectedLength = header[0] & 127;
                if (expectedLength < 126) {
                  state = 3;
                } else if (expectedLength === 126) {
                  state = 1;
                } else {
                  state = 2;
                }
              } else if (state === 1) {
                if (totalLength(chunks) < 2) {
                  break;
                }
                const headerArray = concatChunks(chunks, 2);
                expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);
                state = 3;
              } else if (state === 2) {
                if (totalLength(chunks) < 8) {
                  break;
                }
                const headerArray = concatChunks(chunks, 8);
                const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);
                const n = view.getUint32(0);
                if (n > Math.pow(2, 53 - 32) - 1) {
                  controller.enqueue(commons_js_1.ERROR_PACKET);
                  break;
                }
                expectedLength = n * Math.pow(2, 32) + view.getUint32(4);
                state = 3;
              } else {
                if (totalLength(chunks) < expectedLength) {
                  break;
                }
                const data = concatChunks(chunks, expectedLength);
                controller.enqueue((0, decodePacket_js_1.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));
                state = 0;
              }
              if (expectedLength === 0 || expectedLength > maxPayload) {
                controller.enqueue(commons_js_1.ERROR_PACKET);
                break;
              }
            }
          }
        });
      }
      exports.protocol = 4;
    }
  });

  // node_modules/@socket.io/component-emitter/lib/cjs/index.js
  var require_cjs2 = __commonJS({
    "node_modules/@socket.io/component-emitter/lib/cjs/index.js"(exports) {
      init_react_shim();
      exports.Emitter = Emitter;
      function Emitter(obj) {
        if (obj) return mixin(obj);
      }
      function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }
        return obj;
      }
      Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
        this._callbacks = this._callbacks || {};
        (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
        return this;
      };
      Emitter.prototype.once = function(event, fn) {
        function on() {
          this.off(event, on);
          fn.apply(this, arguments);
        }
        on.fn = fn;
        this.on(event, on);
        return this;
      };
      Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
        this._callbacks = this._callbacks || {};
        if (0 == arguments.length) {
          this._callbacks = {};
          return this;
        }
        var callbacks = this._callbacks["$" + event];
        if (!callbacks) return this;
        if (1 == arguments.length) {
          delete this._callbacks["$" + event];
          return this;
        }
        var cb;
        for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];
          if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);
            break;
          }
        }
        if (callbacks.length === 0) {
          delete this._callbacks["$" + event];
        }
        return this;
      };
      Emitter.prototype.emit = function(event) {
        this._callbacks = this._callbacks || {};
        var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
        if (callbacks) {
          callbacks = callbacks.slice(0);
          for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }
        return this;
      };
      Emitter.prototype.emitReserved = Emitter.prototype.emit;
      Emitter.prototype.listeners = function(event) {
        this._callbacks = this._callbacks || {};
        return this._callbacks["$" + event] || [];
      };
      Emitter.prototype.hasListeners = function(event) {
        return !!this.listeners(event).length;
      };
    }
  });

  // node_modules/engine.io-client/build/cjs/globals.js
  var require_globals = __commonJS({
    "node_modules/engine.io-client/build/cjs/globals.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defaultBinaryType = exports.globalThisShim = exports.nextTick = void 0;
      exports.createCookieJar = createCookieJar;
      exports.nextTick = (() => {
        const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
        if (isPromiseAvailable) {
          return (cb) => Promise.resolve().then(cb);
        } else {
          return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
        }
      })();
      exports.globalThisShim = (() => {
        if (typeof self !== "undefined") {
          return self;
        } else if (typeof window !== "undefined") {
          return window;
        } else {
          return Function("return this")();
        }
      })();
      exports.defaultBinaryType = "arraybuffer";
      function createCookieJar() {
      }
    }
  });

  // node_modules/engine.io-client/build/cjs/util.js
  var require_util = __commonJS({
    "node_modules/engine.io-client/build/cjs/util.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pick = pick;
      exports.installTimerFunctions = installTimerFunctions;
      exports.byteLength = byteLength;
      exports.randomString = randomString;
      var globals_node_js_1 = require_globals();
      function pick(obj, ...attr) {
        return attr.reduce((acc, k) => {
          if (obj.hasOwnProperty(k)) {
            acc[k] = obj[k];
          }
          return acc;
        }, {});
      }
      var NATIVE_SET_TIMEOUT = globals_node_js_1.globalThisShim.setTimeout;
      var NATIVE_CLEAR_TIMEOUT = globals_node_js_1.globalThisShim.clearTimeout;
      function installTimerFunctions(obj, opts) {
        if (opts.useNativeTimers) {
          obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globals_node_js_1.globalThisShim);
          obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globals_node_js_1.globalThisShim);
        } else {
          obj.setTimeoutFn = globals_node_js_1.globalThisShim.setTimeout.bind(globals_node_js_1.globalThisShim);
          obj.clearTimeoutFn = globals_node_js_1.globalThisShim.clearTimeout.bind(globals_node_js_1.globalThisShim);
        }
      }
      var BASE64_OVERHEAD = 1.33;
      function byteLength(obj) {
        if (typeof obj === "string") {
          return utf8Length(obj);
        }
        return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
      }
      function utf8Length(str) {
        let c = 0, length = 0;
        for (let i = 0, l = str.length; i < l; i++) {
          c = str.charCodeAt(i);
          if (c < 128) {
            length += 1;
          } else if (c < 2048) {
            length += 2;
          } else if (c < 55296 || c >= 57344) {
            length += 3;
          } else {
            i++;
            length += 4;
          }
        }
        return length;
      }
      function randomString() {
        return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
      }
    }
  });

  // node_modules/engine.io-client/build/cjs/contrib/parseqs.js
  var require_parseqs = __commonJS({
    "node_modules/engine.io-client/build/cjs/contrib/parseqs.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = encode;
      exports.decode = decode;
      function encode(obj) {
        let str = "";
        for (let i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (str.length)
              str += "&";
            str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]);
          }
        }
        return str;
      }
      function decode(qs) {
        let qry = {};
        let pairs = qs.split("&");
        for (let i = 0, l = pairs.length; i < l; i++) {
          let pair = pairs[i].split("=");
          qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
        }
        return qry;
      }
    }
  });

  // node_modules/ms/index.js
  var require_ms = __commonJS({
    "node_modules/ms/index.js"(exports, module) {
      init_react_shim();
      var s = 1e3;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;
      module.exports = function(val, options) {
        options = options || {};
        var type = typeof val;
        if (type === "string" && val.length > 0) {
          return parse(val);
        } else if (type === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error(
          "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
        );
      };
      function parse(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y;
          case "weeks":
          case "week":
          case "w":
            return n * w;
          case "days":
          case "day":
          case "d":
            return n * d;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
          default:
            return void 0;
        }
      }
      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return Math.round(ms / d) + "d";
        }
        if (msAbs >= h) {
          return Math.round(ms / h) + "h";
        }
        if (msAbs >= m) {
          return Math.round(ms / m) + "m";
        }
        if (msAbs >= s) {
          return Math.round(ms / s) + "s";
        }
        return ms + "ms";
      }
      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return plural(ms, msAbs, d, "day");
        }
        if (msAbs >= h) {
          return plural(ms, msAbs, h, "hour");
        }
        if (msAbs >= m) {
          return plural(ms, msAbs, m, "minute");
        }
        if (msAbs >= s) {
          return plural(ms, msAbs, s, "second");
        }
        return ms + " ms";
      }
      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
      }
    }
  });

  // node_modules/engine.io-client/node_modules/debug/src/common.js
  var require_common = __commonJS({
    "node_modules/engine.io-client/node_modules/debug/src/common.js"(exports, module) {
      init_react_shim();
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require_ms();
        createDebug.destroy = destroy;
        Object.keys(env).forEach((key) => {
          createDebug[key] = env[key];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
          let hash = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug(...args) {
            if (!debug.enabled) {
              return;
            }
            const self2 = debug;
            const curr = Number(/* @__PURE__ */ new Date());
            const ms = curr - (prevTime || curr);
            self2.diff = ms;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              if (match === "%%") {
                return "%";
              }
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter === "function") {
                const val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            createDebug.formatArgs.call(self2, args);
            const logFn = self2.log || createDebug.log;
            logFn.apply(self2, args);
          }
          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: (v) => {
              enableOverride = v;
            }
          });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          let i;
          const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
          const len = split.length;
          for (i = 0; i < len; i++) {
            if (!split[i]) {
              continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
          ].join(",");
          createDebug.enable("");
          return namespaces;
        }
        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true;
          }
          let i;
          let len;
          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }
          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }
          return false;
        }
        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
        }
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }
        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      module.exports = setup;
    }
  });

  // node_modules/engine.io-client/node_modules/debug/src/browser.js
  var require_browser = __commonJS({
    "node_modules/engine.io-client/node_modules/debug/src/browser.js"(exports, module) {
      init_react_shim();
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();
      exports.destroy = /* @__PURE__ */ (() => {
        let warned = false;
        return () => {
          if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
        };
      })();
      exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33"
      ];
      function useColors() {
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
          return true;
        }
        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }
        let m;
        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
        typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
        typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      function formatArgs(args) {
        args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        const c = "color: " + this.color;
        args.splice(1, 0, c, "color: inherit");
        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          if (match === "%%") {
            return;
          }
          index++;
          if (match === "%c") {
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }
      exports.log = console.debug || console.log || (() => {
      });
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem("debug", namespaces);
          } else {
            exports.storage.removeItem("debug");
          }
        } catch (error) {
        }
      }
      function load() {
        let r;
        try {
          r = exports.storage.getItem("debug");
        } catch (error) {
        }
        if (!r && typeof process !== "undefined" && "env" in process) {
          r = process.env.DEBUG;
        }
        return r;
      }
      function localstorage() {
        try {
          return localStorage;
        } catch (error) {
        }
      }
      module.exports = require_common()(exports);
      var { formatters } = module.exports;
      formatters.j = function(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };
    }
  });

  // node_modules/engine.io-client/build/cjs/transport.js
  var require_transport = __commonJS({
    "node_modules/engine.io-client/build/cjs/transport.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Transport = exports.TransportError = void 0;
      var engine_io_parser_1 = require_cjs();
      var component_emitter_1 = require_cjs2();
      var util_js_1 = require_util();
      var parseqs_js_1 = require_parseqs();
      var debug_1 = __importDefault(require_browser());
      var debug = (0, debug_1.default)("engine.io-client:transport");
      var TransportError = class extends Error {
        constructor(reason, description, context) {
          super(reason);
          this.description = description;
          this.context = context;
          this.type = "TransportError";
        }
      };
      exports.TransportError = TransportError;
      var Transport = class extends component_emitter_1.Emitter {
        /**
         * Transport abstract constructor.
         *
         * @param {Object} opts - options
         * @protected
         */
        constructor(opts) {
          super();
          this.writable = false;
          (0, util_js_1.installTimerFunctions)(this, opts);
          this.opts = opts;
          this.query = opts.query;
          this.socket = opts.socket;
          this.supportsBinary = !opts.forceBase64;
        }
        /**
         * Emits an error.
         *
         * @param {String} reason
         * @param description
         * @param context - the error context
         * @return {Transport} for chaining
         * @protected
         */
        onError(reason, description, context) {
          super.emitReserved("error", new TransportError(reason, description, context));
          return this;
        }
        /**
         * Opens the transport.
         */
        open() {
          this.readyState = "opening";
          this.doOpen();
          return this;
        }
        /**
         * Closes the transport.
         */
        close() {
          if (this.readyState === "opening" || this.readyState === "open") {
            this.doClose();
            this.onClose();
          }
          return this;
        }
        /**
         * Sends multiple packets.
         *
         * @param {Array} packets
         */
        send(packets) {
          if (this.readyState === "open") {
            this.write(packets);
          } else {
            debug("transport is not open, discarding packets");
          }
        }
        /**
         * Called upon open
         *
         * @protected
         */
        onOpen() {
          this.readyState = "open";
          this.writable = true;
          super.emitReserved("open");
        }
        /**
         * Called with data.
         *
         * @param {String} data
         * @protected
         */
        onData(data) {
          const packet = (0, engine_io_parser_1.decodePacket)(data, this.socket.binaryType);
          this.onPacket(packet);
        }
        /**
         * Called with a decoded packet.
         *
         * @protected
         */
        onPacket(packet) {
          super.emitReserved("packet", packet);
        }
        /**
         * Called upon close.
         *
         * @protected
         */
        onClose(details) {
          this.readyState = "closed";
          super.emitReserved("close", details);
        }
        /**
         * Pauses the transport, in order not to lose packets during an upgrade.
         *
         * @param onPause
         */
        pause(onPause) {
        }
        createUri(schema, query = {}) {
          return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
        }
        _hostname() {
          const hostname = this.opts.hostname;
          return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
        }
        _port() {
          if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
            return ":" + this.opts.port;
          } else {
            return "";
          }
        }
        _query(query) {
          const encodedQuery = (0, parseqs_js_1.encode)(query);
          return encodedQuery.length ? "?" + encodedQuery : "";
        }
      };
      exports.Transport = Transport;
    }
  });

  // node_modules/engine.io-client/build/cjs/transports/polling.js
  var require_polling = __commonJS({
    "node_modules/engine.io-client/build/cjs/transports/polling.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Polling = void 0;
      var transport_js_1 = require_transport();
      var util_js_1 = require_util();
      var engine_io_parser_1 = require_cjs();
      var debug_1 = __importDefault(require_browser());
      var debug = (0, debug_1.default)("engine.io-client:polling");
      var Polling = class extends transport_js_1.Transport {
        constructor() {
          super(...arguments);
          this._polling = false;
        }
        get name() {
          return "polling";
        }
        /**
         * Opens the socket (triggers polling). We write a PING message to determine
         * when the transport is open.
         *
         * @protected
         */
        doOpen() {
          this._poll();
        }
        /**
         * Pauses polling.
         *
         * @param {Function} onPause - callback upon buffers are flushed and transport is paused
         * @package
         */
        pause(onPause) {
          this.readyState = "pausing";
          const pause = () => {
            debug("paused");
            this.readyState = "paused";
            onPause();
          };
          if (this._polling || !this.writable) {
            let total = 0;
            if (this._polling) {
              debug("we are currently polling - waiting to pause");
              total++;
              this.once("pollComplete", function() {
                debug("pre-pause polling complete");
                --total || pause();
              });
            }
            if (!this.writable) {
              debug("we are currently writing - waiting to pause");
              total++;
              this.once("drain", function() {
                debug("pre-pause writing complete");
                --total || pause();
              });
            }
          } else {
            pause();
          }
        }
        /**
         * Starts polling cycle.
         *
         * @private
         */
        _poll() {
          debug("polling");
          this._polling = true;
          this.doPoll();
          this.emitReserved("poll");
        }
        /**
         * Overloads onData to detect payloads.
         *
         * @protected
         */
        onData(data) {
          debug("polling got data %s", data);
          const callback = (packet) => {
            if ("opening" === this.readyState && packet.type === "open") {
              this.onOpen();
            }
            if ("close" === packet.type) {
              this.onClose({ description: "transport closed by the server" });
              return false;
            }
            this.onPacket(packet);
          };
          (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);
          if ("closed" !== this.readyState) {
            this._polling = false;
            this.emitReserved("pollComplete");
            if ("open" === this.readyState) {
              this._poll();
            } else {
              debug('ignoring poll - transport state "%s"', this.readyState);
            }
          }
        }
        /**
         * For polling, send a close packet.
         *
         * @protected
         */
        doClose() {
          const close = () => {
            debug("writing close packet");
            this.write([{ type: "close" }]);
          };
          if ("open" === this.readyState) {
            debug("transport open - closing");
            close();
          } else {
            debug("transport not open - deferring close");
            this.once("open", close);
          }
        }
        /**
         * Writes a packets payload.
         *
         * @param {Array} packets - data packets
         * @protected
         */
        write(packets) {
          this.writable = false;
          (0, engine_io_parser_1.encodePayload)(packets, (data) => {
            this.doWrite(data, () => {
              this.writable = true;
              this.emitReserved("drain");
            });
          });
        }
        /**
         * Generates uri for connection.
         *
         * @private
         */
        uri() {
          const schema = this.opts.secure ? "https" : "http";
          const query = this.query || {};
          if (false !== this.opts.timestampRequests) {
            query[this.opts.timestampParam] = (0, util_js_1.randomString)();
          }
          if (!this.supportsBinary && !query.sid) {
            query.b64 = 1;
          }
          return this.createUri(schema, query);
        }
      };
      exports.Polling = Polling;
    }
  });

  // node_modules/engine.io-client/build/cjs/contrib/has-cors.js
  var require_has_cors = __commonJS({
    "node_modules/engine.io-client/build/cjs/contrib/has-cors.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasCORS = void 0;
      var value = false;
      try {
        value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
      } catch (err) {
      }
      exports.hasCORS = value;
    }
  });

  // node_modules/engine.io-client/build/cjs/transports/polling-xhr.js
  var require_polling_xhr = __commonJS({
    "node_modules/engine.io-client/build/cjs/transports/polling-xhr.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.XHR = exports.Request = exports.BaseXHR = void 0;
      var polling_js_1 = require_polling();
      var component_emitter_1 = require_cjs2();
      var util_js_1 = require_util();
      var globals_node_js_1 = require_globals();
      var has_cors_js_1 = require_has_cors();
      var debug_1 = __importDefault(require_browser());
      var debug = (0, debug_1.default)("engine.io-client:polling");
      function empty() {
      }
      var BaseXHR = class extends polling_js_1.Polling {
        /**
         * XHR Polling constructor.
         *
         * @param {Object} opts
         * @package
         */
        constructor(opts) {
          super(opts);
          if (typeof location !== "undefined") {
            const isSSL = "https:" === location.protocol;
            let port = location.port;
            if (!port) {
              port = isSSL ? "443" : "80";
            }
            this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
          }
        }
        /**
         * Sends data.
         *
         * @param {String} data to send.
         * @param {Function} called upon flush.
         * @private
         */
        doWrite(data, fn) {
          const req = this.request({
            method: "POST",
            data
          });
          req.on("success", fn);
          req.on("error", (xhrStatus, context) => {
            this.onError("xhr post error", xhrStatus, context);
          });
        }
        /**
         * Starts a poll cycle.
         *
         * @private
         */
        doPoll() {
          debug("xhr poll");
          const req = this.request();
          req.on("data", this.onData.bind(this));
          req.on("error", (xhrStatus, context) => {
            this.onError("xhr poll error", xhrStatus, context);
          });
          this.pollXhr = req;
        }
      };
      exports.BaseXHR = BaseXHR;
      var Request = class _Request extends component_emitter_1.Emitter {
        /**
         * Request constructor
         *
         * @param {Object} options
         * @package
         */
        constructor(createRequest, uri, opts) {
          super();
          this.createRequest = createRequest;
          (0, util_js_1.installTimerFunctions)(this, opts);
          this._opts = opts;
          this._method = opts.method || "GET";
          this._uri = uri;
          this._data = void 0 !== opts.data ? opts.data : null;
          this._create();
        }
        /**
         * Creates the XHR object and sends the request.
         *
         * @private
         */
        _create() {
          var _a;
          const opts = (0, util_js_1.pick)(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
          opts.xdomain = !!this._opts.xd;
          const xhr = this._xhr = this.createRequest(opts);
          try {
            debug("xhr open %s: %s", this._method, this._uri);
            xhr.open(this._method, this._uri, true);
            try {
              if (this._opts.extraHeaders) {
                xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
                for (let i in this._opts.extraHeaders) {
                  if (this._opts.extraHeaders.hasOwnProperty(i)) {
                    xhr.setRequestHeader(i, this._opts.extraHeaders[i]);
                  }
                }
              }
            } catch (e) {
            }
            if ("POST" === this._method) {
              try {
                xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
              } catch (e) {
              }
            }
            try {
              xhr.setRequestHeader("Accept", "*/*");
            } catch (e) {
            }
            (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);
            if ("withCredentials" in xhr) {
              xhr.withCredentials = this._opts.withCredentials;
            }
            if (this._opts.requestTimeout) {
              xhr.timeout = this._opts.requestTimeout;
            }
            xhr.onreadystatechange = () => {
              var _a2;
              if (xhr.readyState === 3) {
                (_a2 = this._opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(
                  // @ts-ignore
                  xhr.getResponseHeader("set-cookie")
                );
              }
              if (4 !== xhr.readyState)
                return;
              if (200 === xhr.status || 1223 === xhr.status) {
                this._onLoad();
              } else {
                this.setTimeoutFn(() => {
                  this._onError(typeof xhr.status === "number" ? xhr.status : 0);
                }, 0);
              }
            };
            debug("xhr data %s", this._data);
            xhr.send(this._data);
          } catch (e) {
            this.setTimeoutFn(() => {
              this._onError(e);
            }, 0);
            return;
          }
          if (typeof document !== "undefined") {
            this._index = _Request.requestsCount++;
            _Request.requests[this._index] = this;
          }
        }
        /**
         * Called upon error.
         *
         * @private
         */
        _onError(err) {
          this.emitReserved("error", err, this._xhr);
          this._cleanup(true);
        }
        /**
         * Cleans up house.
         *
         * @private
         */
        _cleanup(fromError) {
          if ("undefined" === typeof this._xhr || null === this._xhr) {
            return;
          }
          this._xhr.onreadystatechange = empty;
          if (fromError) {
            try {
              this._xhr.abort();
            } catch (e) {
            }
          }
          if (typeof document !== "undefined") {
            delete _Request.requests[this._index];
          }
          this._xhr = null;
        }
        /**
         * Called upon load.
         *
         * @private
         */
        _onLoad() {
          const data = this._xhr.responseText;
          if (data !== null) {
            this.emitReserved("data", data);
            this.emitReserved("success");
            this._cleanup();
          }
        }
        /**
         * Aborts the request.
         *
         * @package
         */
        abort() {
          this._cleanup();
        }
      };
      exports.Request = Request;
      Request.requestsCount = 0;
      Request.requests = {};
      if (typeof document !== "undefined") {
        if (typeof attachEvent === "function") {
          attachEvent("onunload", unloadHandler);
        } else if (typeof addEventListener === "function") {
          const terminationEvent = "onpagehide" in globals_node_js_1.globalThisShim ? "pagehide" : "unload";
          addEventListener(terminationEvent, unloadHandler, false);
        }
      }
      function unloadHandler() {
        for (let i in Request.requests) {
          if (Request.requests.hasOwnProperty(i)) {
            Request.requests[i].abort();
          }
        }
      }
      var hasXHR2 = function() {
        const xhr = newRequest({
          xdomain: false
        });
        return xhr && xhr.responseType !== null;
      }();
      var XHR = class extends BaseXHR {
        constructor(opts) {
          super(opts);
          const forceBase64 = opts && opts.forceBase64;
          this.supportsBinary = hasXHR2 && !forceBase64;
        }
        request(opts = {}) {
          Object.assign(opts, { xd: this.xd }, this.opts);
          return new Request(newRequest, this.uri(), opts);
        }
      };
      exports.XHR = XHR;
      function newRequest(opts) {
        const xdomain = opts.xdomain;
        try {
          if ("undefined" !== typeof XMLHttpRequest && (!xdomain || has_cors_js_1.hasCORS)) {
            return new XMLHttpRequest();
          }
        } catch (e) {
        }
        if (!xdomain) {
          try {
            return new globals_node_js_1.globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
          } catch (e) {
          }
        }
      }
    }
  });

  // node_modules/engine.io-client/build/cjs/transports/websocket.js
  var require_websocket = __commonJS({
    "node_modules/engine.io-client/build/cjs/transports/websocket.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WS = exports.BaseWS = void 0;
      var transport_js_1 = require_transport();
      var util_js_1 = require_util();
      var engine_io_parser_1 = require_cjs();
      var globals_node_js_1 = require_globals();
      var debug_1 = __importDefault(require_browser());
      var debug = (0, debug_1.default)("engine.io-client:websocket");
      var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
      var BaseWS = class extends transport_js_1.Transport {
        get name() {
          return "websocket";
        }
        doOpen() {
          const uri = this.uri();
          const protocols = this.opts.protocols;
          const opts = isReactNative ? {} : (0, util_js_1.pick)(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
          if (this.opts.extraHeaders) {
            opts.headers = this.opts.extraHeaders;
          }
          try {
            this.ws = this.createSocket(uri, protocols, opts);
          } catch (err) {
            return this.emitReserved("error", err);
          }
          this.ws.binaryType = this.socket.binaryType;
          this.addEventListeners();
        }
        /**
         * Adds event listeners to the socket
         *
         * @private
         */
        addEventListeners() {
          this.ws.onopen = () => {
            if (this.opts.autoUnref) {
              this.ws._socket.unref();
            }
            this.onOpen();
          };
          this.ws.onclose = (closeEvent) => this.onClose({
            description: "websocket connection closed",
            context: closeEvent
          });
          this.ws.onmessage = (ev) => this.onData(ev.data);
          this.ws.onerror = (e) => this.onError("websocket error", e);
        }
        write(packets) {
          this.writable = false;
          for (let i = 0; i < packets.length; i++) {
            const packet = packets[i];
            const lastPacket = i === packets.length - 1;
            (0, engine_io_parser_1.encodePacket)(packet, this.supportsBinary, (data) => {
              try {
                this.doWrite(packet, data);
              } catch (e) {
                debug("websocket closed before onclose event");
              }
              if (lastPacket) {
                (0, globals_node_js_1.nextTick)(() => {
                  this.writable = true;
                  this.emitReserved("drain");
                }, this.setTimeoutFn);
              }
            });
          }
        }
        doClose() {
          if (typeof this.ws !== "undefined") {
            this.ws.onerror = () => {
            };
            this.ws.close();
            this.ws = null;
          }
        }
        /**
         * Generates uri for connection.
         *
         * @private
         */
        uri() {
          const schema = this.opts.secure ? "wss" : "ws";
          const query = this.query || {};
          if (this.opts.timestampRequests) {
            query[this.opts.timestampParam] = (0, util_js_1.randomString)();
          }
          if (!this.supportsBinary) {
            query.b64 = 1;
          }
          return this.createUri(schema, query);
        }
      };
      exports.BaseWS = BaseWS;
      var WebSocketCtor = globals_node_js_1.globalThisShim.WebSocket || globals_node_js_1.globalThisShim.MozWebSocket;
      var WS = class extends BaseWS {
        createSocket(uri, protocols, opts) {
          return !isReactNative ? protocols ? new WebSocketCtor(uri, protocols) : new WebSocketCtor(uri) : new WebSocketCtor(uri, protocols, opts);
        }
        doWrite(_packet, data) {
          this.ws.send(data);
        }
      };
      exports.WS = WS;
    }
  });

  // node_modules/engine.io-client/build/cjs/transports/webtransport.js
  var require_webtransport = __commonJS({
    "node_modules/engine.io-client/build/cjs/transports/webtransport.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WT = void 0;
      var transport_js_1 = require_transport();
      var globals_node_js_1 = require_globals();
      var engine_io_parser_1 = require_cjs();
      var debug_1 = __importDefault(require_browser());
      var debug = (0, debug_1.default)("engine.io-client:webtransport");
      var WT = class extends transport_js_1.Transport {
        get name() {
          return "webtransport";
        }
        doOpen() {
          try {
            this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
          } catch (err) {
            return this.emitReserved("error", err);
          }
          this._transport.closed.then(() => {
            debug("transport closed gracefully");
            this.onClose();
          }).catch((err) => {
            debug("transport closed due to %s", err);
            this.onError("webtransport error", err);
          });
          this._transport.ready.then(() => {
            this._transport.createBidirectionalStream().then((stream) => {
              const decoderStream = (0, engine_io_parser_1.createPacketDecoderStream)(Number.MAX_SAFE_INTEGER, this.socket.binaryType);
              const reader = stream.readable.pipeThrough(decoderStream).getReader();
              const encoderStream = (0, engine_io_parser_1.createPacketEncoderStream)();
              encoderStream.readable.pipeTo(stream.writable);
              this._writer = encoderStream.writable.getWriter();
              const read = () => {
                reader.read().then(({ done, value }) => {
                  if (done) {
                    debug("session is closed");
                    return;
                  }
                  debug("received chunk: %o", value);
                  this.onPacket(value);
                  read();
                }).catch((err) => {
                  debug("an error occurred while reading: %s", err);
                });
              };
              read();
              const packet = { type: "open" };
              if (this.query.sid) {
                packet.data = `{"sid":"${this.query.sid}"}`;
              }
              this._writer.write(packet).then(() => this.onOpen());
            });
          });
        }
        write(packets) {
          this.writable = false;
          for (let i = 0; i < packets.length; i++) {
            const packet = packets[i];
            const lastPacket = i === packets.length - 1;
            this._writer.write(packet).then(() => {
              if (lastPacket) {
                (0, globals_node_js_1.nextTick)(() => {
                  this.writable = true;
                  this.emitReserved("drain");
                }, this.setTimeoutFn);
              }
            });
          }
        }
        doClose() {
          var _a;
          (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();
        }
      };
      exports.WT = WT;
    }
  });

  // node_modules/engine.io-client/build/cjs/transports/index.js
  var require_transports = __commonJS({
    "node_modules/engine.io-client/build/cjs/transports/index.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.transports = void 0;
      var polling_xhr_node_js_1 = require_polling_xhr();
      var websocket_node_js_1 = require_websocket();
      var webtransport_js_1 = require_webtransport();
      exports.transports = {
        websocket: websocket_node_js_1.WS,
        webtransport: webtransport_js_1.WT,
        polling: polling_xhr_node_js_1.XHR
      };
    }
  });

  // node_modules/engine.io-client/build/cjs/contrib/parseuri.js
  var require_parseuri = __commonJS({
    "node_modules/engine.io-client/build/cjs/contrib/parseuri.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = parse;
      var re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
      var parts = [
        "source",
        "protocol",
        "authority",
        "userInfo",
        "user",
        "password",
        "host",
        "port",
        "relative",
        "path",
        "directory",
        "file",
        "query",
        "anchor"
      ];
      function parse(str) {
        if (str.length > 8e3) {
          throw "URI too long";
        }
        const src = str, b = str.indexOf("["), e = str.indexOf("]");
        if (b != -1 && e != -1) {
          str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
        }
        let m = re.exec(str || ""), uri = {}, i = 14;
        while (i--) {
          uri[parts[i]] = m[i] || "";
        }
        if (b != -1 && e != -1) {
          uri.source = src;
          uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
          uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
          uri.ipv6uri = true;
        }
        uri.pathNames = pathNames(uri, uri["path"]);
        uri.queryKey = queryKey(uri, uri["query"]);
        return uri;
      }
      function pathNames(obj, path) {
        const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
        if (path.slice(0, 1) == "/" || path.length === 0) {
          names.splice(0, 1);
        }
        if (path.slice(-1) == "/") {
          names.splice(names.length - 1, 1);
        }
        return names;
      }
      function queryKey(uri, query) {
        const data = {};
        query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
          if ($1) {
            data[$1] = $2;
          }
        });
        return data;
      }
    }
  });

  // node_modules/engine.io-client/build/cjs/socket.js
  var require_socket = __commonJS({
    "node_modules/engine.io-client/build/cjs/socket.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Socket = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = void 0;
      var index_js_1 = require_transports();
      var util_js_1 = require_util();
      var parseqs_js_1 = require_parseqs();
      var parseuri_js_1 = require_parseuri();
      var component_emitter_1 = require_cjs2();
      var engine_io_parser_1 = require_cjs();
      var globals_node_js_1 = require_globals();
      var debug_1 = __importDefault(require_browser());
      var debug = (0, debug_1.default)("engine.io-client:socket");
      var withEventListeners = typeof addEventListener === "function" && typeof removeEventListener === "function";
      var OFFLINE_EVENT_LISTENERS = [];
      if (withEventListeners) {
        addEventListener("offline", () => {
          debug("closing %d connection(s) because the network was lost", OFFLINE_EVENT_LISTENERS.length);
          OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());
        }, false);
      }
      var SocketWithoutUpgrade = class _SocketWithoutUpgrade extends component_emitter_1.Emitter {
        /**
         * Socket constructor.
         *
         * @param {String|Object} uri - uri or options
         * @param {Object} opts - options
         */
        constructor(uri, opts) {
          super();
          this.binaryType = globals_node_js_1.defaultBinaryType;
          this.writeBuffer = [];
          this._prevBufferLen = 0;
          this._pingInterval = -1;
          this._pingTimeout = -1;
          this._maxPayload = -1;
          this._pingTimeoutTime = Infinity;
          if (uri && "object" === typeof uri) {
            opts = uri;
            uri = null;
          }
          if (uri) {
            const parsedUri = (0, parseuri_js_1.parse)(uri);
            opts.hostname = parsedUri.host;
            opts.secure = parsedUri.protocol === "https" || parsedUri.protocol === "wss";
            opts.port = parsedUri.port;
            if (parsedUri.query)
              opts.query = parsedUri.query;
          } else if (opts.host) {
            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;
          }
          (0, util_js_1.installTimerFunctions)(this, opts);
          this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
          if (opts.hostname && !opts.port) {
            opts.port = this.secure ? "443" : "80";
          }
          this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
          this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
          this.transports = [];
          this._transportsByName = {};
          opts.transports.forEach((t) => {
            const transportName = t.prototype.name;
            this.transports.push(transportName);
            this._transportsByName[transportName] = t;
          });
          this.opts = Object.assign({
            path: "/engine.io",
            agent: false,
            withCredentials: false,
            upgrade: true,
            timestampParam: "t",
            rememberUpgrade: false,
            addTrailingSlash: true,
            rejectUnauthorized: true,
            perMessageDeflate: {
              threshold: 1024
            },
            transportOptions: {},
            closeOnBeforeunload: false
          }, opts);
          this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
          if (typeof this.opts.query === "string") {
            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);
          }
          if (withEventListeners) {
            if (this.opts.closeOnBeforeunload) {
              this._beforeunloadEventListener = () => {
                if (this.transport) {
                  this.transport.removeAllListeners();
                  this.transport.close();
                }
              };
              addEventListener("beforeunload", this._beforeunloadEventListener, false);
            }
            if (this.hostname !== "localhost") {
              debug("adding listener for the 'offline' event");
              this._offlineEventListener = () => {
                this._onClose("transport close", {
                  description: "network connection lost"
                });
              };
              OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);
            }
          }
          if (this.opts.withCredentials) {
            this._cookieJar = (0, globals_node_js_1.createCookieJar)();
          }
          this._open();
        }
        /**
         * Creates transport of the given type.
         *
         * @param {String} name - transport name
         * @return {Transport}
         * @private
         */
        createTransport(name) {
          debug('creating transport "%s"', name);
          const query = Object.assign({}, this.opts.query);
          query.EIO = engine_io_parser_1.protocol;
          query.transport = name;
          if (this.id)
            query.sid = this.id;
          const opts = Object.assign({}, this.opts, {
            query,
            socket: this,
            hostname: this.hostname,
            secure: this.secure,
            port: this.port
          }, this.opts.transportOptions[name]);
          debug("options: %j", opts);
          return new this._transportsByName[name](opts);
        }
        /**
         * Initializes transport to use and starts probe.
         *
         * @private
         */
        _open() {
          if (this.transports.length === 0) {
            this.setTimeoutFn(() => {
              this.emitReserved("error", "No transports available");
            }, 0);
            return;
          }
          const transportName = this.opts.rememberUpgrade && _SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
          this.readyState = "opening";
          const transport = this.createTransport(transportName);
          transport.open();
          this.setTransport(transport);
        }
        /**
         * Sets the current transport. Disables the existing one (if any).
         *
         * @private
         */
        setTransport(transport) {
          debug("setting transport %s", transport.name);
          if (this.transport) {
            debug("clearing existing transport %s", this.transport.name);
            this.transport.removeAllListeners();
          }
          this.transport = transport;
          transport.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (reason) => this._onClose("transport close", reason));
        }
        /**
         * Called when connection is deemed open.
         *
         * @private
         */
        onOpen() {
          debug("socket open");
          this.readyState = "open";
          _SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === this.transport.name;
          this.emitReserved("open");
          this.flush();
        }
        /**
         * Handles a packet.
         *
         * @private
         */
        _onPacket(packet) {
          if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
            this.emitReserved("packet", packet);
            this.emitReserved("heartbeat");
            switch (packet.type) {
              case "open":
                this.onHandshake(JSON.parse(packet.data));
                break;
              case "ping":
                this._sendPacket("pong");
                this.emitReserved("ping");
                this.emitReserved("pong");
                this._resetPingTimeout();
                break;
              case "error":
                const err = new Error("server error");
                err.code = packet.data;
                this._onError(err);
                break;
              case "message":
                this.emitReserved("data", packet.data);
                this.emitReserved("message", packet.data);
                break;
            }
          } else {
            debug('packet received with socket readyState "%s"', this.readyState);
          }
        }
        /**
         * Called upon handshake completion.
         *
         * @param {Object} data - handshake obj
         * @private
         */
        onHandshake(data) {
          this.emitReserved("handshake", data);
          this.id = data.sid;
          this.transport.query.sid = data.sid;
          this._pingInterval = data.pingInterval;
          this._pingTimeout = data.pingTimeout;
          this._maxPayload = data.maxPayload;
          this.onOpen();
          if ("closed" === this.readyState)
            return;
          this._resetPingTimeout();
        }
        /**
         * Sets and resets ping timeout timer based on server pings.
         *
         * @private
         */
        _resetPingTimeout() {
          this.clearTimeoutFn(this._pingTimeoutTimer);
          const delay = this._pingInterval + this._pingTimeout;
          this._pingTimeoutTime = Date.now() + delay;
          this._pingTimeoutTimer = this.setTimeoutFn(() => {
            this._onClose("ping timeout");
          }, delay);
          if (this.opts.autoUnref) {
            this._pingTimeoutTimer.unref();
          }
        }
        /**
         * Called on `drain` event
         *
         * @private
         */
        _onDrain() {
          this.writeBuffer.splice(0, this._prevBufferLen);
          this._prevBufferLen = 0;
          if (0 === this.writeBuffer.length) {
            this.emitReserved("drain");
          } else {
            this.flush();
          }
        }
        /**
         * Flush write buffers.
         *
         * @private
         */
        flush() {
          if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
            const packets = this._getWritablePackets();
            debug("flushing %d packets in socket", packets.length);
            this.transport.send(packets);
            this._prevBufferLen = packets.length;
            this.emitReserved("flush");
          }
        }
        /**
         * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
         * long-polling)
         *
         * @private
         */
        _getWritablePackets() {
          const shouldCheckPayloadSize = this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
          if (!shouldCheckPayloadSize) {
            return this.writeBuffer;
          }
          let payloadSize = 1;
          for (let i = 0; i < this.writeBuffer.length; i++) {
            const data = this.writeBuffer[i].data;
            if (data) {
              payloadSize += (0, util_js_1.byteLength)(data);
            }
            if (i > 0 && payloadSize > this._maxPayload) {
              debug("only send %d out of %d packets", i, this.writeBuffer.length);
              return this.writeBuffer.slice(0, i);
            }
            payloadSize += 2;
          }
          debug("payload size is %d (max: %d)", payloadSize, this._maxPayload);
          return this.writeBuffer;
        }
        /**
         * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
         *
         * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
         * `write()` method then the message would not be buffered by the Socket.IO client.
         *
         * @return {boolean}
         * @private
         */
        /* private */
        _hasPingExpired() {
          if (!this._pingTimeoutTime)
            return true;
          const hasExpired = Date.now() > this._pingTimeoutTime;
          if (hasExpired) {
            debug("throttled timer detected, scheduling connection close");
            this._pingTimeoutTime = 0;
            (0, globals_node_js_1.nextTick)(() => {
              this._onClose("ping timeout");
            }, this.setTimeoutFn);
          }
          return hasExpired;
        }
        /**
         * Sends a message.
         *
         * @param {String} msg - message.
         * @param {Object} options.
         * @param {Function} fn - callback function.
         * @return {Socket} for chaining.
         */
        write(msg, options, fn) {
          this._sendPacket("message", msg, options, fn);
          return this;
        }
        /**
         * Sends a message. Alias of {@link Socket#write}.
         *
         * @param {String} msg - message.
         * @param {Object} options.
         * @param {Function} fn - callback function.
         * @return {Socket} for chaining.
         */
        send(msg, options, fn) {
          this._sendPacket("message", msg, options, fn);
          return this;
        }
        /**
         * Sends a packet.
         *
         * @param {String} type: packet type.
         * @param {String} data.
         * @param {Object} options.
         * @param {Function} fn - callback function.
         * @private
         */
        _sendPacket(type, data, options, fn) {
          if ("function" === typeof data) {
            fn = data;
            data = void 0;
          }
          if ("function" === typeof options) {
            fn = options;
            options = null;
          }
          if ("closing" === this.readyState || "closed" === this.readyState) {
            return;
          }
          options = options || {};
          options.compress = false !== options.compress;
          const packet = {
            type,
            data,
            options
          };
          this.emitReserved("packetCreate", packet);
          this.writeBuffer.push(packet);
          if (fn)
            this.once("flush", fn);
          this.flush();
        }
        /**
         * Closes the connection.
         */
        close() {
          const close = () => {
            this._onClose("forced close");
            debug("socket closing - telling transport to close");
            this.transport.close();
          };
          const cleanupAndClose = () => {
            this.off("upgrade", cleanupAndClose);
            this.off("upgradeError", cleanupAndClose);
            close();
          };
          const waitForUpgrade = () => {
            this.once("upgrade", cleanupAndClose);
            this.once("upgradeError", cleanupAndClose);
          };
          if ("opening" === this.readyState || "open" === this.readyState) {
            this.readyState = "closing";
            if (this.writeBuffer.length) {
              this.once("drain", () => {
                if (this.upgrading) {
                  waitForUpgrade();
                } else {
                  close();
                }
              });
            } else if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          }
          return this;
        }
        /**
         * Called upon transport error
         *
         * @private
         */
        _onError(err) {
          debug("socket error %j", err);
          _SocketWithoutUpgrade.priorWebsocketSuccess = false;
          if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening") {
            debug("trying next transport");
            this.transports.shift();
            return this._open();
          }
          this.emitReserved("error", err);
          this._onClose("transport error", err);
        }
        /**
         * Called upon transport close.
         *
         * @private
         */
        _onClose(reason, description) {
          if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            debug('socket close with reason: "%s"', reason);
            this.clearTimeoutFn(this._pingTimeoutTimer);
            this.transport.removeAllListeners("close");
            this.transport.close();
            this.transport.removeAllListeners();
            if (withEventListeners) {
              if (this._beforeunloadEventListener) {
                removeEventListener("beforeunload", this._beforeunloadEventListener, false);
              }
              if (this._offlineEventListener) {
                const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);
                if (i !== -1) {
                  debug("removing listener for the 'offline' event");
                  OFFLINE_EVENT_LISTENERS.splice(i, 1);
                }
              }
            }
            this.readyState = "closed";
            this.id = null;
            this.emitReserved("close", reason, description);
            this.writeBuffer = [];
            this._prevBufferLen = 0;
          }
        }
      };
      exports.SocketWithoutUpgrade = SocketWithoutUpgrade;
      SocketWithoutUpgrade.protocol = engine_io_parser_1.protocol;
      var SocketWithUpgrade = class extends SocketWithoutUpgrade {
        constructor() {
          super(...arguments);
          this._upgrades = [];
        }
        onOpen() {
          super.onOpen();
          if ("open" === this.readyState && this.opts.upgrade) {
            debug("starting upgrade probes");
            for (let i = 0; i < this._upgrades.length; i++) {
              this._probe(this._upgrades[i]);
            }
          }
        }
        /**
         * Probes a transport.
         *
         * @param {String} name - transport name
         * @private
         */
        _probe(name) {
          debug('probing transport "%s"', name);
          let transport = this.createTransport(name);
          let failed = false;
          SocketWithoutUpgrade.priorWebsocketSuccess = false;
          const onTransportOpen = () => {
            if (failed)
              return;
            debug('probe transport "%s" opened', name);
            transport.send([{ type: "ping", data: "probe" }]);
            transport.once("packet", (msg) => {
              if (failed)
                return;
              if ("pong" === msg.type && "probe" === msg.data) {
                debug('probe transport "%s" pong', name);
                this.upgrading = true;
                this.emitReserved("upgrading", transport);
                if (!transport)
                  return;
                SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === transport.name;
                debug('pausing current transport "%s"', this.transport.name);
                this.transport.pause(() => {
                  if (failed)
                    return;
                  if ("closed" === this.readyState)
                    return;
                  debug("changing transport and sending upgrade packet");
                  cleanup();
                  this.setTransport(transport);
                  transport.send([{ type: "upgrade" }]);
                  this.emitReserved("upgrade", transport);
                  transport = null;
                  this.upgrading = false;
                  this.flush();
                });
              } else {
                debug('probe transport "%s" failed', name);
                const err = new Error("probe error");
                err.transport = transport.name;
                this.emitReserved("upgradeError", err);
              }
            });
          };
          function freezeTransport() {
            if (failed)
              return;
            failed = true;
            cleanup();
            transport.close();
            transport = null;
          }
          const onerror = (err) => {
            const error = new Error("probe error: " + err);
            error.transport = transport.name;
            freezeTransport();
            debug('probe transport "%s" failed because of error: %s', name, err);
            this.emitReserved("upgradeError", error);
          };
          function onTransportClose() {
            onerror("transport closed");
          }
          function onclose() {
            onerror("socket closed");
          }
          function onupgrade(to) {
            if (transport && to.name !== transport.name) {
              debug('"%s" works - aborting "%s"', to.name, transport.name);
              freezeTransport();
            }
          }
          const cleanup = () => {
            transport.removeListener("open", onTransportOpen);
            transport.removeListener("error", onerror);
            transport.removeListener("close", onTransportClose);
            this.off("close", onclose);
            this.off("upgrading", onupgrade);
          };
          transport.once("open", onTransportOpen);
          transport.once("error", onerror);
          transport.once("close", onTransportClose);
          this.once("close", onclose);
          this.once("upgrading", onupgrade);
          if (this._upgrades.indexOf("webtransport") !== -1 && name !== "webtransport") {
            this.setTimeoutFn(() => {
              if (!failed) {
                transport.open();
              }
            }, 200);
          } else {
            transport.open();
          }
        }
        onHandshake(data) {
          this._upgrades = this._filterUpgrades(data.upgrades);
          super.onHandshake(data);
        }
        /**
         * Filters upgrades, returning only those matching client transports.
         *
         * @param {Array} upgrades - server upgrades
         * @private
         */
        _filterUpgrades(upgrades) {
          const filteredUpgrades = [];
          for (let i = 0; i < upgrades.length; i++) {
            if (~this.transports.indexOf(upgrades[i]))
              filteredUpgrades.push(upgrades[i]);
          }
          return filteredUpgrades;
        }
      };
      exports.SocketWithUpgrade = SocketWithUpgrade;
      var Socket = class extends SocketWithUpgrade {
        constructor(uri, opts = {}) {
          const o = typeof uri === "object" ? uri : opts;
          if (!o.transports || o.transports && typeof o.transports[0] === "string") {
            o.transports = (o.transports || ["polling", "websocket", "webtransport"]).map((transportName) => index_js_1.transports[transportName]).filter((t) => !!t);
          }
          super(uri, o);
        }
      };
      exports.Socket = Socket;
    }
  });

  // node_modules/engine.io-client/build/cjs/transports/polling-fetch.js
  var require_polling_fetch = __commonJS({
    "node_modules/engine.io-client/build/cjs/transports/polling-fetch.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Fetch = void 0;
      var polling_js_1 = require_polling();
      var Fetch = class extends polling_js_1.Polling {
        doPoll() {
          this._fetch().then((res) => {
            if (!res.ok) {
              return this.onError("fetch read error", res.status, res);
            }
            res.text().then((data) => this.onData(data));
          }).catch((err) => {
            this.onError("fetch read error", err);
          });
        }
        doWrite(data, callback) {
          this._fetch(data).then((res) => {
            if (!res.ok) {
              return this.onError("fetch write error", res.status, res);
            }
            callback();
          }).catch((err) => {
            this.onError("fetch write error", err);
          });
        }
        _fetch(data) {
          var _a;
          const isPost = data !== void 0;
          const headers = new Headers(this.opts.extraHeaders);
          if (isPost) {
            headers.set("content-type", "text/plain;charset=UTF-8");
          }
          (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);
          return fetch(this.uri(), {
            method: isPost ? "POST" : "GET",
            body: isPost ? data : null,
            headers,
            credentials: this.opts.withCredentials ? "include" : "omit"
          }).then((res) => {
            var _a2;
            (_a2 = this.socket._cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(res.headers.getSetCookie());
            return res;
          });
        }
      };
      exports.Fetch = Fetch;
    }
  });

  // node_modules/engine.io-client/build/cjs/index.js
  var require_cjs3 = __commonJS({
    "node_modules/engine.io-client/build/cjs/index.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebTransport = exports.WebSocket = exports.NodeWebSocket = exports.XHR = exports.NodeXHR = exports.Fetch = exports.nextTick = exports.parse = exports.installTimerFunctions = exports.transports = exports.TransportError = exports.Transport = exports.protocol = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = exports.Socket = void 0;
      var socket_js_1 = require_socket();
      Object.defineProperty(exports, "Socket", { enumerable: true, get: function() {
        return socket_js_1.Socket;
      } });
      var socket_js_2 = require_socket();
      Object.defineProperty(exports, "SocketWithoutUpgrade", { enumerable: true, get: function() {
        return socket_js_2.SocketWithoutUpgrade;
      } });
      Object.defineProperty(exports, "SocketWithUpgrade", { enumerable: true, get: function() {
        return socket_js_2.SocketWithUpgrade;
      } });
      exports.protocol = socket_js_1.Socket.protocol;
      var transport_js_1 = require_transport();
      Object.defineProperty(exports, "Transport", { enumerable: true, get: function() {
        return transport_js_1.Transport;
      } });
      Object.defineProperty(exports, "TransportError", { enumerable: true, get: function() {
        return transport_js_1.TransportError;
      } });
      var index_js_1 = require_transports();
      Object.defineProperty(exports, "transports", { enumerable: true, get: function() {
        return index_js_1.transports;
      } });
      var util_js_1 = require_util();
      Object.defineProperty(exports, "installTimerFunctions", { enumerable: true, get: function() {
        return util_js_1.installTimerFunctions;
      } });
      var parseuri_js_1 = require_parseuri();
      Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
        return parseuri_js_1.parse;
      } });
      var globals_node_js_1 = require_globals();
      Object.defineProperty(exports, "nextTick", { enumerable: true, get: function() {
        return globals_node_js_1.nextTick;
      } });
      var polling_fetch_js_1 = require_polling_fetch();
      Object.defineProperty(exports, "Fetch", { enumerable: true, get: function() {
        return polling_fetch_js_1.Fetch;
      } });
      var polling_xhr_node_js_1 = require_polling_xhr();
      Object.defineProperty(exports, "NodeXHR", { enumerable: true, get: function() {
        return polling_xhr_node_js_1.XHR;
      } });
      var polling_xhr_js_1 = require_polling_xhr();
      Object.defineProperty(exports, "XHR", { enumerable: true, get: function() {
        return polling_xhr_js_1.XHR;
      } });
      var websocket_node_js_1 = require_websocket();
      Object.defineProperty(exports, "NodeWebSocket", { enumerable: true, get: function() {
        return websocket_node_js_1.WS;
      } });
      var websocket_js_1 = require_websocket();
      Object.defineProperty(exports, "WebSocket", { enumerable: true, get: function() {
        return websocket_js_1.WS;
      } });
      var webtransport_js_1 = require_webtransport();
      Object.defineProperty(exports, "WebTransport", { enumerable: true, get: function() {
        return webtransport_js_1.WT;
      } });
    }
  });

  // node_modules/socket.io-client/node_modules/debug/src/common.js
  var require_common2 = __commonJS({
    "node_modules/socket.io-client/node_modules/debug/src/common.js"(exports, module) {
      init_react_shim();
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require_ms();
        createDebug.destroy = destroy;
        Object.keys(env).forEach((key) => {
          createDebug[key] = env[key];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
          let hash = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug(...args) {
            if (!debug.enabled) {
              return;
            }
            const self2 = debug;
            const curr = Number(/* @__PURE__ */ new Date());
            const ms = curr - (prevTime || curr);
            self2.diff = ms;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              if (match === "%%") {
                return "%";
              }
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter === "function") {
                const val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            createDebug.formatArgs.call(self2, args);
            const logFn = self2.log || createDebug.log;
            logFn.apply(self2, args);
          }
          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: (v) => {
              enableOverride = v;
            }
          });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          let i;
          const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
          const len = split.length;
          for (i = 0; i < len; i++) {
            if (!split[i]) {
              continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
          ].join(",");
          createDebug.enable("");
          return namespaces;
        }
        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true;
          }
          let i;
          let len;
          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }
          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }
          return false;
        }
        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
        }
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }
        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      module.exports = setup;
    }
  });

  // node_modules/socket.io-client/node_modules/debug/src/browser.js
  var require_browser2 = __commonJS({
    "node_modules/socket.io-client/node_modules/debug/src/browser.js"(exports, module) {
      init_react_shim();
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();
      exports.destroy = /* @__PURE__ */ (() => {
        let warned = false;
        return () => {
          if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
        };
      })();
      exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33"
      ];
      function useColors() {
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
          return true;
        }
        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }
        let m;
        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
        typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
        typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      function formatArgs(args) {
        args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        const c = "color: " + this.color;
        args.splice(1, 0, c, "color: inherit");
        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          if (match === "%%") {
            return;
          }
          index++;
          if (match === "%c") {
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }
      exports.log = console.debug || console.log || (() => {
      });
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem("debug", namespaces);
          } else {
            exports.storage.removeItem("debug");
          }
        } catch (error) {
        }
      }
      function load() {
        let r;
        try {
          r = exports.storage.getItem("debug");
        } catch (error) {
        }
        if (!r && typeof process !== "undefined" && "env" in process) {
          r = process.env.DEBUG;
        }
        return r;
      }
      function localstorage() {
        try {
          return localStorage;
        } catch (error) {
        }
      }
      module.exports = require_common2()(exports);
      var { formatters } = module.exports;
      formatters.j = function(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };
    }
  });

  // node_modules/socket.io-client/build/cjs/url.js
  var require_url = __commonJS({
    "node_modules/socket.io-client/build/cjs/url.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.url = url;
      var engine_io_client_1 = require_cjs3();
      var debug_1 = __importDefault(require_browser2());
      var debug = (0, debug_1.default)("socket.io-client:url");
      function url(uri, path = "", loc) {
        let obj = uri;
        loc = loc || typeof location !== "undefined" && location;
        if (null == uri)
          uri = loc.protocol + "//" + loc.host;
        if (typeof uri === "string") {
          if ("/" === uri.charAt(0)) {
            if ("/" === uri.charAt(1)) {
              uri = loc.protocol + uri;
            } else {
              uri = loc.host + uri;
            }
          }
          if (!/^(https?|wss?):\/\//.test(uri)) {
            debug("protocol-less url %s", uri);
            if ("undefined" !== typeof loc) {
              uri = loc.protocol + "//" + uri;
            } else {
              uri = "https://" + uri;
            }
          }
          debug("parse %s", uri);
          obj = (0, engine_io_client_1.parse)(uri);
        }
        if (!obj.port) {
          if (/^(http|ws)$/.test(obj.protocol)) {
            obj.port = "80";
          } else if (/^(http|ws)s$/.test(obj.protocol)) {
            obj.port = "443";
          }
        }
        obj.path = obj.path || "/";
        const ipv6 = obj.host.indexOf(":") !== -1;
        const host = ipv6 ? "[" + obj.host + "]" : obj.host;
        obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
        obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
        return obj;
      }
    }
  });

  // node_modules/socket.io-parser/build/cjs/is-binary.js
  var require_is_binary = __commonJS({
    "node_modules/socket.io-parser/build/cjs/is-binary.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasBinary = exports.isBinary = void 0;
      var withNativeArrayBuffer = typeof ArrayBuffer === "function";
      var isView = (obj) => {
        return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
      };
      var toString = Object.prototype.toString;
      var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
      var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
      function isBinary(obj) {
        return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
      }
      exports.isBinary = isBinary;
      function hasBinary(obj, toJSON) {
        if (!obj || typeof obj !== "object") {
          return false;
        }
        if (Array.isArray(obj)) {
          for (let i = 0, l = obj.length; i < l; i++) {
            if (hasBinary(obj[i])) {
              return true;
            }
          }
          return false;
        }
        if (isBinary(obj)) {
          return true;
        }
        if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
          return hasBinary(obj.toJSON(), true);
        }
        for (const key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
            return true;
          }
        }
        return false;
      }
      exports.hasBinary = hasBinary;
    }
  });

  // node_modules/socket.io-parser/build/cjs/binary.js
  var require_binary = __commonJS({
    "node_modules/socket.io-parser/build/cjs/binary.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.reconstructPacket = exports.deconstructPacket = void 0;
      var is_binary_js_1 = require_is_binary();
      function deconstructPacket(packet) {
        const buffers = [];
        const packetData = packet.data;
        const pack = packet;
        pack.data = _deconstructPacket(packetData, buffers);
        pack.attachments = buffers.length;
        return { packet: pack, buffers };
      }
      exports.deconstructPacket = deconstructPacket;
      function _deconstructPacket(data, buffers) {
        if (!data)
          return data;
        if ((0, is_binary_js_1.isBinary)(data)) {
          const placeholder = { _placeholder: true, num: buffers.length };
          buffers.push(data);
          return placeholder;
        } else if (Array.isArray(data)) {
          const newData = new Array(data.length);
          for (let i = 0; i < data.length; i++) {
            newData[i] = _deconstructPacket(data[i], buffers);
          }
          return newData;
        } else if (typeof data === "object" && !(data instanceof Date)) {
          const newData = {};
          for (const key in data) {
            if (Object.prototype.hasOwnProperty.call(data, key)) {
              newData[key] = _deconstructPacket(data[key], buffers);
            }
          }
          return newData;
        }
        return data;
      }
      function reconstructPacket(packet, buffers) {
        packet.data = _reconstructPacket(packet.data, buffers);
        delete packet.attachments;
        return packet;
      }
      exports.reconstructPacket = reconstructPacket;
      function _reconstructPacket(data, buffers) {
        if (!data)
          return data;
        if (data && data._placeholder === true) {
          const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
          if (isIndexValid) {
            return buffers[data.num];
          } else {
            throw new Error("illegal attachments");
          }
        } else if (Array.isArray(data)) {
          for (let i = 0; i < data.length; i++) {
            data[i] = _reconstructPacket(data[i], buffers);
          }
        } else if (typeof data === "object") {
          for (const key in data) {
            if (Object.prototype.hasOwnProperty.call(data, key)) {
              data[key] = _reconstructPacket(data[key], buffers);
            }
          }
        }
        return data;
      }
    }
  });

  // node_modules/socket.io-parser/node_modules/debug/src/common.js
  var require_common3 = __commonJS({
    "node_modules/socket.io-parser/node_modules/debug/src/common.js"(exports, module) {
      init_react_shim();
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require_ms();
        createDebug.destroy = destroy;
        Object.keys(env).forEach((key) => {
          createDebug[key] = env[key];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
          let hash = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug(...args) {
            if (!debug.enabled) {
              return;
            }
            const self2 = debug;
            const curr = Number(/* @__PURE__ */ new Date());
            const ms = curr - (prevTime || curr);
            self2.diff = ms;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              if (match === "%%") {
                return "%";
              }
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter === "function") {
                const val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            createDebug.formatArgs.call(self2, args);
            const logFn = self2.log || createDebug.log;
            logFn.apply(self2, args);
          }
          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: (v) => {
              enableOverride = v;
            }
          });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          let i;
          const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
          const len = split.length;
          for (i = 0; i < len; i++) {
            if (!split[i]) {
              continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
          ].join(",");
          createDebug.enable("");
          return namespaces;
        }
        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true;
          }
          let i;
          let len;
          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }
          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }
          return false;
        }
        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
        }
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }
        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      module.exports = setup;
    }
  });

  // node_modules/socket.io-parser/node_modules/debug/src/browser.js
  var require_browser3 = __commonJS({
    "node_modules/socket.io-parser/node_modules/debug/src/browser.js"(exports, module) {
      init_react_shim();
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();
      exports.destroy = /* @__PURE__ */ (() => {
        let warned = false;
        return () => {
          if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
        };
      })();
      exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33"
      ];
      function useColors() {
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
          return true;
        }
        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }
        let m;
        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
        typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
        typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      function formatArgs(args) {
        args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        const c = "color: " + this.color;
        args.splice(1, 0, c, "color: inherit");
        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          if (match === "%%") {
            return;
          }
          index++;
          if (match === "%c") {
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }
      exports.log = console.debug || console.log || (() => {
      });
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem("debug", namespaces);
          } else {
            exports.storage.removeItem("debug");
          }
        } catch (error) {
        }
      }
      function load() {
        let r;
        try {
          r = exports.storage.getItem("debug");
        } catch (error) {
        }
        if (!r && typeof process !== "undefined" && "env" in process) {
          r = process.env.DEBUG;
        }
        return r;
      }
      function localstorage() {
        try {
          return localStorage;
        } catch (error) {
        }
      }
      module.exports = require_common3()(exports);
      var { formatters } = module.exports;
      formatters.j = function(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };
    }
  });

  // node_modules/socket.io-parser/build/cjs/index.js
  var require_cjs4 = __commonJS({
    "node_modules/socket.io-parser/build/cjs/index.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;
      var component_emitter_1 = require_cjs2();
      var binary_js_1 = require_binary();
      var is_binary_js_1 = require_is_binary();
      var debug_1 = require_browser3();
      var debug = (0, debug_1.default)("socket.io-parser");
      var RESERVED_EVENTS = [
        "connect",
        "connect_error",
        "disconnect",
        "disconnecting",
        "newListener",
        "removeListener"
        // used by the Node.js EventEmitter
      ];
      exports.protocol = 5;
      var PacketType;
      (function(PacketType2) {
        PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
        PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
        PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
        PacketType2[PacketType2["ACK"] = 3] = "ACK";
        PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
        PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
        PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
      })(PacketType = exports.PacketType || (exports.PacketType = {}));
      var Encoder = class {
        /**
         * Encoder constructor
         *
         * @param {function} replacer - custom replacer to pass down to JSON.parse
         */
        constructor(replacer) {
          this.replacer = replacer;
        }
        /**
         * Encode a packet as a single string if non-binary, or as a
         * buffer sequence, depending on packet type.
         *
         * @param {Object} obj - packet object
         */
        encode(obj) {
          debug("encoding packet %j", obj);
          if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
            if ((0, is_binary_js_1.hasBinary)(obj)) {
              return this.encodeAsBinary({
                type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
                nsp: obj.nsp,
                data: obj.data,
                id: obj.id
              });
            }
          }
          return [this.encodeAsString(obj)];
        }
        /**
         * Encode packet as string.
         */
        encodeAsString(obj) {
          let str = "" + obj.type;
          if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
            str += obj.attachments + "-";
          }
          if (obj.nsp && "/" !== obj.nsp) {
            str += obj.nsp + ",";
          }
          if (null != obj.id) {
            str += obj.id;
          }
          if (null != obj.data) {
            str += JSON.stringify(obj.data, this.replacer);
          }
          debug("encoded %j as %s", obj, str);
          return str;
        }
        /**
         * Encode packet as 'buffer sequence' by removing blobs, and
         * deconstructing packet into object with placeholders and
         * a list of buffers.
         */
        encodeAsBinary(obj) {
          const deconstruction = (0, binary_js_1.deconstructPacket)(obj);
          const pack = this.encodeAsString(deconstruction.packet);
          const buffers = deconstruction.buffers;
          buffers.unshift(pack);
          return buffers;
        }
      };
      exports.Encoder = Encoder;
      function isObject(value) {
        return Object.prototype.toString.call(value) === "[object Object]";
      }
      var Decoder = class _Decoder extends component_emitter_1.Emitter {
        /**
         * Decoder constructor
         *
         * @param {function} reviver - custom reviver to pass down to JSON.stringify
         */
        constructor(reviver) {
          super();
          this.reviver = reviver;
        }
        /**
         * Decodes an encoded packet string into packet JSON.
         *
         * @param {String} obj - encoded packet
         */
        add(obj) {
          let packet;
          if (typeof obj === "string") {
            if (this.reconstructor) {
              throw new Error("got plaintext data when reconstructing a packet");
            }
            packet = this.decodeString(obj);
            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
              packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
              this.reconstructor = new BinaryReconstructor(packet);
              if (packet.attachments === 0) {
                super.emitReserved("decoded", packet);
              }
            } else {
              super.emitReserved("decoded", packet);
            }
          } else if ((0, is_binary_js_1.isBinary)(obj) || obj.base64) {
            if (!this.reconstructor) {
              throw new Error("got binary data when not reconstructing a packet");
            } else {
              packet = this.reconstructor.takeBinaryData(obj);
              if (packet) {
                this.reconstructor = null;
                super.emitReserved("decoded", packet);
              }
            }
          } else {
            throw new Error("Unknown type: " + obj);
          }
        }
        /**
         * Decode a packet String (JSON data)
         *
         * @param {String} str
         * @return {Object} packet
         */
        decodeString(str) {
          let i = 0;
          const p = {
            type: Number(str.charAt(0))
          };
          if (PacketType[p.type] === void 0) {
            throw new Error("unknown packet type " + p.type);
          }
          if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
            const start = i + 1;
            while (str.charAt(++i) !== "-" && i != str.length) {
            }
            const buf = str.substring(start, i);
            if (buf != Number(buf) || str.charAt(i) !== "-") {
              throw new Error("Illegal attachments");
            }
            p.attachments = Number(buf);
          }
          if ("/" === str.charAt(i + 1)) {
            const start = i + 1;
            while (++i) {
              const c = str.charAt(i);
              if ("," === c)
                break;
              if (i === str.length)
                break;
            }
            p.nsp = str.substring(start, i);
          } else {
            p.nsp = "/";
          }
          const next = str.charAt(i + 1);
          if ("" !== next && Number(next) == next) {
            const start = i + 1;
            while (++i) {
              const c = str.charAt(i);
              if (null == c || Number(c) != c) {
                --i;
                break;
              }
              if (i === str.length)
                break;
            }
            p.id = Number(str.substring(start, i + 1));
          }
          if (str.charAt(++i)) {
            const payload = this.tryParse(str.substr(i));
            if (_Decoder.isPayloadValid(p.type, payload)) {
              p.data = payload;
            } else {
              throw new Error("invalid payload");
            }
          }
          debug("decoded %s as %j", str, p);
          return p;
        }
        tryParse(str) {
          try {
            return JSON.parse(str, this.reviver);
          } catch (e) {
            return false;
          }
        }
        static isPayloadValid(type, payload) {
          switch (type) {
            case PacketType.CONNECT:
              return isObject(payload);
            case PacketType.DISCONNECT:
              return payload === void 0;
            case PacketType.CONNECT_ERROR:
              return typeof payload === "string" || isObject(payload);
            case PacketType.EVENT:
            case PacketType.BINARY_EVENT:
              return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS.indexOf(payload[0]) === -1);
            case PacketType.ACK:
            case PacketType.BINARY_ACK:
              return Array.isArray(payload);
          }
        }
        /**
         * Deallocates a parser's resources
         */
        destroy() {
          if (this.reconstructor) {
            this.reconstructor.finishedReconstruction();
            this.reconstructor = null;
          }
        }
      };
      exports.Decoder = Decoder;
      var BinaryReconstructor = class {
        constructor(packet) {
          this.packet = packet;
          this.buffers = [];
          this.reconPack = packet;
        }
        /**
         * Method to be called when binary data received from connection
         * after a BINARY_EVENT packet.
         *
         * @param {Buffer | ArrayBuffer} binData - the raw binary data received
         * @return {null | Object} returns null if more binary data is expected or
         *   a reconstructed packet object if all buffers have been received.
         */
        takeBinaryData(binData) {
          this.buffers.push(binData);
          if (this.buffers.length === this.reconPack.attachments) {
            const packet = (0, binary_js_1.reconstructPacket)(this.reconPack, this.buffers);
            this.finishedReconstruction();
            return packet;
          }
          return null;
        }
        /**
         * Cleans up binary packet reconstruction variables.
         */
        finishedReconstruction() {
          this.reconPack = null;
          this.buffers = [];
        }
      };
    }
  });

  // node_modules/socket.io-client/build/cjs/on.js
  var require_on = __commonJS({
    "node_modules/socket.io-client/build/cjs/on.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.on = on;
      function on(obj, ev, fn) {
        obj.on(ev, fn);
        return function subDestroy() {
          obj.off(ev, fn);
        };
      }
    }
  });

  // node_modules/socket.io-client/build/cjs/socket.js
  var require_socket2 = __commonJS({
    "node_modules/socket.io-client/build/cjs/socket.js"(exports) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Socket = void 0;
      var socket_io_parser_1 = require_cjs4();
      var on_js_1 = require_on();
      var component_emitter_1 = require_cjs2();
      var debug_1 = __importDefault(require_browser2());
      var debug = (0, debug_1.default)("socket.io-client:socket");
      var RESERVED_EVENTS = Object.freeze({
        connect: 1,
        connect_error: 1,
        disconnect: 1,
        disconnecting: 1,
        // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
        newListener: 1,
        removeListener: 1
      });
      var Socket = class extends component_emitter_1.Emitter {
        /**
         * `Socket` constructor.
         */
        constructor(io, nsp, opts) {
          super();
          this.connected = false;
          this.recovered = false;
          this.receiveBuffer = [];
          this.sendBuffer = [];
          this._queue = [];
          this._queueSeq = 0;
          this.ids = 0;
          this.acks = {};
          this.flags = {};
          this.io = io;
          this.nsp = nsp;
          if (opts && opts.auth) {
            this.auth = opts.auth;
          }
          this._opts = Object.assign({}, opts);
          if (this.io._autoConnect)
            this.open();
        }
        /**
         * Whether the socket is currently disconnected
         *
         * @example
         * const socket = io();
         *
         * socket.on("connect", () => {
         *   console.log(socket.disconnected); // false
         * });
         *
         * socket.on("disconnect", () => {
         *   console.log(socket.disconnected); // true
         * });
         */
        get disconnected() {
          return !this.connected;
        }
        /**
         * Subscribe to open, close and packet events
         *
         * @private
         */
        subEvents() {
          if (this.subs)
            return;
          const io = this.io;
          this.subs = [
            (0, on_js_1.on)(io, "open", this.onopen.bind(this)),
            (0, on_js_1.on)(io, "packet", this.onpacket.bind(this)),
            (0, on_js_1.on)(io, "error", this.onerror.bind(this)),
            (0, on_js_1.on)(io, "close", this.onclose.bind(this))
          ];
        }
        /**
         * Whether the Socket will try to reconnect when its Manager connects or reconnects.
         *
         * @example
         * const socket = io();
         *
         * console.log(socket.active); // true
         *
         * socket.on("disconnect", (reason) => {
         *   if (reason === "io server disconnect") {
         *     // the disconnection was initiated by the server, you need to manually reconnect
         *     console.log(socket.active); // false
         *   }
         *   // else the socket will automatically try to reconnect
         *   console.log(socket.active); // true
         * });
         */
        get active() {
          return !!this.subs;
        }
        /**
         * "Opens" the socket.
         *
         * @example
         * const socket = io({
         *   autoConnect: false
         * });
         *
         * socket.connect();
         */
        connect() {
          if (this.connected)
            return this;
          this.subEvents();
          if (!this.io["_reconnecting"])
            this.io.open();
          if ("open" === this.io._readyState)
            this.onopen();
          return this;
        }
        /**
         * Alias for {@link connect()}.
         */
        open() {
          return this.connect();
        }
        /**
         * Sends a `message` event.
         *
         * This method mimics the WebSocket.send() method.
         *
         * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
         *
         * @example
         * socket.send("hello");
         *
         * // this is equivalent to
         * socket.emit("message", "hello");
         *
         * @return self
         */
        send(...args) {
          args.unshift("message");
          this.emit.apply(this, args);
          return this;
        }
        /**
         * Override `emit`.
         * If the event is in `events`, it's emitted normally.
         *
         * @example
         * socket.emit("hello", "world");
         *
         * // all serializable datastructures are supported (no need to call JSON.stringify)
         * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
         *
         * // with an acknowledgement from the server
         * socket.emit("hello", "world", (val) => {
         *   // ...
         * });
         *
         * @return self
         */
        emit(ev, ...args) {
          var _a, _b, _c;
          if (RESERVED_EVENTS.hasOwnProperty(ev)) {
            throw new Error('"' + ev.toString() + '" is a reserved event name');
          }
          args.unshift(ev);
          if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
            this._addToQueue(args);
            return this;
          }
          const packet = {
            type: socket_io_parser_1.PacketType.EVENT,
            data: args
          };
          packet.options = {};
          packet.options.compress = this.flags.compress !== false;
          if ("function" === typeof args[args.length - 1]) {
            const id = this.ids++;
            debug("emitting packet with ack id %d", id);
            const ack = args.pop();
            this._registerAckCallback(id, ack);
            packet.id = id;
          }
          const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;
          const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());
          const discardPacket = this.flags.volatile && !isTransportWritable;
          if (discardPacket) {
            debug("discard packet as the transport is not currently writable");
          } else if (isConnected) {
            this.notifyOutgoingListeners(packet);
            this.packet(packet);
          } else {
            this.sendBuffer.push(packet);
          }
          this.flags = {};
          return this;
        }
        /**
         * @private
         */
        _registerAckCallback(id, ack) {
          var _a;
          const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
          if (timeout === void 0) {
            this.acks[id] = ack;
            return;
          }
          const timer = this.io.setTimeoutFn(() => {
            delete this.acks[id];
            for (let i = 0; i < this.sendBuffer.length; i++) {
              if (this.sendBuffer[i].id === id) {
                debug("removing packet with ack id %d from the buffer", id);
                this.sendBuffer.splice(i, 1);
              }
            }
            debug("event with ack id %d has timed out after %d ms", id, timeout);
            ack.call(this, new Error("operation has timed out"));
          }, timeout);
          const fn = (...args) => {
            this.io.clearTimeoutFn(timer);
            ack.apply(this, args);
          };
          fn.withError = true;
          this.acks[id] = fn;
        }
        /**
         * Emits an event and waits for an acknowledgement
         *
         * @example
         * // without timeout
         * const response = await socket.emitWithAck("hello", "world");
         *
         * // with a specific timeout
         * try {
         *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
         * } catch (err) {
         *   // the server did not acknowledge the event in the given delay
         * }
         *
         * @return a Promise that will be fulfilled when the server acknowledges the event
         */
        emitWithAck(ev, ...args) {
          return new Promise((resolve, reject) => {
            const fn = (arg1, arg2) => {
              return arg1 ? reject(arg1) : resolve(arg2);
            };
            fn.withError = true;
            args.push(fn);
            this.emit(ev, ...args);
          });
        }
        /**
         * Add the packet to the queue.
         * @param args
         * @private
         */
        _addToQueue(args) {
          let ack;
          if (typeof args[args.length - 1] === "function") {
            ack = args.pop();
          }
          const packet = {
            id: this._queueSeq++,
            tryCount: 0,
            pending: false,
            args,
            flags: Object.assign({ fromQueue: true }, this.flags)
          };
          args.push((err, ...responseArgs) => {
            if (packet !== this._queue[0]) {
              return;
            }
            const hasError = err !== null;
            if (hasError) {
              if (packet.tryCount > this._opts.retries) {
                debug("packet [%d] is discarded after %d tries", packet.id, packet.tryCount);
                this._queue.shift();
                if (ack) {
                  ack(err);
                }
              }
            } else {
              debug("packet [%d] was successfully sent", packet.id);
              this._queue.shift();
              if (ack) {
                ack(null, ...responseArgs);
              }
            }
            packet.pending = false;
            return this._drainQueue();
          });
          this._queue.push(packet);
          this._drainQueue();
        }
        /**
         * Send the first packet of the queue, and wait for an acknowledgement from the server.
         * @param force - whether to resend a packet that has not been acknowledged yet
         *
         * @private
         */
        _drainQueue(force = false) {
          debug("draining queue");
          if (!this.connected || this._queue.length === 0) {
            return;
          }
          const packet = this._queue[0];
          if (packet.pending && !force) {
            debug("packet [%d] has already been sent and is waiting for an ack", packet.id);
            return;
          }
          packet.pending = true;
          packet.tryCount++;
          debug("sending packet [%d] (try n\xB0%d)", packet.id, packet.tryCount);
          this.flags = packet.flags;
          this.emit.apply(this, packet.args);
        }
        /**
         * Sends a packet.
         *
         * @param packet
         * @private
         */
        packet(packet) {
          packet.nsp = this.nsp;
          this.io._packet(packet);
        }
        /**
         * Called upon engine `open`.
         *
         * @private
         */
        onopen() {
          debug("transport is open - connecting");
          if (typeof this.auth == "function") {
            this.auth((data) => {
              this._sendConnectPacket(data);
            });
          } else {
            this._sendConnectPacket(this.auth);
          }
        }
        /**
         * Sends a CONNECT packet to initiate the Socket.IO session.
         *
         * @param data
         * @private
         */
        _sendConnectPacket(data) {
          this.packet({
            type: socket_io_parser_1.PacketType.CONNECT,
            data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data) : data
          });
        }
        /**
         * Called upon engine or manager `error`.
         *
         * @param err
         * @private
         */
        onerror(err) {
          if (!this.connected) {
            this.emitReserved("connect_error", err);
          }
        }
        /**
         * Called upon engine `close`.
         *
         * @param reason
         * @param description
         * @private
         */
        onclose(reason, description) {
          debug("close (%s)", reason);
          this.connected = false;
          delete this.id;
          this.emitReserved("disconnect", reason, description);
          this._clearAcks();
        }
        /**
         * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
         * the server.
         *
         * @private
         */
        _clearAcks() {
          Object.keys(this.acks).forEach((id) => {
            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);
            if (!isBuffered) {
              const ack = this.acks[id];
              delete this.acks[id];
              if (ack.withError) {
                ack.call(this, new Error("socket has been disconnected"));
              }
            }
          });
        }
        /**
         * Called with socket packet.
         *
         * @param packet
         * @private
         */
        onpacket(packet) {
          const sameNamespace = packet.nsp === this.nsp;
          if (!sameNamespace)
            return;
          switch (packet.type) {
            case socket_io_parser_1.PacketType.CONNECT:
              if (packet.data && packet.data.sid) {
                this.onconnect(packet.data.sid, packet.data.pid);
              } else {
                this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
              }
              break;
            case socket_io_parser_1.PacketType.EVENT:
            case socket_io_parser_1.PacketType.BINARY_EVENT:
              this.onevent(packet);
              break;
            case socket_io_parser_1.PacketType.ACK:
            case socket_io_parser_1.PacketType.BINARY_ACK:
              this.onack(packet);
              break;
            case socket_io_parser_1.PacketType.DISCONNECT:
              this.ondisconnect();
              break;
            case socket_io_parser_1.PacketType.CONNECT_ERROR:
              this.destroy();
              const err = new Error(packet.data.message);
              err.data = packet.data.data;
              this.emitReserved("connect_error", err);
              break;
          }
        }
        /**
         * Called upon a server event.
         *
         * @param packet
         * @private
         */
        onevent(packet) {
          const args = packet.data || [];
          debug("emitting event %j", args);
          if (null != packet.id) {
            debug("attaching ack callback to event");
            args.push(this.ack(packet.id));
          }
          if (this.connected) {
            this.emitEvent(args);
          } else {
            this.receiveBuffer.push(Object.freeze(args));
          }
        }
        emitEvent(args) {
          if (this._anyListeners && this._anyListeners.length) {
            const listeners = this._anyListeners.slice();
            for (const listener of listeners) {
              listener.apply(this, args);
            }
          }
          super.emit.apply(this, args);
          if (this._pid && args.length && typeof args[args.length - 1] === "string") {
            this._lastOffset = args[args.length - 1];
          }
        }
        /**
         * Produces an ack callback to emit with an event.
         *
         * @private
         */
        ack(id) {
          const self2 = this;
          let sent = false;
          return function(...args) {
            if (sent)
              return;
            sent = true;
            debug("sending ack %j", args);
            self2.packet({
              type: socket_io_parser_1.PacketType.ACK,
              id,
              data: args
            });
          };
        }
        /**
         * Called upon a server acknowledgement.
         *
         * @param packet
         * @private
         */
        onack(packet) {
          const ack = this.acks[packet.id];
          if (typeof ack !== "function") {
            debug("bad ack %s", packet.id);
            return;
          }
          delete this.acks[packet.id];
          debug("calling ack %s with %j", packet.id, packet.data);
          if (ack.withError) {
            packet.data.unshift(null);
          }
          ack.apply(this, packet.data);
        }
        /**
         * Called upon server connect.
         *
         * @private
         */
        onconnect(id, pid) {
          debug("socket connected with id %s", id);
          this.id = id;
          this.recovered = pid && this._pid === pid;
          this._pid = pid;
          this.connected = true;
          this.emitBuffered();
          this.emitReserved("connect");
          this._drainQueue(true);
        }
        /**
         * Emit buffered events (received and emitted).
         *
         * @private
         */
        emitBuffered() {
          this.receiveBuffer.forEach((args) => this.emitEvent(args));
          this.receiveBuffer = [];
          this.sendBuffer.forEach((packet) => {
            this.notifyOutgoingListeners(packet);
            this.packet(packet);
          });
          this.sendBuffer = [];
        }
        /**
         * Called upon server disconnect.
         *
         * @private
         */
        ondisconnect() {
          debug("server disconnect (%s)", this.nsp);
          this.destroy();
          this.onclose("io server disconnect");
        }
        /**
         * Called upon forced client/server side disconnections,
         * this method ensures the manager stops tracking us and
         * that reconnections don't get triggered for this.
         *
         * @private
         */
        destroy() {
          if (this.subs) {
            this.subs.forEach((subDestroy) => subDestroy());
            this.subs = void 0;
          }
          this.io["_destroy"](this);
        }
        /**
         * Disconnects the socket manually. In that case, the socket will not try to reconnect.
         *
         * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
         *
         * @example
         * const socket = io();
         *
         * socket.on("disconnect", (reason) => {
         *   // console.log(reason); prints "io client disconnect"
         * });
         *
         * socket.disconnect();
         *
         * @return self
         */
        disconnect() {
          if (this.connected) {
            debug("performing disconnect (%s)", this.nsp);
            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });
          }
          this.destroy();
          if (this.connected) {
            this.onclose("io client disconnect");
          }
          return this;
        }
        /**
         * Alias for {@link disconnect()}.
         *
         * @return self
         */
        close() {
          return this.disconnect();
        }
        /**
         * Sets the compress flag.
         *
         * @example
         * socket.compress(false).emit("hello");
         *
         * @param compress - if `true`, compresses the sending data
         * @return self
         */
        compress(compress) {
          this.flags.compress = compress;
          return this;
        }
        /**
         * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
         * ready to send messages.
         *
         * @example
         * socket.volatile.emit("hello"); // the server may or may not receive it
         *
         * @returns self
         */
        get volatile() {
          this.flags.volatile = true;
          return this;
        }
        /**
         * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
         * given number of milliseconds have elapsed without an acknowledgement from the server:
         *
         * @example
         * socket.timeout(5000).emit("my-event", (err) => {
         *   if (err) {
         *     // the server did not acknowledge the event in the given delay
         *   }
         * });
         *
         * @returns self
         */
        timeout(timeout) {
          this.flags.timeout = timeout;
          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback.
         *
         * @example
         * socket.onAny((event, ...args) => {
         *   console.log(`got ${event}`);
         * });
         *
         * @param listener
         */
        onAny(listener) {
          this._anyListeners = this._anyListeners || [];
          this._anyListeners.push(listener);
          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback. The listener is added to the beginning of the listeners array.
         *
         * @example
         * socket.prependAny((event, ...args) => {
         *   console.log(`got event ${event}`);
         * });
         *
         * @param listener
         */
        prependAny(listener) {
          this._anyListeners = this._anyListeners || [];
          this._anyListeners.unshift(listener);
          return this;
        }
        /**
         * Removes the listener that will be fired when any event is emitted.
         *
         * @example
         * const catchAllListener = (event, ...args) => {
         *   console.log(`got event ${event}`);
         * }
         *
         * socket.onAny(catchAllListener);
         *
         * // remove a specific listener
         * socket.offAny(catchAllListener);
         *
         * // or remove all listeners
         * socket.offAny();
         *
         * @param listener
         */
        offAny(listener) {
          if (!this._anyListeners) {
            return this;
          }
          if (listener) {
            const listeners = this._anyListeners;
            for (let i = 0; i < listeners.length; i++) {
              if (listener === listeners[i]) {
                listeners.splice(i, 1);
                return this;
              }
            }
          } else {
            this._anyListeners = [];
          }
          return this;
        }
        /**
         * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
         * e.g. to remove listeners.
         */
        listenersAny() {
          return this._anyListeners || [];
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback.
         *
         * Note: acknowledgements sent to the server are not included.
         *
         * @example
         * socket.onAnyOutgoing((event, ...args) => {
         *   console.log(`sent event ${event}`);
         * });
         *
         * @param listener
         */
        onAnyOutgoing(listener) {
          this._anyOutgoingListeners = this._anyOutgoingListeners || [];
          this._anyOutgoingListeners.push(listener);
          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback. The listener is added to the beginning of the listeners array.
         *
         * Note: acknowledgements sent to the server are not included.
         *
         * @example
         * socket.prependAnyOutgoing((event, ...args) => {
         *   console.log(`sent event ${event}`);
         * });
         *
         * @param listener
         */
        prependAnyOutgoing(listener) {
          this._anyOutgoingListeners = this._anyOutgoingListeners || [];
          this._anyOutgoingListeners.unshift(listener);
          return this;
        }
        /**
         * Removes the listener that will be fired when any event is emitted.
         *
         * @example
         * const catchAllListener = (event, ...args) => {
         *   console.log(`sent event ${event}`);
         * }
         *
         * socket.onAnyOutgoing(catchAllListener);
         *
         * // remove a specific listener
         * socket.offAnyOutgoing(catchAllListener);
         *
         * // or remove all listeners
         * socket.offAnyOutgoing();
         *
         * @param [listener] - the catch-all listener (optional)
         */
        offAnyOutgoing(listener) {
          if (!this._anyOutgoingListeners) {
            return this;
          }
          if (listener) {
            const listeners = this._anyOutgoingListeners;
            for (let i = 0; i < listeners.length; i++) {
              if (listener === listeners[i]) {
                listeners.splice(i, 1);
                return this;
              }
            }
          } else {
            this._anyOutgoingListeners = [];
          }
          return this;
        }
        /**
         * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
         * e.g. to remove listeners.
         */
        listenersAnyOutgoing() {
          return this._anyOutgoingListeners || [];
        }
        /**
         * Notify the listeners for each packet sent
         *
         * @param packet
         *
         * @private
         */
        notifyOutgoingListeners(packet) {
          if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
            const listeners = this._anyOutgoingListeners.slice();
            for (const listener of listeners) {
              listener.apply(this, packet.data);
            }
          }
        }
      };
      exports.Socket = Socket;
    }
  });

  // node_modules/socket.io-client/build/cjs/contrib/backo2.js
  var require_backo2 = __commonJS({
    "node_modules/socket.io-client/build/cjs/contrib/backo2.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Backoff = Backoff;
      function Backoff(opts) {
        opts = opts || {};
        this.ms = opts.min || 100;
        this.max = opts.max || 1e4;
        this.factor = opts.factor || 2;
        this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
        this.attempts = 0;
      }
      Backoff.prototype.duration = function() {
        var ms = this.ms * Math.pow(this.factor, this.attempts++);
        if (this.jitter) {
          var rand = Math.random();
          var deviation = Math.floor(rand * this.jitter * ms);
          ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
        }
        return Math.min(ms, this.max) | 0;
      };
      Backoff.prototype.reset = function() {
        this.attempts = 0;
      };
      Backoff.prototype.setMin = function(min) {
        this.ms = min;
      };
      Backoff.prototype.setMax = function(max) {
        this.max = max;
      };
      Backoff.prototype.setJitter = function(jitter) {
        this.jitter = jitter;
      };
    }
  });

  // node_modules/socket.io-client/build/cjs/manager.js
  var require_manager = __commonJS({
    "node_modules/socket.io-client/build/cjs/manager.js"(exports) {
      "use strict";
      init_react_shim();
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Manager = void 0;
      var engine_io_client_1 = require_cjs3();
      var socket_js_1 = require_socket2();
      var parser = __importStar(require_cjs4());
      var on_js_1 = require_on();
      var backo2_js_1 = require_backo2();
      var component_emitter_1 = require_cjs2();
      var debug_1 = __importDefault(require_browser2());
      var debug = (0, debug_1.default)("socket.io-client:manager");
      var Manager = class extends component_emitter_1.Emitter {
        constructor(uri, opts) {
          var _a;
          super();
          this.nsps = {};
          this.subs = [];
          if (uri && "object" === typeof uri) {
            opts = uri;
            uri = void 0;
          }
          opts = opts || {};
          opts.path = opts.path || "/socket.io";
          this.opts = opts;
          (0, engine_io_client_1.installTimerFunctions)(this, opts);
          this.reconnection(opts.reconnection !== false);
          this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
          this.reconnectionDelay(opts.reconnectionDelay || 1e3);
          this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
          this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
          this.backoff = new backo2_js_1.Backoff({
            min: this.reconnectionDelay(),
            max: this.reconnectionDelayMax(),
            jitter: this.randomizationFactor()
          });
          this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
          this._readyState = "closed";
          this.uri = uri;
          const _parser = opts.parser || parser;
          this.encoder = new _parser.Encoder();
          this.decoder = new _parser.Decoder();
          this._autoConnect = opts.autoConnect !== false;
          if (this._autoConnect)
            this.open();
        }
        reconnection(v) {
          if (!arguments.length)
            return this._reconnection;
          this._reconnection = !!v;
          if (!v) {
            this.skipReconnect = true;
          }
          return this;
        }
        reconnectionAttempts(v) {
          if (v === void 0)
            return this._reconnectionAttempts;
          this._reconnectionAttempts = v;
          return this;
        }
        reconnectionDelay(v) {
          var _a;
          if (v === void 0)
            return this._reconnectionDelay;
          this._reconnectionDelay = v;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
          return this;
        }
        randomizationFactor(v) {
          var _a;
          if (v === void 0)
            return this._randomizationFactor;
          this._randomizationFactor = v;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
          return this;
        }
        reconnectionDelayMax(v) {
          var _a;
          if (v === void 0)
            return this._reconnectionDelayMax;
          this._reconnectionDelayMax = v;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
          return this;
        }
        timeout(v) {
          if (!arguments.length)
            return this._timeout;
          this._timeout = v;
          return this;
        }
        /**
         * Starts trying to reconnect if reconnection is enabled and we have not
         * started reconnecting yet
         *
         * @private
         */
        maybeReconnectOnOpen() {
          if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
            this.reconnect();
          }
        }
        /**
         * Sets the current transport `socket`.
         *
         * @param {Function} fn - optional, callback
         * @return self
         * @public
         */
        open(fn) {
          debug("readyState %s", this._readyState);
          if (~this._readyState.indexOf("open"))
            return this;
          debug("opening %s", this.uri);
          this.engine = new engine_io_client_1.Socket(this.uri, this.opts);
          const socket = this.engine;
          const self2 = this;
          this._readyState = "opening";
          this.skipReconnect = false;
          const openSubDestroy = (0, on_js_1.on)(socket, "open", function() {
            self2.onopen();
            fn && fn();
          });
          const onError = (err) => {
            debug("error");
            this.cleanup();
            this._readyState = "closed";
            this.emitReserved("error", err);
            if (fn) {
              fn(err);
            } else {
              this.maybeReconnectOnOpen();
            }
          };
          const errorSub = (0, on_js_1.on)(socket, "error", onError);
          if (false !== this._timeout) {
            const timeout = this._timeout;
            debug("connect attempt will timeout after %d", timeout);
            const timer = this.setTimeoutFn(() => {
              debug("connect attempt timed out after %d", timeout);
              openSubDestroy();
              onError(new Error("timeout"));
              socket.close();
            }, timeout);
            if (this.opts.autoUnref) {
              timer.unref();
            }
            this.subs.push(() => {
              this.clearTimeoutFn(timer);
            });
          }
          this.subs.push(openSubDestroy);
          this.subs.push(errorSub);
          return this;
        }
        /**
         * Alias for open()
         *
         * @return self
         * @public
         */
        connect(fn) {
          return this.open(fn);
        }
        /**
         * Called upon transport open.
         *
         * @private
         */
        onopen() {
          debug("open");
          this.cleanup();
          this._readyState = "open";
          this.emitReserved("open");
          const socket = this.engine;
          this.subs.push(
            (0, on_js_1.on)(socket, "ping", this.onping.bind(this)),
            (0, on_js_1.on)(socket, "data", this.ondata.bind(this)),
            (0, on_js_1.on)(socket, "error", this.onerror.bind(this)),
            (0, on_js_1.on)(socket, "close", this.onclose.bind(this)),
            // @ts-ignore
            (0, on_js_1.on)(this.decoder, "decoded", this.ondecoded.bind(this))
          );
        }
        /**
         * Called upon a ping.
         *
         * @private
         */
        onping() {
          this.emitReserved("ping");
        }
        /**
         * Called with data.
         *
         * @private
         */
        ondata(data) {
          try {
            this.decoder.add(data);
          } catch (e) {
            this.onclose("parse error", e);
          }
        }
        /**
         * Called when parser fully decodes a packet.
         *
         * @private
         */
        ondecoded(packet) {
          (0, engine_io_client_1.nextTick)(() => {
            this.emitReserved("packet", packet);
          }, this.setTimeoutFn);
        }
        /**
         * Called upon socket error.
         *
         * @private
         */
        onerror(err) {
          debug("error", err);
          this.emitReserved("error", err);
        }
        /**
         * Creates a new socket for the given `nsp`.
         *
         * @return {Socket}
         * @public
         */
        socket(nsp, opts) {
          let socket = this.nsps[nsp];
          if (!socket) {
            socket = new socket_js_1.Socket(this, nsp, opts);
            this.nsps[nsp] = socket;
          } else if (this._autoConnect && !socket.active) {
            socket.connect();
          }
          return socket;
        }
        /**
         * Called upon a socket close.
         *
         * @param socket
         * @private
         */
        _destroy(socket) {
          const nsps = Object.keys(this.nsps);
          for (const nsp of nsps) {
            const socket2 = this.nsps[nsp];
            if (socket2.active) {
              debug("socket %s is still active, skipping close", nsp);
              return;
            }
          }
          this._close();
        }
        /**
         * Writes a packet.
         *
         * @param packet
         * @private
         */
        _packet(packet) {
          debug("writing packet %j", packet);
          const encodedPackets = this.encoder.encode(packet);
          for (let i = 0; i < encodedPackets.length; i++) {
            this.engine.write(encodedPackets[i], packet.options);
          }
        }
        /**
         * Clean up transport subscriptions and packet buffer.
         *
         * @private
         */
        cleanup() {
          debug("cleanup");
          this.subs.forEach((subDestroy) => subDestroy());
          this.subs.length = 0;
          this.decoder.destroy();
        }
        /**
         * Close the current socket.
         *
         * @private
         */
        _close() {
          debug("disconnect");
          this.skipReconnect = true;
          this._reconnecting = false;
          this.onclose("forced close");
        }
        /**
         * Alias for close()
         *
         * @private
         */
        disconnect() {
          return this._close();
        }
        /**
         * Called when:
         *
         * - the low-level engine is closed
         * - the parser encountered a badly formatted packet
         * - all sockets are disconnected
         *
         * @private
         */
        onclose(reason, description) {
          var _a;
          debug("closed due to %s", reason);
          this.cleanup();
          (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();
          this.backoff.reset();
          this._readyState = "closed";
          this.emitReserved("close", reason, description);
          if (this._reconnection && !this.skipReconnect) {
            this.reconnect();
          }
        }
        /**
         * Attempt a reconnection.
         *
         * @private
         */
        reconnect() {
          if (this._reconnecting || this.skipReconnect)
            return this;
          const self2 = this;
          if (this.backoff.attempts >= this._reconnectionAttempts) {
            debug("reconnect failed");
            this.backoff.reset();
            this.emitReserved("reconnect_failed");
            this._reconnecting = false;
          } else {
            const delay = this.backoff.duration();
            debug("will wait %dms before reconnect attempt", delay);
            this._reconnecting = true;
            const timer = this.setTimeoutFn(() => {
              if (self2.skipReconnect)
                return;
              debug("attempting reconnect");
              this.emitReserved("reconnect_attempt", self2.backoff.attempts);
              if (self2.skipReconnect)
                return;
              self2.open((err) => {
                if (err) {
                  debug("reconnect attempt error");
                  self2._reconnecting = false;
                  self2.reconnect();
                  this.emitReserved("reconnect_error", err);
                } else {
                  debug("reconnect success");
                  self2.onreconnect();
                }
              });
            }, delay);
            if (this.opts.autoUnref) {
              timer.unref();
            }
            this.subs.push(() => {
              this.clearTimeoutFn(timer);
            });
          }
        }
        /**
         * Called upon successful reconnect.
         *
         * @private
         */
        onreconnect() {
          const attempt = this.backoff.attempts;
          this._reconnecting = false;
          this.backoff.reset();
          this.emitReserved("reconnect", attempt);
        }
      };
      exports.Manager = Manager;
    }
  });

  // node_modules/socket.io-client/build/cjs/index.js
  var require_cjs5 = __commonJS({
    "node_modules/socket.io-client/build/cjs/index.js"(exports, module) {
      "use strict";
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebTransport = exports.WebSocket = exports.NodeWebSocket = exports.XHR = exports.NodeXHR = exports.Fetch = exports.Socket = exports.Manager = exports.protocol = void 0;
      exports.io = lookup;
      exports.connect = lookup;
      exports.default = lookup;
      var url_js_1 = require_url();
      var manager_js_1 = require_manager();
      Object.defineProperty(exports, "Manager", { enumerable: true, get: function() {
        return manager_js_1.Manager;
      } });
      var socket_js_1 = require_socket2();
      Object.defineProperty(exports, "Socket", { enumerable: true, get: function() {
        return socket_js_1.Socket;
      } });
      var debug_1 = __importDefault(require_browser2());
      var debug = (0, debug_1.default)("socket.io-client");
      var cache = {};
      function lookup(uri, opts) {
        if (typeof uri === "object") {
          opts = uri;
          uri = void 0;
        }
        opts = opts || {};
        const parsed = (0, url_js_1.url)(uri, opts.path || "/socket.io");
        const source = parsed.source;
        const id = parsed.id;
        const path = parsed.path;
        const sameNamespace = cache[id] && path in cache[id]["nsps"];
        const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
        let io;
        if (newConnection) {
          debug("ignoring socket cache for %s", source);
          io = new manager_js_1.Manager(source, opts);
        } else {
          if (!cache[id]) {
            debug("new io instance for %s", source);
            cache[id] = new manager_js_1.Manager(source, opts);
          }
          io = cache[id];
        }
        if (parsed.query && !opts.query) {
          opts.query = parsed.queryKey;
        }
        return io.socket(parsed.path, opts);
      }
      Object.assign(lookup, {
        Manager: manager_js_1.Manager,
        Socket: socket_js_1.Socket,
        io: lookup,
        connect: lookup
      });
      var socket_io_parser_1 = require_cjs4();
      Object.defineProperty(exports, "protocol", { enumerable: true, get: function() {
        return socket_io_parser_1.protocol;
      } });
      var engine_io_client_1 = require_cjs3();
      Object.defineProperty(exports, "Fetch", { enumerable: true, get: function() {
        return engine_io_client_1.Fetch;
      } });
      Object.defineProperty(exports, "NodeXHR", { enumerable: true, get: function() {
        return engine_io_client_1.NodeXHR;
      } });
      Object.defineProperty(exports, "XHR", { enumerable: true, get: function() {
        return engine_io_client_1.XHR;
      } });
      Object.defineProperty(exports, "NodeWebSocket", { enumerable: true, get: function() {
        return engine_io_client_1.NodeWebSocket;
      } });
      Object.defineProperty(exports, "WebSocket", { enumerable: true, get: function() {
        return engine_io_client_1.WebSocket;
      } });
      Object.defineProperty(exports, "WebTransport", { enumerable: true, get: function() {
        return engine_io_client_1.WebTransport;
      } });
      module.exports = lookup;
    }
  });

  // dist/audioChatManager.js
  var require_audioChatManager = __commonJS({
    "dist/audioChatManager.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AudioChatManager = void 0;
      var socket_io_client_1 = require_cjs5();
      var audioConfiguration = {
        iceTransportPolicy: "all",
        iceServers: [
          {
            urls: ["stun:bn-turn1.xirsys.com"]
          },
          {
            username: "MvoeAGyQkHfadBQK3FYv4DVKig4Njm3MgwbfwHAP111_l3xfDHcWqQX969ZkI0lDAAAAAGQr_wlhbnVyYWc=",
            credential: "5e5a5a28-d2d5-11ed-b3dc-0242ac140004",
            urls: [
              "turn:bn-turn1.xirsys.com:80?transport=udp",
              "turn:bn-turn1.xirsys.com:3478?transport=udp",
              "turn:bn-turn1.xirsys.com:80?transport=tcp",
              "turn:bn-turn1.xirsys.com:3478?transport=tcp",
              "turns:bn-turn1.xirsys.com:443?transport=tcp",
              "turns:bn-turn1.xirsys.com:5349?transport=tcp"
            ]
          }
        ]
      };
      function log(...args) {
        console.log("[AudioChatManager]", ...args);
      }
      var SOCKET_SERVER_URL = "https://websocket-messaging-2.onrender.com";
      var AudioChatManager = class {
        constructor(userId, sendDataToMain) {
          this.serverUrl = SOCKET_SERVER_URL;
          this.socket = null;
          this.audioRoomId = null;
          this.audioPeerConnections = {};
          this.audioLocalStream = null;
          this.isAudioMuted = false;
          this.userId = userId;
          this.sendDataToMain = sendDataToMain;
        }
        initialize() {
          this.initializeSocket();
        }
        initializeSocket() {
          if (this.socket) {
            return;
          }
          this.socket = (0, socket_io_client_1.io)(this.serverUrl);
          this.socket.on("connect", () => {
            log("Socket connected:", this.socket?.id);
          });
          this.registerSocketEvents();
        }
        async createPeerConnection(targetSocketId, initiator, remoteUserId) {
          if (this.audioPeerConnections[targetSocketId]) {
            return this.audioPeerConnections[targetSocketId];
          }
          const pc = new RTCPeerConnection(audioConfiguration);
          this.audioPeerConnections[targetSocketId] = pc;
          pc.onicecandidate = (evt) => {
            if (!this.socket) {
              return;
            }
            if (evt.candidate) {
              this.socket.emit("audio-send-ice-candidate", evt.candidate, this.audioRoomId, targetSocketId, remoteUserId);
            }
          };
          pc.ontrack = (evt) => {
            const [remoteStream] = evt.streams;
            if (!remoteStream)
              return;
            const audioEl = new Audio();
            audioEl.srcObject = remoteStream;
            audioEl.play().then(() => {
              log("Playing remote audio for user:", remoteUserId);
            }).catch((err) => {
              log("Audio autoplay blocked or error playing remote stream:", err);
            });
          };
          if (this.audioLocalStream) {
            this.audioLocalStream.getTracks().forEach((track) => pc.addTrack(track, this.audioLocalStream));
          }
          if (initiator) {
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            if (this.socket && this.audioRoomId) {
              this.socket.emit("audio-send-offer", offer, this.audioRoomId, targetSocketId, remoteUserId);
            }
          }
          return pc;
        }
        registerSocketEvents() {
          if (!this.socket) {
            return;
          }
          this.socket.on("audio-offer", async (offer, fromSocketId, remoteUserId) => {
            log("Received audio-offer from:", fromSocketId);
            const pc = await this.createPeerConnection(fromSocketId, false, remoteUserId);
            await pc.setRemoteDescription(offer);
            const answer = await pc.createAnswer();
            await pc.setLocalDescription(answer);
            this.socket.emit("audio-send-answer", answer, this.audioRoomId, fromSocketId, remoteUserId);
          });
          this.socket.on("audio-answer", async (answer, fromSocketId, remoteUserId) => {
            log("Received audio-answer from:", fromSocketId);
            const pc = this.audioPeerConnections[fromSocketId];
            if (pc) {
              await pc.setRemoteDescription(answer);
            }
          });
          this.socket.on("audio-ice-candidate", async (candidate, fromSocketId, remoteUserId) => {
            log("Received audio-ice-candidate from:", fromSocketId);
            const pc = this.audioPeerConnections[fromSocketId];
            if (pc) {
              await pc.addIceCandidate(candidate);
            }
          });
          this.socket.on("audio-user-joined", (data) => {
            log("audio-user-joined =>", data);
            this.sendCallback("audio-user-joined", data);
          });
          this.socket.on("audio-user-left", (data) => {
            const { socketId } = data;
            log("audio-user-left =>", data);
            if (this.audioPeerConnections[socketId]) {
              this.audioPeerConnections[socketId].close();
              delete this.audioPeerConnections[socketId];
            }
            this.sendCallback("audio-user-left", data);
          });
          this.socket.on("audio-room-created", (roomId) => {
            log("audio-room-created =>", roomId);
            this.audioRoomId = roomId;
            this.sendCallback("audio-room-created", this.audioRoomId);
          });
          this.socket.on("audio-room-joined", (data) => {
            log("audio-room-joined =>", data.roomId);
            this.audioRoomId = data.roomId;
            this.sendCallback("audio-room-joined", this.audioRoomId);
          });
          this.socket.on("audio-participants", async (participants) => {
            log("audio-participants =>", participants);
            for (const p of participants) {
              await this.createPeerConnection(p.socketId, true, p.userId);
            }
            this.sendCallback("audio-participants", this.audioRoomId);
          });
          this.socket.on("audio-left-room", (data) => {
            log("audio-left-room", data.roomId);
            this.sendCallback("audio-left-room", data);
          });
        }
        async initializeAudio() {
          if (!navigator?.mediaDevices?.getUserMedia) {
            throw new Error("Audio capture not supported in this environment.");
          }
          this.audioLocalStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
          log("Local audio stream initialized.");
        }
        async audioCreateRoom(roomId) {
          if (!this.socketInitialized()) {
            return;
          }
          await this.initializeAudio();
          this.socket?.emit("audio-create-room", { roomId, userId: this.getUserId() });
        }
        async audioJoinRoom(roomId) {
          if (!this.socketInitialized()) {
            return;
          }
          if (!roomId.trim()) {
            throw new Error("Room ID is required.");
          }
          await this.initializeAudio();
          this.socket?.emit("audio-join-room", { roomIdToJoin: roomId, userId: this.getUserId() });
        }
        audioLeaveRoom(roomId) {
          if (!this.socket) {
            return;
          }
          if (this.audioLocalStream) {
            this.audioLocalStream.getTracks().forEach((track) => track.stop());
            this.audioLocalStream = null;
          }
          Object.values(this.audioPeerConnections).forEach((pc) => pc.close());
          this.audioPeerConnections = {};
          if (roomId) {
            this.socket.emit("audio-leave-room", roomId);
            this.audioRoomId = null;
            log("Left audio room.");
          }
        }
        audioToggleMute() {
          if (!this.audioLocalStream)
            return;
          const track = this.audioLocalStream.getAudioTracks()[0];
          track.enabled = !track.enabled;
          this.isAudioMuted = !track.enabled;
          log("audioToggleMute => now muted?", this.isAudioMuted);
        }
        getUserId() {
          return this.userId;
        }
        sendCallback(eventType, data) {
          const param = data ? { ...data } : {};
          param.type = eventType;
          this.sendDataToMain(param);
        }
        socketInitialized() {
          if (!this.socket) {
            console.error("Socket not initialized");
            return false;
          }
          return true;
        }
        dispose() {
          if (!this.socket) {
            return;
          }
          this.socket.off("audio-offer");
          this.socket.off("audio-answer");
          this.socket.off("audio-ice-candidate");
          this.socket.off("audio-user-joined");
          this.socket.off("audio-user-left");
          this.socket.off("audio-room-created");
          this.socket.off("audio-room-joined");
          this.socket.off("audio-participants");
          this.socket.off("audio-left-room");
          if (this.socket.connected) {
            this.socket.disconnect();
          }
          log("AudioChatManager disposed, socket disconnected.");
        }
      };
      exports.AudioChatManager = AudioChatManager;
    }
  });

  // dist/liveKitAudioManager.js
  var require_liveKitAudioManager = __commonJS({
    "dist/liveKitAudioManager.js"(exports) {
      "use strict";
      init_react_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LiveKitAudioChatManager = void 0;
      var livekit_client_1 = require_livekit_client_umd();
      function log(...args) {
        console.log("[LiveKitAudioChatManager]", ...args);
      }
      var LiveKitAudioChatManager = class {
        constructor(sendDataToMain) {
          this.audioRoom = null;
          this.audioLocalStream = null;
          this.sendDataToMain = sendDataToMain;
        }
        async connectAudioRoom(wsServerUrl, participantToken) {
          console.log("Starting to connect room");
          this.sendDataToMain({ "message": "Test message to main: Starting to connect room" });
          this.audioRoom = new livekit_client_1.Room();
          await this.audioRoom.connect(wsServerUrl, participantToken, { autoSubscribe: true });
          this.sendDataToMain({ "room-details": this.audioRoom.name, "localparticipantKind": this.audioRoom.localParticipant.kind });
          this.audioRoom.on("trackSubscribed", (track, publication) => {
            this.sendDataToMain({ type: "room-event-track-subscribed", "publication": publication.trackName, "isLocal": publication.isLocal, "source": publication.source });
          });
          this.audioRoom.on("trackPublished", (publication, participant) => {
            this.sendDataToMain({ type: "room-event-track-subscribed", "publication": publication.trackName, "isLocal": publication.isLocal, "source": publication.source });
          });
          console.log("Finished to connect room", this.audioRoom);
          return this.audioRoom;
        }
        //   private async initializeAudio() {
        //     if (!navigator?.mediaDevices?.getUserMedia) {
        //       throw new Error('Audio capture not supported in this environment.')
        //     }
        //     this.audioLocalStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false })
        //     log('Local audio stream initialized.')
        //   }
        async startRecording() {
          try {
            log("Starting audio recording...");
            this.sendDataToMain({ type: "recording-status", status: "starting" });
            if (!this.audioRoom) {
              throw new Error("Audio room not connected");
            }
            const devices = await navigator.mediaDevices.enumerateDevices();
            const audioDevices = devices.filter((d) => d.kind === "audioinput");
            if (audioDevices.length === 0) {
              throw new Error("No audio input devices found");
            }
          } catch (error) {
            log("Error starting audio recording:", error);
            this.sendDataToMain({
              type: "recording-status",
              status: "error",
              error: error instanceof Error ? error.message : "Unknown error"
            });
            throw error;
          }
        }
        async sendText(text) {
          if (this.audioRoom) {
            this.audioRoom?.localParticipant.sendText(text, { topic: "lk.chat" });
          }
        }
        async stopRecording() {
          try {
            log("Stopping audio recording...");
            this.sendDataToMain({ type: "recording-status", status: "stopping" });
            if (!this.audioRoom) {
              throw new Error("Audio room not connected");
            }
            await this.audioRoom?.localParticipant.setMicrophoneEnabled(false);
            if (this.audioLocalStream) {
              this.audioLocalStream.getTracks().forEach((track) => track.stop());
              this.audioLocalStream = null;
            }
            log("Audio recording stopped successfully");
            this.sendDataToMain({ type: "recording-status", status: "stopped" });
          } catch (error) {
            log("Error stopping audio recording:", error);
            this.sendDataToMain({
              type: "recording-status",
              status: "error",
              error: error instanceof Error ? error.message : "Unknown error"
            });
            throw error;
          }
        }
      };
      exports.LiveKitAudioChatManager = LiveKitAudioChatManager;
    }
  });

  // dist/renderer.js
  var require_renderer = __commonJS({
    "dist/renderer.js"(exports) {
      init_react_shim();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var react_1 = __importDefault(require_react());
      var client_1 = require_client();
      var LiveKitRoom_1 = __importDefault(require_LiveKitRoom());
      var audioChatManager_1 = require_audioChatManager();
      var liveKitAudioManager_1 = require_liveKitAudioManager();
      window.addEventListener("DOMContentLoaded", async () => {
        const { sendCommand, sendDataToMain, receiveDataFromMain, getParams, terminateElectron } = window.electronAPI;
        try {
          const userId = getParams("userId");
          console.log("UserId in Electron is", userId);
          const audioManager = new audioChatManager_1.AudioChatManager(userId, sendDataToMain);
          const livekitAudioManager = new liveKitAudioManager_1.LiveKitAudioChatManager(sendDataToMain);
          receiveDataFromMain(async (args) => {
            console.log("From main ", args.type);
            switch (args.type) {
              case "audio-initialize": {
                break;
              }
              case "audio-create-room": {
                console.log("audio-create-room", args);
                audioManager.audioCreateRoom(args.roomId);
                break;
              }
              case "audio-join-room": {
                audioManager.audioJoinRoom(args.roomId);
                break;
              }
              case "audio-leave-room": {
                audioManager.audioLeaveRoom(args.roomId);
                break;
              }
              case "audio-unmute": {
                audioManager.audioToggleMute();
                break;
              }
              case "audio-mute": {
                audioManager.audioToggleMute();
                break;
              }
              case "connect-livekit": {
                console.log("[RENDERER] connect-livekit", args);
                try {
                  console.log("[RENDERER] connect-livekit", args);
                  const AudioRoom = await livekitAudioManager.connectAudioRoom(args.serverUrl, args.participantToken);
                  console.log("[RENDERER] Attempting to mount LiveKitRoom");
                  const rootElement = document.getElementById("react-root");
                  if (!rootElement) {
                    throw new Error("Could not find root element");
                  }
                  console.log("[RENDERER] Found root element, clearing children");
                  while (rootElement.firstChild) {
                    rootElement.removeChild(rootElement.firstChild);
                  }
                  try {
                    console.log("[RENDERER] Creating React root");
                    const root = (0, client_1.createRoot)(rootElement);
                    console.log("[RENDERER] Rendering LiveKitRoom with room", AudioRoom.name);
                    root.render(react_1.default.createElement(react_1.default.StrictMode, null, react_1.default.createElement(LiveKitRoom_1.default, {
                      room: AudioRoom,
                      sendDataToMain,
                      terminateElectron
                    })));
                    setTimeout(() => {
                      const lkContainer = document.querySelector(".lk-room-container");
                      console.log("[RENDERER] LiveKitRoom container present:", !!lkContainer);
                      if (lkContainer) {
                        console.log("[RENDERER] Container styles:", window.getComputedStyle(lkContainer));
                      }
                    }, 100);
                  } catch (mountError) {
                    console.error("[RENDERER] Error mounting React component:", mountError);
                    throw mountError;
                  }
                  console.log("[RENDERER] LiveKitRoom mounted successfully");
                  const testSound = document.getElementById("test-sound");
                  if (testSound) {
                    testSound.volume = 0.5;
                  }
                } catch (error) {
                  console.error("[RENDERER] Error connecting to LiveKit room:", error);
                  sendDataToMain({ type: "error", error });
                }
                break;
              }
              case "start-audio-recording": {
                console.log("start-audio-recording", args);
                await livekitAudioManager.startRecording();
                break;
              }
              case "send-text": {
                console.log("send-text", args);
                await livekitAudioManager.sendText(args.text);
                break;
              }
              case "stop-audio-recording": {
                console.log("stop-audio-recording");
                await livekitAudioManager.stopRecording();
                break;
              }
            }
          });
        } catch (err) {
          console.error("[RENDERER] Error Occured:", err);
          sendDataToMain({ type: "error", error: err });
        }
      });
    }
  });
  require_renderer();
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)
*/
//# sourceMappingURL=renderer.bundle.js.map
